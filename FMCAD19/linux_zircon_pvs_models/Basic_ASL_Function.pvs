Basic_ASL_Function  % [ parameters ]
		: THEORY

  BEGIN

IMPORTING Basic_ASL_Types, DecodeShift, ShiftReg, AuthIA, AuthIB %, AddWithCarry


HavePACExt(version: ArchVersion): bool =   Let IMPLEMENTATION_DEFINED_isOK: bool = true in
                                              Cond version = ARMv8p0     -> true  ,
                                                   version = ARMv8p3 and IMPLEMENTATION_DEFINED_isOK     -> true ,
						   version = ARMv8p3 and not IMPLEMENTATION_DEFINED_isOK -> False,
						   Else -> throw("IMPLEMENTATION_DEFINED") 	    
					      EndCond
						
%HavePACExt returns TRUE if the implemented architecture includes the extensions defined in the specified architecture version.
% The case isOK forces positive case assumption on the implementation of ARMv8p3 when true e.g.; if isOK = true then the version contains the Extensions
% When it is false then ARMv8p3 does not include Extension. For the rest of the cases we throw "IMPLEMENTATION DEFINED" which can be true or false.
% Amer; check best prover behavior for the specific case of Armv8p3 that shows up in our target. 



%———–

%% Comment as in ASL Library pseudocode for shared/functions/unpredictable/ConstrainUnpredictable:

%————

%// ConstrainUnpredictable()
%// ========================
%// Return the appropriate Constraint result to control the caller's behavior. The return value
%// is IMPLEMENTATION DEFINED within a permitted list for each UNPREDICTABLE case.
%// (The permitted list is determined by an assert or case statement at the call site.)
%// NOTE: This version of the function uses an Unpredictable argument to define the call site.
%// This argument does not appear in the version used in the ARMv8 Architecture Reference Manual.
%// The extra argument is used here to allow this example definition. This is an example only and
%// does not imply a fixed implementation of these behaviors. Indeed the intention is that it should
%// be defined by each implementation, according to its implementation choices. Constraint ConstrainUnpredictable(Unpredictable which)

%—-
ConstrainUnpredictable( which : Unpredictable) : Constraint % implementation defined cases on which can be defined as in
    %shared/functions/unpredictable/ConstrainUnpredictable.


%// CheckSPAlignment()
%// ==================
%// Check correct stack pointer alignment for AArch64 state.
%CheckSPAlignment()
 % bits(64) sp = SP[];
 % if PSTATE.EL == EL0 then stack_align_check = (SCTLR[].SA0 != '0');
 % else stack_align_check = (SCTLR[].SA != '0');
 % if stack_align_check & sp != Align(sp, 16)
 %    then AArch64.SPAlignmentFault();
 %  return;

  END Basic_ASL_Function
