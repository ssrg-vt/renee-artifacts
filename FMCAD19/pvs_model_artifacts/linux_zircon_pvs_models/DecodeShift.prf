(DecodeShift
 (DecodeShift_TCC1 0
  (DecodeShift_TCC1-1 nil 3750288929 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (DecodeShift subtype "0b0" "naturalnumbers.below(exp2.exp2(2))")))
 (DecodeShift_TCC2 0
  (DecodeShift_TCC2-1 nil 3750288929 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (DecodeShift subtype "0b1" "naturalnumbers.below(exp2.exp2(2))")))
 (DecodeShift_TCC3 0
  (DecodeShift_TCC3-1 nil 3750288929 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (DecodeShift subtype "0b10" "naturalnumbers.below(exp2.exp2(2))")))
 (DecodeShift_TCC4 0
  (DecodeShift_TCC4-1 nil 3750288929
   ("" (subtype-tcc) (("" (eval-formula) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (DecodeShift subtype "0b11" "naturalnumbers.below(exp2.exp2(2))")))
 (DecodeShift_TCC5 0
  (DecodeShift_TCC5-1 nil 3750288929
   ("" (cond-disjoint-tcc)
    (("1" (grind-reals)
      (("1" (expand "nat2bv_rec" -1)
        (("1" (expand "nat2bv_rec" -2)
          (("1" (eval-formula -2) nil nil)) nil))
        nil))
      nil)
     ("2" (eval-formula -2) nil nil) ("3" (eval-formula -2) nil nil)
     ("4" (eval-formula -2) nil nil) ("5" (eval-formula -2) nil nil)
     ("6" (eval-formula -2) nil nil))
    nil)
   ((bv const-decl "bvec[N]" bv_arithmetic_defs nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nat2bv_rec def-decl "bvec[N]" bv_arithmetic_defs nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil))
   nil
   (DecodeShift disjointness
    "COND DecodeShift.op = bv[2](0b00) -> Basic_ASL_Types.ShiftType_LSL, DecodeShift.op = bv[2](0b01) -> Basic_ASL_Types.ShiftType_LSR, DecodeShift.op = bv[2](0b10) -> Basic_ASL_Types.ShiftType_ASR, DecodeShift.op = bv[2](0b11) -> Basic_ASL_Types.ShiftType_ROR ENDCOND"
    "nil")))
 (DecodeShift_TCC6 0
  (DecodeShift_TCC6-1 nil 3750288929 ("" (cond-coverage-tcc) nil nil)
   nil nil
   (DecodeShift coverage
    "COND DecodeShift.op = bv[2](0b00) -> Basic_ASL_Types.ShiftType_LSL, DecodeShift.op = bv[2](0b01) -> Basic_ASL_Types.ShiftType_LSR, DecodeShift.op = bv[2](0b10) -> Basic_ASL_Types.ShiftType_ASR, DecodeShift.op = bv[2](0b11) -> Basic_ASL_Types.ShiftType_ROR ENDCOND"
    "nil"))))

