orr_log_shift[(IMPORTING arm_state) p: s]:THEORY
  BEGIN

	Diag: bvec[32]
	addr: nat
	
	IMPORTING Basic_ASL_Types, Basic_ASL_Function, UInt, DecodeShift, ShiftReg, IsZeroBit, bts[32], bt[32]

	diag: Type+ = [# sf: bvec[1], opc: bvec[2], Fixed1: bvec[5], shift: bvec[2], N: bvec[1], Rm: bvec[5], imm6: bvec[6], Rn: bvec[5], Rd: bvec[5] ,length: {n: nat|n = 32} #]
	D: diag
	v: diag = D with [ sf:= bt(Diag, 31 ) ,opc:= bts(Diag, 29, 30 ) ,Fixed1:= bts(Diag, 24, 28 ) ,shift:= bts(Diag, 22, 23 ) ,N:= bt(Diag, 21 ) ,Rm:= bts(Diag, 16, 20 ) ,imm6:= bts(Diag, 10, 15 ) ,Rn:= bts(Diag, 5, 9 ) ,Rd:= bts(Diag, 0, 4 ) , length:= 32 ]

%|- diag_TCC* : PROOF (inst 1 "(# sf:= lambda(i:below(1)):false, opc:= lambda(i:below(2)):false, Fixed1:= lambda(i:below(5)):false, shift:= lambda(i:below(2)):false, N:= lambda(i:below(1)):false, Rm:= lambda(i:below(5)):false, imm6:= lambda(i:below(6)):false, Rn:= lambda(i:below(5)):false, Rd:= lambda(i:below(5)):false, length:= 32 #)") QED

	%ASL constants declarations
  

d : int = UInt(5,v`Rd)
n : int = UInt(5,v`Rn)
m : int = UInt(5,v`Rm)

datasize : int = 64 % if sf = '1' then 64 else 32, we only deal with 64 at this version


ASL(P0 : s): Type = [#   setflags : bool,
                         op       : LogicalOp,
                         operand1 : bvec[datasize], % = p`X(n)
                         operand2 : bvec[datasize], % = ShiftReg(m, shift_type, shift_amount)
		         result   : bvec[64] #] 

 sts0 : ASL( p )
 
 sts1 : ASL(p) = 
             COND v`opc =  bv[2](0b00) -> sts0 with [  op:= LogicalOp_AND, setflags := FALSE],
                  v`opc =  bv[2](0b10) -> sts0 with [  op:= LogicalOp_ORR, setflags := FALSE],
	          v`opc =  bv[2](0b01) -> sts0 with [  op:= LogicalOp_EOR, setflags := FALSE],
	          else                 -> sts0 with [  op:= LogicalOp_AND, setflags := TRUE ] % The condition can be replaced with else. 
             ENDCOND

       
	       
 sts2 : ASL(p) = if v`sf = bv[1](0b0) & v`imm6(5) = True
                   then throw("ReservedValue()_undefinedfault")
		else sts1
		endif

 shift_type   : ShiftType = DecodeShift(v`shift)

 shift_amount : int = UInt(6,v`imm6)

 invert : bool = (v`N = bv[1](0b1))


% operational


 sts3 : ASL(p) = sts2 with [ operand1 := p`X(n)]
 sts4 : ASL(p) = sts3 with [ operand2 := ShiftReg(64, p`X(m), shift_type, shift_amount) ]
 
 sts5 : ASL(p) = if   invert then sts4 with [ operand2 := NOT(sts4`operand2)]
                 else sts4
		 endif

 sts6 : ASL(p) = Cond sts4`op = LogicalOp_AND  -> sts5 with [result := AND (sts5`operand1, sts5`operand2)],
                      sts4`op = LogicalOp_ORR  -> sts5 with [result := OR  (sts5`operand1, sts5`operand2)],
                      sts4`op = LogicalOp_EOR  -> sts5 with [result := XOR (sts5`operand1, sts5`operand2)]%EOR
		 EndCond     
                      
                       
 rslt : bvec[64] = sts6`result

 p1  : s = if sts6`setflags then p with [ `PSTATE`NZCV :=  let result_63 = field(64, rslt, 63 ,63) in
                                                               bv[2](0b00) o IsZeroBit(64,rslt) o result_63 ] % check direction
           else p
	   endif

 post : s = p1 with [ `X(d) := sts6`result ]

%|- sts1_TCC4: PROOF (log-shift-disj-TCC4) QED

%|- sts3_TCC1: PROOF
%|- sts4_TCC1: PROOF 
%|- sts4_TCC2: PROOF 
%|- post_TCC1: PROOF (grind) QED


END orr_log_shift 
