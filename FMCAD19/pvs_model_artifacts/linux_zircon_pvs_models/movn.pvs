movn[(IMPORTING arm_state) p: s]:THEORY

	BEGIN


	Diag: bvec[32]
	addr: nat

        IMPORTING Basic_ASL_Types, Basic_ASL_Function ,bts[32], bt[32], UInt


	diag: Type+ = [# sf: bvec[1], opc: bvec[2], Fixed1: bvec[6], hw: bvec[2], imm16: bvec[16], Rd: bvec[5] ,length: {n: nat|n = 32} #]
	D: diag
	v: diag = D with [ sf:= bt(Diag, 31 ) , opc:= bts(Diag, 29,30), 
	                   Fixed1:=  bv[6](0b101001),%bts(Diag, 23, 28 ) ,
			   hw:= bts(Diag, 21, 22 ) , imm16:= bts(Diag, 5, 20 ) ,Rd:= bts(Diag, 0, 4 ) , length:= 32 ]

%|- diag_TCC* : PROOF (inst 1 "(# sf:= lambda(i:below(1)):false, opc:= lambda(i:below(2)):false, Fixed1:= lambda(i:below(6)):false, hw:= lambda(i:below(2)):false, imm16:= lambda(i:below(16)):false, Rd:= lambda(i:below(5)):false, length:= 32 #)") QED

%|- v_TCC* : PROOF
%|- opcode_TCC3: PROOF (eval-formula) QED 
%|- opcode_TCC4: PROOF (opcode_TCC2) QED 

%|-sts2_TCC1 : PROOF 
%|-sts3_TCC* : PROOF (grind) QED

%ASL constants declarations

d : int =  UInt(5 , v`Rd )

datasize : int  = 64

imm : bvec[16] = v`imm16

opcode : MoveWideOp = cond

%case opc of 

v`opc = bv[2](0b00) ->  MoveWideOp_N,

v`opc = bv[2](0b01) ->  MoveWideOp_Z,

v`opc = bv[2](0b11) ->  MoveWideOp_K,

else -> throw( "UnallocatedEncoding()" )

endcond


%p1 : s =  if v`sf = bv( 0b0 ) and v`hw(1) = bv[1]( 0b1 )(0) then throw[s]( "UnallocatedEncoding()" ) else p endif

pos : int = UInt(6, v`hw o bv[4]( 0b0000 )) %p1 : s =  if v`sf = bv( 0b0 ) and v`hw(1) = bv[1]( 0b1 )(0) then throw[s]( "UnallocatedEncoding()" ) else p endif (32 bit) but we use 64.

%Operational

ASL(po : s) : type+ = [# result : bvec[64] #]

sts1 : ASL(p)

sts2 : ASL(p) = if opcode = MoveWideOp_K then sts1 with [ result := p`X(d) ]
		 else sts1 with [ result := Zeros(64) ]
		 endif

update_field(pp1: s, d1: below(32), b:bvec[64], Pos: upto(48)): bvec[64]  =  lambda(i: below[64]): if Pos <= i <= Pos + 15 then imm( i - Pos ) else b(i) endif % move to basic functions


sts3 : ASL(p) = sts2 with [ result := update_field(p,d,sts2`result, pos) ]

sts4 : ASL(p) = if opcode = MoveWideOp_N then sts3 with [result := NOT (sts3`result) ]

		else sts3 endif

post : s = p  with  [ `X(d) := sts4`result ] %,`PC:= (# i:= addr + 4 , b:= bv[64](addr + 4) #)]
                                                                %we add addr : below(exp2(64)) or we can remove b field see branching and store then come back here
	 

END movn 
