;;@Amer Tahat, Virginia Tech University,
;;@ May 2019

;; ldr_imm_gen  

(defstep ldr_imm_gen_1 () 
 (then (flatten) (expand "post") (expand "p")
  (spread (match 1 "%a{update}(%b)" * step (claim "ldr_1.t = %b "))
   ((then (replaces -1) (expand "sts5") (replaces -1) (expand "p")
     (expand "Mem_sts") (propax))
    (then (expand "t") (expand "v") (eval-formula 1))))) "" "")



;; str-imm-gen: 


;;helpers

(defstep exp1-str-imm-gen ()
	      (then (skeep) (expand "p") (expand "post") (expand "n")) "" "")


(defstep eval-exp-UInt (fnum)
	     (then (expand "u" fnum) (expand "sts4" fnum) (expand "sts3" fnum) (expand "n" fnum)
                   (expand "v" fnum) (expand "offset" fnum) (expand "scale" fnum) (expand "v" fnum)
                   (expand "p" fnum) (expand "init" fnum) (expand "X_sts" fnum) (expand "init" fnum))  "" "")

(defstep eval-u1 ()
	     (then (replaces -1) (expand "p1") (replaces -1) (expand "u")
                   (replaces -1) (expand "sts5") (expand "t") (expand "v")
                   (expand "X_sts") (expand "p") (expand "X_sts") (expand "init")
                   (assert) (eval-formula)) "" "" )


;; str_imm_gen

(defstep str-imm-gen ()
              (then (exp1-str-imm-gen) (eval-u1)) "" "")



;; ldr_imm_gen

(defstep ldr_imm_gen ()
         (then (ldr_imm_gen_1)
	       (spread (match 1 " %a{number}" * step (claim "ldr_1.u = %a"))
		       ((then (replaces -1) (assert)) 
			(then (eval-exp-UInt 1) 
			      (eval-u1))))) "" "")

;; b_cond 

(defstep b_cond ()
	(then (expand "post") 
	      (flatten) (lift-if) 
	      (expand "condition")
	      (expand "v") (eval-formula 1) 
	      (expand "offset") (expand "v")
	      (eval-formula 1)(eval-formula 2)) "" "")


;; b_uncond (addr and next are nat or bitvectors): 

(lisp (defstep b_uncond ()
 (then (expand "post") (expand " p0") (expand " branch_type")
  (expand "v")
  (spread
   (match 1 "bt(%a ,31)" * step (claim "bt(%a,31) /= bv[1](0b1)"))
   ((then (assert) (expand "offset") (expand "v")
     (match 1 "SignExtend(28, 64, %a)" * step
            (eval-expr "SignExtend(28, 64, %a)"))
     (replaces -1) (expand "p") (expand "init") (expand "X_sts")
     (expand "init_PSTATE") (expand "init") (expand "BranchTo")
     (match 1 "AArch64_BranchAddr(%a)" * step (eval-expr "%a"))
     (replaces -1) (expand " AArch64_BranchAddr") (propax))
    (eval-formula 1) (eval-formula 1) (eval-formula 1)))) "" "" ))


;; b_uncond_bi (addr and next are bitvectors)

 (defstep  b_uncond_bi () 
	(then (expand "post") (expand " p0") (expand " branch_type")
	      (expand "v")
	      (spread
	       (match 1 "bt(%a ,31)" * step (claim "bt(%a,31) /= bv[1](0b1)"))
	       ((then (assert) (eval-formula) (expand "offset") (expand "v")
		      (eval-formula))
		(eval-formula) (eval-formula) (eval-formula)))) "" "")

;; BL, b_uncond 

(defstep bl_uncond () 
	(then (expand "post") (expand " p0") 
	      (expand " branch_type")
	      (expand "v") (spread (match 1 "bt(%a ,31)" * step (claim "bt(%a,31) = bv[1](0b1)"))
				   ((then (assert) (expand "offset") (expand "v") 
					  (eval-formula))
				    (eval-formula) (eval-formula) (eval-formula)))) "" "" )
;; b_uncond_tcc

(defstep b_uncond_TCC3()
	(spread (split) ((eval-formula) (eval-formula)) ) "" "")



;;** ret

 (defstep ret () 
	(then (expand "post") 
	      (expand "sts1") 
	      (expand "v") 
	      (eval-formula)) "" "")


;; ** br 

(defstep br ()
	(then (ret) 
	      (eval-formula) 
	      (b_uncond)) "" "")

;; ** cbz

  (defstep cbz ()
         (then (flatten) (expand "post") (expand "offset") (expand "iszero")
	       (expand "v") (expand "sts1") (expand "t") (expand "v") (expand "p")
	       (expand "X_sts") (expand "init") (expand "init_PSTATE") (eval-formula)) "" "") 


;;addsub_imm

(lisp (defstep addsub-imm ()
  (then (expand "post") (expand "p3") (expand "sts4") (expand "sts3")
     (expand "sts2") (expand "p2") (expand "imm") (expand "setflags")
     (expand "sub_op") (expand "n") (expand "d") (expand "v")
     (eval-formula)) "" ""))

;;


;** addsub-shift class: 

(defstep addsub-shift-1 () 
	(then (assert)
	      (spread (split)
		      ((then (assert) (expand "post") 
			     (expand "p3") (expand "setflags")
			     (expand "p2") (expand "v") (assert) (lift-if) (expand "d")
			     (expand "v") (expand "p1") (expand "p") (expand "X_sts")
			     (expand "v") (expand "sts4") (expand "sts3") (expand "sts2")
			     (expand "sts1") (expand "p2") (expand "v") (expand "p1")
			     (expand "v") (expand "n") (expand "m") (expand "shift_type")
			     (expand "v") (expand "shift_amount") (expand "v") (expand "p")
			     (expand "X_sts") (expand "init") (eval-formula))
		       (postpone)))) "" "")

;;  

(defstep addsub-shift ()
	(then (addsub-shift-1) (addsub-shift-1)) "" "" )

;**

(defstep subs_addsub_shift_ALS_TCC2  () 
               (then (inst 1 "(# carry_in:= false,
                                 nzcv:= bv(0b0000), operand1:= po!1`X(n),
                                 operand2:= lambda(i:below(64)): false,
                                 result:= lambda(i:below(64)):false #)")
		     (eval-formula)) "" "" )


;** movk tcc: 

(defstep opcode_TCC2 ()
	           (then (split)(flatten)(replaces)(eval-formula -1)) "" "")


;** helper movewide class % Amer: changed p1 into p

(defstep movk ()
 (then (skoletin) (skoletin) (expand "post") (expand "p") (expand "v")
  (spread (case "bv[1](0b1) /= bv[1](0b0)")
   ((then (ground) (hide 1) (expand "p") (expand "X_sts") (expand "d")
     (expand "sts4") (expand "p2") (expand "opcode") (expand "X_post")
     (expand "v")
     (spread (case "bv[2](0b11) /= bv[2](0b00)")
      ((then (ground)
        (spread (case "bv[2](0b11) /= bv[2](0b10)")
         ((then (ground) (hide 1 2) (expand "sts3") (expand "pos")
           (expand "sts2") (expand "opcode") (expand "v") (expand "p1")
           (expand "v") (expand "p1") (expand "d") (expand "X_sts")
           (expand "init") (eval-formula))
         (eval-formula) (eval-formula))))
       (eval-formula) (eval-formula) (eval-formula))))
    (eval-formula) (eval-formula) (eval-formula))))
"" "" )

;** movewide-class

(defstep movewide ()
 (then (assert)(movk)(expand "p") (expand "X_sts")(expand "init")
  (expand "v")(expand "init_PSTATE")(expand "update_field")(expand "imm")(expand "v")(eval-formula)) "" "")


;** adds-addsub-imm


(defstep adds-addsub-imm ()
 (spread (test-subs-addsub-shift-1)
  ((then (expand "n")
    (spread (ground)
     ((then (replaces -2)
       (spread (case " (bv[1](0b0) /= bv[1](0b1))")
        ((then (ground) (expand "imm") (expand "v") (eval-formula 2))
         (eval-formula) (eval-formula) (eval-formula))))
      (then (eval-formula) (replaces -1)
       (spread (case "bv[1](0b0) /= bv[1](0b1)")
        ((then (ground) (expand "imm") (expand "v")
          (spread (case "bv[2](0b10) /= bv[2](0b00) ")
           ((then (ground) (eval-formula 3)) (eval-formula)
            (eval-formula) (eval-formula))))
         (eval-formula) (eval-formula) (eval-formula)))))))
   (then (expand "n") (replaces -2)
    (spread (case "bv[1](0b0) /= bv[1](0b1)")
     ((then (ground) (expand "imm") (expand "v")
       (spread (case "bv[2](0b10) /= bv[2](0b00)")
        ((then (ground) (eval-formula 3)) (eval-formula) (eval-formula)
         (eval-formula))))
      (eval-formula) (eval-formula) (eval-formula))))))
"" "")

;*** addsub_ext_TCCs

(defstep DecodeRegExtend_TCC8 ()
(then (skeep)(split)(flatten)(replaces)(eval-formula -1))
"" "")

;** br.pvs TCCs

 (defstep UInt_bound (n m)
            (let ( (UInt_bound (format nil "bv2nat_rec_bound[~a]" n)))
              (let  (  (clm (format nil "exp2(~a) = ~a" n m)))
	     (then (lemma UInt_bound)
		   (inst?)
		    (spread (claim clm)
		    ( (replaces -1)
		      (eval-formula 1)))))) "" "")


;** sts4_TCC1

;*(("1"
;*   (expand "sts3")
;*   (expand "sts2")
;*   (expand "sts1")
;*   (expand "v")
;*   (case "bv[1](0b0) /= bv[1](0b1)")
;*   (("1"
;*     (case "bv[1](0b0) /= bv[1](0b1)")
;*     (("1" (assert) (hide 1 2) (UInt_bound (5) (32))) ("2" (propax))))
;*    ("2" (eval-formula 1)) ("3" (eval-formula 1))
;*    ("4" (eval-formula 1))))
;*  ("2"
;*   (expand "sts3")
;*   (expand "sts2")
;*   (expand "sts1")
;*   (expand "v")
;*   (case "bv[1](0b0) /= bv[1](0b1)")
;*   (("1" (assert)) ("2" (eval-formula 1)) ("3" (eval-formula 1))
;*    ("4" (eval-formula 1))))))

;*** BR_TCCS

(defstep branch_typ_TCC3 ()
(then (skeep)(split)(flatten)(replaces)(eval-formula -1))
"" "")

;***

(defstep 2_d_6 () 
 (then (expand "d") (hide-all-but 6) (case "v`Rd = bv[5](0b01000) ")
 (replaces -1)) "" "" )


;*** logic-shift class doesnt use the full name conc_test_1.d,v,n as above. 
;*** Yet no NZCV. Works for m /= n and m = n.  

( defstep Log-Shift ()
 (then (expand "p") (expand "post") (expand "p1") (expand "sts6")
  (expand "sts5") (expand "sts4") (expand "sts3") (expand "sts2")
  (expand "sts1") (expand "p") (expand "X_sts") (expand "init")
  (expand "d") (expand "v") (assert) (expand "n") (expand "v")
  (expand "invert") (expand "m") (expand "v") (expand "shift_type")
  (expand "v") (expand "shift_amount") (expand "v") (eval-formula 1)) "" "")


;; log-shift-expand

(defstep log-shift-expand ()
 (then (expand "p") (expand "post") (expand "p1") (expand "sts6")
  (expand "sts5") (expand "sts4") (expand "sts3") (expand "sts2")
  (expand "sts1") (expand "p") (expand "X_sts") (expand "init")
  (expand "d") (expand "v") (assert) (expand "n") (expand "v")
  (expand "invert") (expand "m") (expand "v") (expand "shift_type")
  (expand "v") (expand "shift_amount")(expand "init_PSTATE") (expand "v")) """")


;; with NZCV :

(defstep log-shift-NZCV ()
	    (then (assert) (flatten) (expand "post") (expand "p1") (replaces -1)
                  (lift-if)
		  (spread (match 1 "%a`setflags" * step (claim "%a`setflags = true"))
			  ((then (assert) (eval-formula))
			   (then (log-shift-expand) 
				 (hide 2)(eval-formula))))) "" "" )
;; for and

(defstep and-log-shift-NZCV ()
	    (then (assert) (flatten) (expand "post") (expand "p1") (replaces -1)
                  (lift-if)
		  (spread (match 1 "%a`setflags" * step (claim "%a`setflags = false"))
			  ((then (assert) (eval-formula))
			   (then (log-shift-expand) 
				 (hide 2)(eval-formula))))) "" "" )


;; helper

( defstep log-shift-result ()
               (then (log-shift-expand) 
		     (expand "rslt") 
		     (log-shift-expand)
		     (eval-formula)) "" "")


;; log-shift-with and without NZCV:
(defstep log-shift ()
 (then (assert)
 (spread (split) ((Log-Shift) (log-shift-NZCV) (log-shift-result)))) "" "")

;; special case for and-log-shift

(defstep log-shift-3 ()
              (then (assert)
		    (spread (split)
			    ((log-shift)
			     (then (and-log-shift-NZCV)
				   (hide 1) 
				   (log-shift-expand))))) "" "")

;; log-shift-2 

(defstep log-shift-2 ()
 (then (assert)
 (spread (split) ((log-shift) (log-shift-result) (log-shift-result)))) "" "")


;; log-shift tcc4

 (defstep log-shift-disj-TCC4 () 
	 (then (split)
	       (flatten) (replaces -1) (eval-formula -1)
	       (flatten) (replaces -1) (eval-formula -1)
	       (flatten) (replaces -1) (eval-formula -1)) "" "")


;;**PC-related address

(defstep pc-related-addr ()
 (then (expand " p ") (expand "post") (expand "sts2") (expand "page")
 (expand "v") (expand " sts1 ")
  (spread
   (claim
    ("bt(bv[32](0b11100010111010110111001100001100),31) /= bv[1](0b1) "))
   ((then (assert) (expand "imm") (expand "v") (expand "page")
     (expand "v") (expand "d") (expand "v") (expand "p")
     (expand "X_sts") (expand "init") (eval-formula 1))
    (eval-formula 1) (eval-formula 1) (eval-formula 1)))) "" "")

;---

