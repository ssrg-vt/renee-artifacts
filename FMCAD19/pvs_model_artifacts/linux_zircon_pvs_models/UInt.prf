(UInt
 (UInt_Ub_TCC1 0
  (UInt_Ub_TCC1-1 nil 3756832135
   ("" (subtype-tcc) (("" (postpone) nil nil)) nil) nil nil
   (UInt_Ub subtype "UInt.x" "bvec[n]")))
 (UInt_Ub 0
  (UInt_Ub-1 nil 3756001624
   ("" (expand "UInt")
    (("" (skosimp)
      (("" (lemma "bv2nat_rec_bound[n!1]")
        (("" (inst?)
          (("" (inst -1 "x!1")
            (("" (expand "bv2nat" 1) (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((UInt const-decl "int" UInt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bv2nat_rec_bound formula-decl nil bv_nat nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak)))

