LSL : THEORY
  BEGIN
%// LSL()
%// =====
IMPORTING LSL_C

IMPORTING Zeros, field

LSL(N : subrange[1,64], x : bvec[N], shift : subrange[0 , 64] ) : bvec[N] = % shift, in ASL is restricted explicitly, we can make it 64 here as need be.
    %assert shift >= 0;
    if shift = 0 then x
    else
       LSL_C(N , x, shift)`1
    endif  %return result;
    
test: lemma LSL(4,bv[4](0b0001),1) = bv(0b0000)

END LSL
  
%Library pseudocode for shared/functions/common/LSL_C can be evaluated. 
LSL_C : THEORY
BEGIN 
%// LSL_C()
%// =======
IMPORTING Zeros, field
 LSL_C(N : subrange[1,64], x : bvec[N] , shift : subrange[1, 64]) : [bvec[N], bool] =  
    %assert shift > 0;
    let extended_x = x o Zeros(shift) in 
    let result     = field(N + shift, extended_x, 0, N - 1) in 
    let carry_out  = extended_x(N) in 
           (result, carry_out)
END LSL_C

%Library pseudocode for shared/functions/common/LSR

%// LSR()
%// =====
LSR : THEORY
BEGIN

IMPORTING LSR_C

 LSR( N : subrange[1 , 64] , x : bvec[N], shift : subrange[0, 64] ) : bvec[N] =
    %assert shift >= 0;
     if shift = 0 then x 
     else
        LSR_C(N, x, shift)`1
    %return result;
    ENDIF

%Library pseudocode for shared/functions/common/LSR_C

test2 : lemma LSR(2,bv[2](0b01),1) = bv(0b10)

END LSR

LSR_C : THEORY
BEGIN

%// LSR_C()
%// =======
IMPORTING ZeroExtend, field

LSR_C( N : subrange[1, 64], x : bvec[N],  shift : subrange[1, 64]) : [bvec[N], bool] = 
 %   assert shift > 0;
    let  extended_x = ZeroExtend(shift + N, N, x) in 
    let  result     = field( shift + N, extended_x, shift , shift + N - 1) in
    let  carry_out  = extended_x(shift - 1) in
             (result, carry_out)

END LSR_C

  


