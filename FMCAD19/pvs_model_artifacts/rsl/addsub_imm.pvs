addsub_imm[(IMPORTING arm_state) p: s]: THEORY

  BEGIN

        Diag: bvec[32]
	addr: nat
	IMPORTING bts[32], bt[32]

	diag: Type+ = [# sf: bvec[1], op: bvec[1], S: bvec[1], Fixed1: bvec[5], shift: bvec[2], imm12: bvec[12], Rn: bvec[5], Rd: bvec[5] ,length: {n: nat|n = 32} #]
	D: diag
	v: diag = D with
	[ sf:= bt(Diag, 31 ) , op:= bt(Diag, 30), S:= bt(Diag, 29), Fixed1:= bts(Diag, 24, 28),shift:= bts(Diag, 22, 23 ), imm12:= bts(Diag, 10, 21 ),Rn:= bts(Diag, 5, 9 ), Rd:= bts(Diag, 0, 4 ), length:= 32 ]

%|- diag_TCC* : PROOF (inst 1 "(# sf:= lambda(i:below(1)):false, op:= lambda(i:below(1)):false, S:= lambda(i:below(1)):false, Fixed1:= lambda(i:below(5)):false, shift:= lambda(i:below(2)):false, imm12:= lambda(i:below(12)):false, Rn:= lambda(i:below(5)):false, Rd:= lambda(i:below(5)):false, length:= 32 #)") QED



%ASL constants declarations


	IMPORTING UInt,ZeroExtend, Zeros

	d : int = UInt( 5 , v`Rd )
	n : int = UInt( 5 , v`Rn )
	
	datasize : int  = 64
	sub_op : bool = ( v`op = bv ( 0b1 ) )
	setflags : bool = ( v`S = bv ( 0b1 ) )
	
	imm : bvec[datasize] = Cond v`shift = bv[2](0b00) -> ZeroExtend(64,12,v`imm12),
	                            v`shift = bv[2](0b10) -> ZeroExtend(64,24,v`imm12 o Zeros(12)), 
	                            Else -> throw("ReservedValue()_AArch64.UndefinedFault()")
			        EndCond


% Operational:
   
    	ASL(po:s): type+ = [# result  : bvec[64], 
		       operand1: bvec[64],
		operand2: bvec[64], %= imm
		nzcv    : bvec[4],
		carry_in: bit	   	   #]

		p2: s = p


               sts1: ASL(p2) 


		sts2: ASL(p2) = sts1 with [ operand1:= if n = 31 then p2`SP else p2`X(n) endif, operand2:= imm ]


		sts3: ASL(p2) = if sub_op then sts2 with
		[operand2:= NOT[64](sts2`operand2),
		carry_in:= true]
		else sts2 with
		[carry_in:= false] endif

		IMPORTING AddWithCarry1 %[sts3`operand1, sts3`operand2, sts3`carry_in]

		sts4: ASL(p2) = sts3 with [ result:= AddWithCarry1( sts3`operand1, sts3`operand2, sts3`carry_in )`return,
		nzcv  := AddWithCarry1( sts3`operand1, sts3`operand2, sts3`carry_in )`nzcv ]

		p3: s = if setflags then p2 with
		[`PSTATE`NZCV:= sts4`nzcv ]
		else p2 endif
		post: s = if (d = 31 & NOT setflags)
		                  then p3 with [`SP := sts4`result]
			  else p3 with [ `X(d):= sts4`result ] endif

  END addsub_imm
