cbz[ (IMPORTING arm_state) p : s ] : THEORY

	BEGIN

	Diag: bvec[32]
	addr: nat
	
	next: bvec[64]
	fail: bvec[64]
	
         IMPORTING SignExtend, IsZero, bts[32], bt[32], bitvectors@bv_adder, ConditionHolds, Basic_ASL_Types, BranchTo 
 

	diag: Type+ = [# sf: bvec[1], Fixed1: bvec[6], op: bvec[1], imm19: bvec[19], Rt: bvec[5] ,length: {n: nat|n = 32} #]
	
	D: diag
	v: diag = D with [ sf:= bt(Diag, 31 ) ,Fixed1:= bts(Diag, 25, 30 ) ,op:= bt(Diag, 24 ) ,imm19:= bts(Diag, 5, 23 ) ,Rt:= bts(Diag, 0, 4 ) , length:= 32 ]

%|- diag_TCC* : PROOF (inst 1 "(# sf:= lambda(i:below(1)):false, Fixed1:= lambda(i:below(6)):false, op:= lambda(i:below(1)):false, imm19:= lambda(i:below(19)):false, Rt:= lambda(i:below(5)):false, length:= 32 #)") QED

	%ASL constants declarations


 t : nat = UInt(5, v`Rt)

 datasize : nat = 64 %in our case 

 iszero : bool =  (v`op = bv[1](0b0))
 
 offset : bvec[64] = SignExtend(21, 64, bv[2](0b00) o v`imm19 ) % check order



ASL(P0 : s) : Type+ = [# operand1: bvec[64] #]

sts0 : ASL(p)

sts1 : ASL(p) = sts0 with [ operand1 := p`X(t) ]
 
post : s  =   if IsZero(64, sts1`operand1) = iszero then

                  BranchTo(p)( bv_adder[64]( p`PC`b, offset, false ), next , BranchType_JMP )`po
		  
              else p with [ `PC`b:= fail , `PC`i:= SInt(64)(fail) ] 
	      endif
 
END cbz 
