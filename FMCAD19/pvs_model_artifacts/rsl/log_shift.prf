(log_shift
 (diag_TCC1 0
  (diag_TCC1-1 nil 3766455378
   (""
    (inst 1
     "(# sf:= lambda(i:below(1)):false, opc:= lambda(i:below(2)):false, Fixed1:= lambda(i:below(5)):false, shift:= lambda(i:below(2)):false, N:= lambda(i:below(1)):false, Rm:= lambda(i:below(5)):false, imm6:= lambda(i:below(6)):false, Rn:= lambda(i:below(5)):false, Rd:= lambda(i:below(5)):false, length:= 32 #)")
    nil)
   nil nil
   (diag existence ""
    "[# Fixed1: bv[5].bvec, imm6: bv[6].bvec, length: {n: naturalnumbers.nat | n = 32}, N: bv[1].bvec, opc: bv[2].bvec, Rd: bv[5].bvec, Rm: bv[5].bvec, Rn: bv[5].bvec, sf: bv[1].bvec, shift: bv[2].bvec #]")))
 (ASL_TCC1 0
  (ASL_TCC1-1 nil 3766455378 ("" (subtype-tcc) nil nil) nil nil
   (ASL subtype "log_shift.datasize" "nat")))
 (sts1_TCC1 0
  (sts1_TCC1-1 nil 3766455378 ("" (subtype-tcc) nil nil) nil nil
   (sts1 subtype "0b0" "naturalnumbers.below(exp2.exp2(2))")))
 (sts1_TCC2 0
  (sts1_TCC2-1 nil 3766455378 ("" (subtype-tcc) nil nil) nil nil
   (sts1 subtype "0b10" "naturalnumbers.below(exp2.exp2(2))")))
 (sts1_TCC3 0
  (sts1_TCC3-1 nil 3766455378 ("" (subtype-tcc) nil nil) nil nil
   (sts1 subtype "0b1" "naturalnumbers.below(exp2.exp2(2))")))
 (sts1_TCC4 0
  (sts1_TCC4-1 nil 3766455378 ("" (log-shift-disj-TCC4) nil) nil nil
   (sts1 disjointness
    "COND log_shift.v`opc = bv[2](0b00) -> log_shift.sts0 WITH [op := Basic_ASL_Types.LogicalOp_AND, setflags := booleans.FALSE], log_shift.v`opc = bv[2](0b10) -> log_shift.sts0 WITH [op := Basic_ASL_Types.LogicalOp_ORR, setflags := booleans.FALSE], log_shift.v`opc = bv[2](0b01) -> log_shift.sts0 WITH [op := Basic_ASL_Types.LogicalOp_EOR, setflags := booleans.FALSE], ELSE -> log_shift.sts0 WITH [op := Basic_ASL_Types.LogicalOp_AND, setflags := booleans.TRUE] ENDCOND"
    "nil")))
 (sts2_TCC1 0
  (sts2_TCC1-1 nil 3766455378 ("" (subtype-tcc) nil nil) nil nil
   (sts2 subtype "0b0" "naturalnumbers.below(exp2.exp2(1))")))
 (invert_TCC1 0
  (invert_TCC1-1 nil 3766455378 ("" (subtype-tcc) nil nil) nil nil
   (invert subtype "0b1" "naturalnumbers.below(exp2.exp2(1))")))
 (sts3_TCC1 0
  (sts3_TCC1-1 nil 3766455378 ("" (grind) nil)
   ((UInt const-decl "int" UInt nil)
    (bts const-decl "bvec[n2 - n1 + 1]" bts nil))
   nil (sts3 subtype "log_shift.n" "naturalnumbers.below(32)")))
 (sts3_TCC2 0
  (sts3_TCC2-1 nil 3766455378 ("" (subtype-tcc) nil nil)
   ((UInt const-decl "int" UInt nil)) nil
   (sts3 subtype "log_shift.p`X(log_shift.n)" "bvec[datasize]")))
 (sts4_TCC1 0
  (sts4_TCC1-1 nil 3766455378 ("" (grind) nil)
   ((UInt const-decl "int" UInt nil)
    (bts const-decl "bvec[n2 - n1 + 1]" bts nil))
   nil (sts4 subtype "log_shift.m" "naturalnumbers.below(32)")))
 (sts4_TCC2 0
  (sts4_TCC2-1 nil 3766455378 ("" (grind) nil)
   ((UInt const-decl "int" UInt nil)
    (bts const-decl "bvec[n2 - n1 + 1]" bts nil))
   nil (sts4 subtype "log_shift.shift_amount" "subrange[0, 63]")))
 (sts4_TCC3 0
  (sts4_TCC3-1 nil 3766455378 ("" (subtype-tcc) nil nil)
   ((UInt const-decl "int" UInt nil)) nil
   (sts4 subtype
    "ShiftReg.ShiftReg(64, log_shift.p`X(log_shift.m), log_shift.shift_type, log_shift.shift_amount)"
    "bvec[datasize]")))
 (sts6_TCC1 0
  (sts6_TCC1-1 nil 3766455378 ("" (subtype-tcc) nil nil)
   ((UInt const-decl "int" UInt nil)
    (bts const-decl "bvec[n2 - n1 + 1]" bts nil))
   nil
   (sts6 subtype
    "(bv_bitwise[log_shift.datasize].AND(log_shift.sts5`operand1, log_shift.sts5`operand2))"
    "bvec[64]")))
 (sts6_TCC2 0
  (sts6_TCC2-1 nil 3766455378 ("" (subtype-tcc) nil nil)
   ((UInt const-decl "int" UInt nil)
    (bts const-decl "bvec[n2 - n1 + 1]" bts nil))
   nil
   (sts6 subtype
    "(bv_bitwise[log_shift.datasize].OR(log_shift.sts5`operand1, log_shift.sts5`operand2))"
    "bvec[64]")))
 (sts6_TCC3 0
  (sts6_TCC3-1 nil 3766455378 ("" (subtype-tcc) nil nil)
   ((UInt const-decl "int" UInt nil)
    (bts const-decl "bvec[n2 - n1 + 1]" bts nil))
   nil
   (sts6 subtype
    "(bv_bitwise[log_shift.datasize].XOR(log_shift.sts5`operand1, log_shift.sts5`operand2))"
    "bvec[64]")))
 (sts6_TCC4 0
  (sts6_TCC4-1 nil 3766455378 ("" (cond-disjoint-tcc) nil nil) nil nil
   (sts6 disjointness
    "COND log_shift.sts4`op = Basic_ASL_Types.LogicalOp_AND -> log_shift.sts5 WITH [result := (bv_bitwise[log_shift.datasize].AND(log_shift.sts5`operand1, log_shift.sts5`operand2))], log_shift.sts4`op = Basic_ASL_Types.LogicalOp_ORR -> log_shift.sts5 WITH [result := (bv_bitwise[log_shift.datasize].OR(log_shift.sts5`operand1, log_shift.sts5`operand2))], log_shift.sts4`op = Basic_ASL_Types.LogicalOp_EOR -> log_shift.sts5 WITH [result := (bv_bitwise[log_shift.datasize].XOR(log_shift.sts5`operand1, log_shift.sts5`operand2))] ENDCOND"
    "nil")))
 (sts6_TCC5 0
  (sts6_TCC5-1 nil 3766455378 ("" (cond-coverage-tcc) nil nil) nil nil
   (sts6 coverage
    "COND log_shift.sts4`op = Basic_ASL_Types.LogicalOp_AND -> log_shift.sts5 WITH [result := (bv_bitwise[log_shift.datasize].AND(log_shift.sts5`operand1, log_shift.sts5`operand2))], log_shift.sts4`op = Basic_ASL_Types.LogicalOp_ORR -> log_shift.sts5 WITH [result := (bv_bitwise[log_shift.datasize].OR(log_shift.sts5`operand1, log_shift.sts5`operand2))], log_shift.sts4`op = Basic_ASL_Types.LogicalOp_EOR -> log_shift.sts5 WITH [result := (bv_bitwise[log_shift.datasize].XOR(log_shift.sts5`operand1, log_shift.sts5`operand2))] ENDCOND"
    "nil")))
 (post_TCC1 0
  (post_TCC1-1 nil 3766455378 ("" (grind) nil)
   ((UInt const-decl "int" UInt nil)
    (bts const-decl "bvec[n2 - n1 + 1]" bts nil))
   nil (post subtype "log_shift.d" "naturalnumbers.below(32)"))))

