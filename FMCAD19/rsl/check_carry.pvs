check_carry: THEORY

  BEGIN
  
% if bv1,bv2 are both unsigned.
IMPORTING field , bitvectors@bv_arith_nat

                          both_true  (i  : below(64), base : bvec[64] , imm : bvec[64] ): bool  = ( imm( i) = true  and base( i) = true  ) 
			  both_false (i  : below(64), base : bvec[64] , imm : bvec[64] ): bool  = ( imm( i) = false and base( i) = false ) 
		 imm_false_base_true (i  : below(64), base : bvec[64] , imm : bvec[64] ): bool  = ( imm( i) = false and base( i) = true  ) 
		 imm_true_base_false (i  : below(64), base : bvec[64] , imm : bvec[64] ): bool  = ( imm( i) = true  and base( i) = false ) 
                 only_one_true( i  : below(64), base : bvec[64] , imm : bvec[64] ): bool = imm_true_base_false (i, base, imm) or imm_false_base_true (i , base, imm)   
                    
  check_Carry?( i : below(64), base : bvec[64] , imm : bvec[64] ) : recursive bool =
                         
                    if      i = 0  then     if     both_true (i, base, imm )  then  true 
		    	                    elsif  both_false(i, base, imm )  then  false
                                            else   false
					    endif
		    elsif   both_true (i, base, imm )    then   true 
		    elsif   both_false(i , base, imm )   then   false
                    else     check_Carry?(i-1 , base, imm )
		    endif			    
		 measure i			  
	             
               
% if bv1,bv2 are both unsigned.

  check_carry?(n: nat)( bv1: bvec[n], bv2 : bvec[n] ): bool = Cond bv2nat(bv1) + bv2nat(bv2) < exp2(n) -> False,
                                                       else ->  True
						  EndCond

test: lemma check_carry?(5)( 0b01101,0b01110) = true 



  END check_carry
