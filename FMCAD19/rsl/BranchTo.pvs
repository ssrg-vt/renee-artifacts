BranchTo : THEORY

  BEGIN

IMPORTING  arm_state, Basic_ASL_Types, AArch64_BranchAddr

 BranchTo2( p : s)( target: bvec[64], next: {nxt: nat | nxt < exp2(64) }, branch_type: BranchType ): [# po : s, Hint_Branch: BranchType, UsingAArch32: bool #] =
 
        (# po:= p with [ PC := AArch64_BranchAddr2(target, next)],
           Hint_Branch := branch_type ,
           UsingAArch32:= False #)

% We only consider when Arch64.


 BranchTo( p : s)( target: bvec[64], next: bvec[64], branch_type: BranchType ): [# po : s, Hint_Branch: BranchType, UsingAArch32: bool #] = 
        (# po:= p with [ PC := AArch64_BranchAddr(target, next)],
           Hint_Branch := branch_type ,
           UsingAArch32:= False #)


  END BranchTo

AArch64_BranchAddr: Theory
BEGIN

%// AArch64.BranchAddr()
%//========================

IMPORTING  SInt, UInt, field, ZeroExtend, reverse %, field, ,  Basic_ASL_Types 

AArch64_BranchAddr2( vaddress : bvec[64], next: {nxt: nat | nxt < exp2(64) }): [# b: bvec[64], i: int  #]  = % may make it next: int, or binary directly

                 LET Intg = UInt(64, vaddress ) in %
		 
                   if reverse(64)(vaddress) = bv[64](next) then
       
                   (# b:= vaddress, i:= Intg #)
		   else
		    (# b:= reverse(64)(bv[64](next)), i:= Intg #)
		   endif

        % this conversion to int on the parsing time may well be done in python.

AArch64_BranchAddr( vaddress : bvec[64], next: bvec[64] ): [# b: bvec[64], i: int  #] =
   
                 LET Intg = UInt(64, vaddress ) in %

                   if vaddress = next then
       
                   (# b:= vaddress, i:= Intg #)
		   else
		    (# b:= next, i:= Intg #)
		   endif

 
END AArch64_BranchAddr

reverse : Theory

Begin

reverse(n: nat)( b : bvec[n] ) : bvec[n] = lambda(i: below(n)): b(n - (i + 1))  

end reverse

%IsInHost : Theory
%Begin

%IsInHost(PSTATE_EL: bvec[2]): bool % not implemented yet. 

%END IsInHost


%AddrTop : Theory
%Begin

%AddrTop(vaddress: bvec[64], isInstr: bool, el: bvec[2] ): {t: int| t = 63 or t = 55}% not implemented yet

%End AddrTop


