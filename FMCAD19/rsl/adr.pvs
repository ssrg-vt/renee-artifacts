adr[(IMPORTING arm_state) p : s ] : THEORY

% Form PC-relative address adds an immediate value to the PC value to form a PC-relative address, and writes the result to the destination register

       BEGIN

	Diag: bvec[32]
	addr: nat

        IMPORTING Basic_ASL_Types, Basic_ASL_Function, UInt, SignExtend, Zeros, bitvectors@bv_adder, bts[32], bt[32], check_carry

	diag: Type+ = [# op: bvec[1], immlo: bvec[2], Fixed1: bvec[5], immhi: bvec[19], Rd: bvec[5] ,length: {n: nat|n = 32} #]
	D: diag
	v: diag = D with [ op:= bt(Diag, 31 ) , immlo:= bts(Diag, 29, 30 ) , Fixed1:= bts(Diag, 24, 28 ) , immhi:= bts(Diag, 5, 23 ) , Rd:= bts(Diag, 0, 4 ) , length:= 32 ]

%|- diag_TCC* : PROOF (inst 1 "(# op:= lambda(i:below(1)):false, immlo:= lambda(i:below(2)):false, Fixed1:= lambda(i:below(5)):false, immhi:= lambda(i:below(19)):false, Rd:= lambda(i:below(5)):false, length:= 32 #)") QED


%ASL constants declarations

 d   : int = UInt(5,v`Rd)
 page: bool = (v`op = bv[1](0b1))

 imm : bvec[64] = 
                   if page then SignExtend(33,64, v`immhi o v`immlo o Zeros(12) )% check arg 2+19+12 lo+hi+12
                      else SignExtend(21,64, v`immhi o v`immlo ) % check the order, 2+19 
                   endif


%Operation

 ASL(P0: s) : TYPE =  [#  base : bvec[64] #]%

 sts0 : ASL(p)
 sts1 : ASL(p) =  sts0 with [ base := p`PC`b ]% PC is given in its bin format here. 
 sts2 : ASL(p) =  if page then sts1 with [ base := field(64, sts1`base,12,63) o Zeros(12)]% check value pvsio.  
                     else sts1
	          endif
		  
 post : s =  p with  [ `X(d) := bv_adder[64](sts2`base, imm , check_Carry?( 63, sts2`base , imm )) ]
                  
             % when both are unsigned I guess this check is working fine, but we need to consider the cases for both unsigned and one unsigned while the other signed.  only 7 out of 1500 case reported as missed. check that again.
	 
END adr 
