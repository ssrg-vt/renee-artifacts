AddWithCarry1  % [ parameters ]
		: THEORY

  BEGIN

IMPORTING Basic_ASL_Types, SInt, UInt, IsZero, %bitvectors@ripple_adder,
          bitvectors@bv_adder, ints@div_nat

             AddWithCarry1(x : bvec[64], y : bvec[64], carry_in : bit ): [# return: bvec[64] , nzcv: bvec[4] #] =      
              let x1 = x in let y1 = y in let carry_in1 = carry_in in
  	      let unsigned_sum = UInt(64,x1) + UInt(64,y1) + b2n(carry_in1)      in % n = 64  
	      let signed_sum   = SInt(64)(x1) + SInt(64)(y1) + b2n(carry_in1)    in   % n = 64 
	      let result       = bv_adder[64](x1, y1 , carry_in1)        	 in 
	      let n	       = if result(63) = true then bv[1](0b1) else bv[1](0b0)   endif                in
	      let z	       = if IsZero(64,result) then bv[1](0b1) else bv[1](0b0)  endif                in 
	      let c	       = if UInt(64,result) = unsigned_sum then bv[1](0b0) else bv[1](0b1) endif in
              let v	       = if SInt(64)( result ) = signed_sum then bv[1](0b0) else  bv[1](0b1) endif     in
	                    (# return:= result  ,
			       nzcv  :=  v o c o z o n    #) 

  END AddWithCarry1
