(br
 (v_TCC1 0
  (v_TCC1-1 nil 3756755631 ("" (eval-formula) nil) nil nil
   (v subtype "0b0" "naturalnumbers.below(exp2.exp2(1))")))
 (v_TCC2 0
  (v_TCC2-1 nil 3756755631 ("" (eval-formula) nil) nil nil
   (v subtype "0b1101011" "naturalnumbers.below(exp2.exp2(7))")))
 (v_TCC3 0
  (v_TCC3-1 nil 3756755631 ("" (eval-formula) nil) nil nil
   (v subtype "0b11111" "naturalnumbers.below(exp2.exp2(5))")))
 (v_TCC4 0
  (v_TCC4-1 nil 3756755631 ("" (eval-formula) nil) nil nil
   (v subtype "0b0" "naturalnumbers.below(exp2.exp2(4))")))
 (v_TCC5 0
  (v_TCC6-1 nil 3756755631 ("" (eval-formula) nil) nil nil
   (v subtype "0b0" "naturalnumbers.below(exp2.exp2(2))")))
 (v_TCC6 0
  (v_TCC7-1 nil 3756755631 ("" (eval-formula) nil) nil nil
   (v subtype "0b0" "naturalnumbers.below(exp2.exp2(5))")))
 (branch_typ_TCC1 0
  (branch_typ_TCC1-1 nil 3756824030 ("" (subtype-tcc) nil nil) nil nil
   (branch_typ subtype "0b10" "naturalnumbers.below(exp2.exp2(2))")))
 (branch_typ_TCC2 0
  (branch_typ_TCC2-1 nil 3756824030 ("" (subtype-tcc) nil nil) nil nil
   (branch_typ subtype "0b1" "naturalnumbers.below(exp2.exp2(2))")))
 (branch_typ_TCC3 0
  (branch_typ_TCC3-1 nil 3756824030 ("" (branch_typ_TCC3) nil nil) nil
   nil
   (branch_typ disjointness
    "COND br.v`op = bv[2](0b00) -> Basic_ASL_Types.BranchType_JMP, br.v`op = bv[2](0b10) -> Basic_ASL_Types.BranchType_CALL, br.v`op = bv[2](0b01) -> Basic_ASL_Types.BranchType_RET, ELSE -> stdcatch[Basic_ASL_Types.BranchType, booleans.boolean].throw(\"UnallocatedEncoding()\", stdexc[booleans.boolean].make_exc(\"UnallocatedEncoding()\", stdlang.fail)) ENDCOND"
    "nil")))
 (sts0_TCC1 0
  (sts0_TCC1-1 nil 3756824030
   ("" (existence-tcc)
    ((""
      (inst 1 " (# n:= 0,
      	     	   m:= 0,pac:= false,
	           branch_type:= BranchType_JMP,
	           use_key_a:= false,
	           source_is_sp:= false,
                   target:=   lambda(i: below(64)): false , 
                   modifier:= lambda(i: below(64)): false  #)")
      nil nil))
    nil)
   ((BranchType type-decl nil Basic_ASL_Types nil)
    (ProcState type-eq-decl nil arm_state nil)
    (s type-eq-decl nil arm_state nil)
    (BranchType_JMP? adt-recognizer-decl "[BranchType -> boolean]"
     Basic_ASL_Types nil)
    (BranchType_JMP adt-constructor-decl "(BranchType_JMP?)"
     Basic_ASL_Types nil))
   nil (sts0 existence "" "br.ASL(br.P0)")))
 (sts1_TCC1 0
  (sts1_TCC1-1 nil 3756824030
   ("" (subtype-tcc) (("" (eval-formula) nil nil)) nil)
   ((UInt const-decl "int" UInt nil)) nil
   (sts1 subtype "UInt.UInt(5, br.v`Rm)"
    "{m0: integers.int | m0 = 0}")))
 (sts1_TCC2 0
  (sts1_TCC2-1 nil 3766901320 ("" (subtype-tcc) nil nil) nil nil
   (sts1 subtype "0b1" "naturalnumbers.below(exp2.exp2(1))")))
 (sts1_TCC3 0
  (sts1_TCC2-1 nil 3758059840
   ("" (subtype-tcc)
    (("" (lemma "bv2nat_rec_bound[5]")
      (("" (inst?)
        (("" (eval-formula -1)
          (("" (claim "exp2(5) = 32")
            (("1" (replaces -1) nil nil)
             ("2" (eval-formula 1) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bts const-decl "bvec[n2 - n1 + 1]" bts nil)
    (UInt const-decl "int" UInt nil))
   nil
   (sts1 subtype "UInt.UInt(5, br.v`Rn)" "naturalnumbers.below(32)")))
 (post_TCC1 0
  (post_TCC1-1 nil 3766901320
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((UInt const-decl "int" UInt nil)
    (bts const-decl "bvec[n2 - n1 + 1]" bts nil))
   nil (post subtype "br.sts1`n" "naturalnumbers.below(32)"))))

