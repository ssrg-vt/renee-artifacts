(and_log_imm
 (diag_TCC1 0
  (diag_TCC1-1 nil 3746793957
   (""
    (inst 1
     "(# sf:= lambda(i:below(1)):false, opc:= lambda(i:below(2)):false, Fixed1:= lambda(i:below(6)):false, N:= lambda(i:below(1)):false, immr:= lambda(i:below(6)):false, imms:= lambda(i:below(6)):false, Rn:= lambda(i:below(5)):false, Rd:= lambda(i:below(5)):false, length:= 32 #)")
    nil)
   ((FALSE const-decl "bool" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bvec type-eq-decl nil bv nil))
   nil
   (diag existence ""
    "[# Fixed1: bv[6].bvec, immr: bv[6].bvec, imms: bv[6].bvec, length: {n: naturalnumbers.nat | n = 32}, N: bv[1].bvec, opc: bv[2].bvec, Rd: bv[5].bvec, Rn: bv[5].bvec, sf: bv[1].bvec #]")))
 (ASL_TCC1 0
  (ASL_TCC1-1 nil 3766927840 ("" (subtype-tcc) nil nil)
   ((datasize const-decl "int" and_log_imm nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (ASL subtype "and_log_imm.datasize" "nat")))
 (sts1_TCC1 0
  (sts1_TCC1-1 nil 3766927840 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (sts1 subtype "0b0" "naturalnumbers.below(exp2.exp2(2))")))
 (sts1_TCC2 0
  (sts1_TCC2-1 nil 3766927840 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (sts1 subtype "0b10" "naturalnumbers.below(exp2.exp2(2))")))
 (sts1_TCC3 0
  (sts1_TCC3-1 nil 3766927840 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (sts1 subtype "0b1" "naturalnumbers.below(exp2.exp2(2))")))
 (sts1_TCC4 0
  (sts1_TCC4-1 nil 3766927840 ("" (branch_typ_TCC3) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (sts1 disjointness
    "COND and_log_imm.v`opc = bv[2](0b00) -> and_log_imm.sts0 WITH [op := Basic_ASL_Types.LogicalOp_AND, setflags := booleans.FALSE], and_log_imm.v`opc = bv[2](0b10) -> and_log_imm.sts0 WITH [op := Basic_ASL_Types.LogicalOp_ORR, setflags := booleans.FALSE], and_log_imm.v`opc = bv[2](0b01) -> and_log_imm.sts0 WITH [op := Basic_ASL_Types.LogicalOp_EOR, setflags := booleans.FALSE], ELSE -> and_log_imm.sts0 WITH [op := Basic_ASL_Types.LogicalOp_AND, setflags := booleans.TRUE] ENDCOND"
    "nil")))
 (sts2_TCC1 0
  (sts2_TCC1-1 nil 3766927840 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (sts2 subtype "0b0" "naturalnumbers.below(exp2.exp2(1))")))
 (sts4_TCC1 0
  (sts4_TCC1-1 nil 3766927840
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bts const-decl "bvec[n2 - n1 + 1]" bts nil)
    (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (n const-decl "int" and_log_imm nil)
    (UInt const-decl "int" UInt nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (v const-decl "diag" and_log_imm nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (sts4 subtype "and_log_imm.n" "naturalnumbers.below(32)")))
 (sts4_TCC2 0
  (sts4_TCC2-1 nil 3766927840 ("" (subtype-tcc) nil nil)
   ((v const-decl "diag" and_log_imm nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (UInt const-decl "int" UInt nil)
    (n const-decl "int" and_log_imm nil)
    (datasize const-decl "int" and_log_imm nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (sts4 subtype "and_log_imm.p`X(and_log_imm.n)" "bvec[datasize]")))
 (sts5_TCC1 0
  (sts5_TCC1-1 nil 3766927840 ("" (subtype-tcc) nil nil)
   ((v const-decl "diag" and_log_imm nil)
    (bv const-decl "bvec[N]" bv_arithmetic_defs nil)
    (sts3 const-decl "ASL(p)" and_log_imm nil)
    (datasize const-decl "int" and_log_imm nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (sts5 subtype "and_log_imm.sts3`imm" "bvec[datasize]")))
 (sts6_TCC1 0
  (sts6_TCC1-1 nil 3766927840 ("" (subtype-tcc) nil nil)
   ((datasize const-decl "int" and_log_imm nil)
    (AND const-decl "bvec[N]" bv_bitwise nil)
    (sts5 const-decl "ASL(p)" and_log_imm nil)
    (sts4 const-decl "ASL(p)" and_log_imm nil)
    (n const-decl "int" and_log_imm nil)
    (UInt const-decl "int" UInt nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (sts3 const-decl "ASL(p)" and_log_imm nil)
    (bv const-decl "bvec[N]" bv_arithmetic_defs nil)
    (v const-decl "diag" and_log_imm nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (sts6 subtype
    "(bv_bitwise[and_log_imm.datasize].AND(and_log_imm.sts5`operand1, and_log_imm.sts5`operand2))"
    "bvec[64]")))
 (sts6_TCC2 0
  (sts6_TCC2-1 nil 3766927840 ("" (subtype-tcc) nil nil)
   ((datasize const-decl "int" and_log_imm nil)
    (OR const-decl "bvec[N]" bv_bitwise nil)
    (sts5 const-decl "ASL(p)" and_log_imm nil)
    (sts4 const-decl "ASL(p)" and_log_imm nil)
    (n const-decl "int" and_log_imm nil)
    (UInt const-decl "int" UInt nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (sts3 const-decl "ASL(p)" and_log_imm nil)
    (bv const-decl "bvec[N]" bv_arithmetic_defs nil)
    (v const-decl "diag" and_log_imm nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (sts6 subtype
    "(bv_bitwise[and_log_imm.datasize].OR(and_log_imm.sts5`operand1, and_log_imm.sts5`operand2))"
    "bvec[64]")))
 (sts6_TCC3 0
  (sts6_TCC3-1 nil 3766927840 ("" (subtype-tcc) nil nil)
   ((datasize const-decl "int" and_log_imm nil)
    (XOR const-decl "bvec[N]" bv_bitwise nil)
    (XOR const-decl "bool" xor_def nil)
    (/= const-decl "boolean" notequal nil)
    (sts5 const-decl "ASL(p)" and_log_imm nil)
    (sts4 const-decl "ASL(p)" and_log_imm nil)
    (n const-decl "int" and_log_imm nil)
    (UInt const-decl "int" UInt nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (sts3 const-decl "ASL(p)" and_log_imm nil)
    (bv const-decl "bvec[N]" bv_arithmetic_defs nil)
    (v const-decl "diag" and_log_imm nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (sts6 subtype
    "(bv_bitwise[and_log_imm.datasize].XOR(and_log_imm.sts5`operand1, and_log_imm.sts5`operand2))"
    "bvec[64]")))
 (sts6_TCC4 0
  (sts6_TCC4-1 nil 3766927840 ("" (cond-disjoint-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (sts6 disjointness
    "COND and_log_imm.sts5`op = Basic_ASL_Types.LogicalOp_AND -> and_log_imm.sts5 WITH [result := (bv_bitwise[and_log_imm.datasize].AND(and_log_imm.sts5`operand1, and_log_imm.sts5`operand2))], and_log_imm.sts5`op = Basic_ASL_Types.LogicalOp_ORR -> and_log_imm.sts5 WITH [result := (bv_bitwise[and_log_imm.datasize].OR(and_log_imm.sts5`operand1, and_log_imm.sts5`operand2))], and_log_imm.sts5`op = Basic_ASL_Types.LogicalOp_EOR -> and_log_imm.sts5 WITH [result := (bv_bitwise[and_log_imm.datasize].XOR(and_log_imm.sts5`operand1, and_log_imm.sts5`operand2))] ENDCOND"
    "nil")))
 (sts6_TCC5 0
  (sts6_TCC5-1 nil 3766927840 ("" (cond-coverage-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (sts6 coverage
    "COND and_log_imm.sts5`op = Basic_ASL_Types.LogicalOp_AND -> and_log_imm.sts5 WITH [result := (bv_bitwise[and_log_imm.datasize].AND(and_log_imm.sts5`operand1, and_log_imm.sts5`operand2))], and_log_imm.sts5`op = Basic_ASL_Types.LogicalOp_ORR -> and_log_imm.sts5 WITH [result := (bv_bitwise[and_log_imm.datasize].OR(and_log_imm.sts5`operand1, and_log_imm.sts5`operand2))], and_log_imm.sts5`op = Basic_ASL_Types.LogicalOp_EOR -> and_log_imm.sts5 WITH [result := (bv_bitwise[and_log_imm.datasize].XOR(and_log_imm.sts5`operand1, and_log_imm.sts5`operand2))] ENDCOND"
    "nil")))
 (post_TCC1 0
  (post_TCC1-1 nil 3766927840 ("" (grind) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (d const-decl "int" and_log_imm nil)
    (sts6 const-decl "ASL(p)" and_log_imm nil)
    (sts5 const-decl "ASL(p)" and_log_imm nil)
    (sts4 const-decl "ASL(p)" and_log_imm nil)
    (n const-decl "int" and_log_imm nil)
    (UInt const-decl "int" UInt nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (b2n const-decl "nbit" bit nil) (^ const-decl "bit" bv nil)
    (bts const-decl "bvec[n2 - n1 + 1]" bts nil)
    (exp2 def-decl "posnat" exp2 nil)
    (sts3 const-decl "ASL(p)" and_log_imm nil)
    (sts2 const-decl "ASL(p)" and_log_imm nil)
    (sts1 const-decl "ASL(p)" and_log_imm nil)
    (make_exc const-decl "Exception" stdexc nil)
    (fail const-decl "void" stdlang nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (bv const-decl "bvec[N]" bv_arithmetic_defs nil)
    (nat2bv_rec def-decl "bvec[N]" bv_arithmetic_defs nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (v const-decl "diag" and_log_imm nil)
    (nprat_div_posrat_is_nprat application-judgement "nprat" rationals
     nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (post subtype "and_log_imm.d" "naturalnumbers.below(32)"))))

