ret[(IMPORTING arm_state) p: s]: THEORY

	BEGIN

        IMPORTING Basic_ASL_Types, Basic_ASL_Function, BranchTo, bitvectors@bv_adder, bts[32], bt[32]

      	Diag: bvec[32]  
	addr: nat
	
	diag: Type+ = [# Fixed1 : bvec[7], Z : bvec[1], Fixed2 : bvec[1] , op :  bvec[2], Fixed3:  bvec[5], Fixed4: bvec[4], A : bvec[1] , M : bvec[1], Rn: bvec[5],
		        Rm: bvec[5], length : nat #]
	D: diag
	v: diag = D with  [ Fixed1 := bv[7](0b1101011) , Z:= bv[1](0b0), Fixed2 :=  bv[1](0b0), op :=  bv[2](0b01), Fixed3 := bv[5](0b11111) ,
	                   Fixed4 := bv[4](0b0000)    , A:= bv[1](0b0), M:= bv[1](0b0), Rn:= bts(Diag, 5, 9 ), Rm:= bv[5](0b00000) , length:= 32 ]

%|- diag_TCC* : 

%ASL constants declarations

%|- v_TCC* : PROOF (eval-formula) QED

% decoding :

IMPORTING UInt

branch_typ: BranchType = Cond  v`op = bv[2](0b00) ->  BranchType_JMP, 
                               v`op = bv[2](0b10) ->  BranchType_CALL,
                               v`op = bv[2](0b01) ->  BranchType_RET,  
			       Else    -> throw("UnallocatedEncoding()")
			 ENDCOND


ASL(P0: s) : TYPE = [# n: int, m: nat , pac: bool, branch_type: BranchType , use_key_a: bool, source_is_sp : bool,
                       target: bvec[64], modifier: bvec[64] #]

sts0: ASL(p)  

sts1: ASL(p) =  sts0 with [ n:= UInt(5,v`Rn),
      	     	     	    m:= UInt(5,v`Rm),
			    pac:= v`A = bv[1](0b1),
			    branch_type:= branch_typ,
			    use_key_a:= v`M = bv[1](0b0),
			    source_is_sp:= v`Z = bv[1](0b1) & sts0`m = 31,
			    target:= p`X(UInt(5,v`Rn))]


%sts2: ASL(p) = if NOT sts1`pac & sts1`m /= 0 then throw("UnallocatedEncoding()")
%               elsif  sts1`pac &  Not HavePACExt(ARMv8p3) then throw("UnallocatedEncoding()")
%               else   sts1
%               endif cond->false in this instruction
 
% need to be checked with ARM_ARM_manual

%sts3: ASL(p) = if sts2`pac then
%                 if v`Z = bv[1](0b0) & sts1`m /= 31
%                    then throw("UnallocatedEncoding()")
		    
		 %elsif sts2`branch_type = BranchType_RET
		  %       then
                  %          if sts2`n /= 31 then throw("UnallocatedEncoding()")
	          %          else sts2
	          %          endif
                 %else sts2 with
		 %    [n:= 30,
		 %     source_is_sp := TRUE ]
	         %endif
	     % else sts2 
	     % endif % pac in this instruction is false. 	 

%Operational

%sts4 : ASL(p) =  sts2 with [ target := p`X(sts1`n)]

%sts5 : ASL(p) =  if sts4`pac then
%                            sts4  with [ modifier:= if sts4`source_is_sp
%			                               then p`SP
%						       else p`X(sts4`m)
%						       endif]
%		else sts4 endif

%IMPORTING AuthIA, AuthIB

%sts6: ASL(p) = if sts4`pac then
%                           sts5  with [ target  := if sts5`use_key_a
%			                           then  AuthIA(sts5`target, sts5`modifier)
%                                                   else  AuthIB(sts4`target, sts4`modifier)
%						   endif ]
%               else sts4
%	       endif						   
						   
%p0 : s = if sts6`branch_type = BranchType_CALL
%           then p with [ `X(30) := bv_adder[64](p`PC`b , Zeros(60) o bv[4](0b0010), false) ] % add 4 to pc.
%	 else p
%	 endif
	   
  post : s =  BranchTo(p)(sts1`target, p`X(sts1`n), BranchType_RET )`po % optimized formalization (removes unreachable branches) 
  
% AuthAI, AuthAB are not reachable for this inst and thus not implemented here.   


END ret 
