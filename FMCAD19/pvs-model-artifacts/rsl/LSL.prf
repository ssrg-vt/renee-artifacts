(LSL (LSL_TCC1 0
      (LSL_TCC2-1 nil 3751140634 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (<= const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (subrange type-eq-decl nil subrange_type nil)
        (real_le_is_total_order name-judgement "(total_order?[real])"
         real_props nil))
       nil (LSL subtype "LSL.shift" "subrange[1, 64]")))
     (test_TCC1 0
      (test_TCC1-1 nil 3751152634 ("" (subtype-tcc) nil nil)
       ((real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (nil application-judgement "above(n)" exp2 nil))
       nil (test subtype "0b1" "naturalnumbers.below(exp2.exp2(4))")))
     (test_TCC2 0
      (test_TCC2-1 nil 3751153945 ("" (subtype-tcc) nil nil)
       ((real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (nil application-judgement "above(n)" exp2 nil))
       nil (test subtype "0b0" "naturalnumbers.below(exp2.exp2(4))")))
     (test 0
           (test-1 nil 3751152635 ("" (eval-formula) nil nil)
            ((TRUE const-decl "bool" booleans nil)
             (id const-decl "(bijective?[T, T])" identity nil)
             (bijective? const-decl "bool" functions nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (boolean nonempty-type-decl nil booleans nil))
            shostak)))
(LSL_C (LSL_C_TCC1 0
        (LSL_C_TCC1-1 nil 3751140600 ("" (subtype-tcc) nil nil) nil nil
         (LSL_C subtype "0"
                "naturalnumbers.below((number_fields.+)(LSL_C.N, LSL_C.shift))")))
       (LSL_C_TCC2 0
        (LSL_C_TCC2-1 nil 3751140600
         ("" (subtype-tcc) (("" (postpone) nil nil)) nil)
         ((posint_plus_nnint_is_posint application-judgement "posint"
           integers nil))
         nil
         (LSL_C subtype "(number_fields.-)(LSL_C.N, 1)"
                "subrange[0, N + shift - 1]")))
       (LSL_C_TCC3 0
        (LSL_C_TCC4-1 nil 3751140600
         ("" (subtype-tcc) (("" (grind) (("" (postpone) nil nil)) nil))
          nil)
         nil nil
         (LSL_C subtype "LSL_C.N"
                "naturalnumbers.below((number_fields.+)(LSL_C.N, LSL_C.shift))"))))
(LSR
 (LSR_TCC1 0
  (LSR_TCC1-1 nil 3751560750 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil subrange_type nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (LSR subtype "LSR.shift" "subrange[1, 64]")))
 (test2_TCC1 0
  (test2_TCC1-1 nil 3751155839 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (test2 subtype "0b1" "naturalnumbers.below(exp2.exp2(2))")))
 (test2_TCC2 0
  (test2_TCC2-1 nil 3751155839 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (test2 subtype "0b10" "naturalnumbers.below(exp2.exp2(2))")))
 (test2 0
  (test2-1 nil 3751155841 ("" (eval-formula 1) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak)))
(LSR_C
 (LSR_C_TCC1 0
  (LSR_C_TCC1-1 nil 3751155808 ("" (subtype-tcc) nil nil) nil nil
   (LSR_C subtype "LSR_C.N"
    "{m: naturalnumbers.nat | reals.>=((number_fields.+)(LSR_C.N, LSR_C.shift), m)}")))
 (LSR_C_TCC2 0
  (LSR_C_TCC2-1 nil 3751155808 ("" (subtype-tcc) nil nil)
   ((ZeroExtend const-decl "bvec[N]" ZeroExtend nil)) nil
   (LSR_C subtype "LSR_C.shift"
    "naturalnumbers.below((number_fields.+)(LSR_C.N, LSR_C.shift))")))
 (LSR_C_TCC3 0
  (LSR_C_TCC3-1 nil 3751155808 ("" (subtype-tcc) nil nil)
   ((ZeroExtend const-decl "bvec[N]" ZeroExtend nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (LSR_C subtype
    "(number_fields.-)((number_fields.+)(LSR_C.shift, LSR_C.N), 1)"
    "subrange[shift, N + shift - 1]")))
 (LSR_C_TCC4 0
  (LSR_C_TCC4-1 nil 3751155808 ("" (subtype-tcc) nil nil)
   ((ZeroExtend const-decl "bvec[N]" ZeroExtend nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (LSR_C subtype "(number_fields.-)(LSR_C.shift, 1)"
    "naturalnumbers.below((number_fields.+)(LSR_C.N, LSR_C.shift))"))))

