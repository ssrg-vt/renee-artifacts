(add_addsub_shift
 (diag_TCC1 0
  (diag_TCC1-1 nil 3746793958
   (""
    (inst 1
     "(# sf:= lambda(i:below(1)):false, op:= lambda(i:below(1)):false, S:= lambda(i:below(1)):false, Fixed1:= lambda(i:below(5)):false, shift:= lambda(i:below(2)):false, Fixed2:= lambda(i:below(1)):false, Rm:= lambda(i:below(5)):false, imm6:= lambda(i:below(6)):false, Rn:= lambda(i:below(5)):false, Rd:= lambda(i:below(5)):false, length:= 32 #)")
    nil)
   ((FALSE const-decl "bool" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bvec type-eq-decl nil bv nil))
   nil
   (diag existence ""
    "[# Fixed1: bv[5].bvec, Fixed2: bv[1].bvec, imm6: bv[6].bvec, length: {n: naturalnumbers.nat | n = 32}, op: bv[1].bvec, Rd: bv[5].bvec, Rm: bv[5].bvec, Rn: bv[5].bvec, S: bv[1].bvec, sf: bv[1].bvec, shift: bv[2].bvec #]")))
 (m_TCC1 0
  (m_TCC1-1 nil 3767267197
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bts const-decl "bvec[n2 - n1 + 1]" bts nil)
    (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (UInt const-decl "int" UInt nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (v const-decl "diag" add_addsub_shift nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (m subtype "UInt.UInt(5, add_addsub_shift.v`Rm)"
    "naturalnumbers.below(32)")))
 (sub_op_TCC1 0
  (sub_op_TCC1-1 nil 3767267197 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (sub_op subtype "0b1" "naturalnumbers.below(exp2.exp2(1))")))
 (p1_TCC1 0
  (p1_TCC1-1 nil 3767267197
   ("" (subtype-tcc) (("" (eval-formula) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (p1 subtype "0b11" "naturalnumbers.below(exp2.exp2(2))")))
 (p2_TCC1 0
  (p2_TCC1-1 nil 3767267197 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (p2 subtype "0b0" "naturalnumbers.below(exp2.exp2(1))")))
 (ASL_TCC1 0
  (ASL_TCC1-1 nil 3767267197
   ("" (subtype-tcc) (("" (eval-formula) (("" (grind) nil nil)) nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (b2n const-decl "nbit" bit nil) (^ const-decl "bit" bv nil)
    (bts const-decl "bvec[n2 - n1 + 1]" bts nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nil application-judgement "above(n)" exp2 nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (n const-decl "int" add_addsub_shift nil)
    (UInt const-decl "int" UInt nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (v const-decl "diag" add_addsub_shift nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (ASL subtype "add_addsub_shift.n" "naturalnumbers.below(32)")))
 (ASL_TCC2 0
  (ASL_TCC2-1 nil 3767267197
   ("" (existence-tcc)
    ((""
      (inst 1 " (# carry_in:= false,
                   nzcv:= bv[4](0b0000),
                   operand1:= po!1`X(n),
                   operand2:= lambda(i:below(64)):false,
                   result:= lambda(i:below(64)):false #)")
      (("1" (grind) nil nil) ("2" (eval-formula) nil nil)) nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (b2n const-decl "nbit" bit nil) (^ const-decl "bit" bv nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bts const-decl "bvec[n2 - n1 + 1]" bts nil)
    (Diag const-decl "bvec[32]" add_addsub_shift nil)
    (bv const-decl "bvec[N]" bv_arithmetic_defs nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (FALSE const-decl "bool" booleans nil)
    (n const-decl "int" add_addsub_shift nil)
    (s type-eq-decl nil arm_state nil)
    (ProcState type-eq-decl nil arm_state nil)
    (string type-eq-decl nil strings nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (v const-decl "diag" add_addsub_shift nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (UInt const-decl "int" UInt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (ASL existence ""
    "[# carry_in: bit.bit, nzcv: bv[4].bvec, operand1: {bv: bv[64].bvec | bv = add_addsub_shift.po`X(add_addsub_shift.n)}, operand2: bv[64].bvec, result: bv[64].bvec #]")))
 (sts2_TCC1 0
  (sts2_TCC1-1 nil 3767267197
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bts const-decl "bvec[n2 - n1 + 1]" bts nil)
    (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (shift_amount const-decl "int" add_addsub_shift nil)
    (UInt const-decl "int" UInt nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (v const-decl "diag" add_addsub_shift nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (sts2 subtype "add_addsub_shift.shift_amount" "subrange[0, 63]")))
 (post_TCC1 0
  (post_TCC1-1 nil 3767267197
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bts const-decl "bvec[n2 - n1 + 1]" bts nil)
    (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (d const-decl "int" add_addsub_shift nil)
    (UInt const-decl "int" UInt nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (v const-decl "diag" add_addsub_shift nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (post subtype "add_addsub_shift.d" "naturalnumbers.below(32)"))))

