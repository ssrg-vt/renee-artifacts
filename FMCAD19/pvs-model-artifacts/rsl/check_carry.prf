(check_carry
 (check_Carry?_TCC1 0
  (check_Carry?_TCC3-1 nil 3760724496 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_false const-decl "bool" check_carry nil)
    (both_true const-decl "bool" check_carry nil))
   nil
   (check_Carry? subtype "(number_fields.-)(check_carry.i, 1)"
    "naturalnumbers.below(64)")))
 (check_Carry?_TCC2 0
  (check_Carry?_TCC5-1 nil 3760724496 ("" (termination-tcc) nil nil)
   ((both_false const-decl "bool" check_carry nil)
    (both_true const-decl "bool" check_carry nil))
   nil
   (check_Carry? termination
    "check_carry.check_Carry?((number_fields.-)(check_carry.i, 1), check_carry.base, check_carry.imm)"
    "nil")))
 (test_TCC1 0
  (test_TCC1-1 nil 3765652622
   ("" (subtype-tcc) (("" (eval-formula) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (test subtype "check_carry.x`1"
         "naturalnumbers.below(exp2.exp2(5))")))
 (test_TCC2 0
  (test_TCC2-1 nil 3765658063
   ("" (subtype-tcc) (("" (eval-formula) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (test subtype "check_carry.x`2"
         "naturalnumbers.below(exp2.exp2(5))")))
 (test 0
       (test-1 nil 3765652635 ("" (eval-formula) nil nil)
        ((TRUE const-decl "bool" booleans nil)
         (id const-decl "(bijective?[T, T])" identity nil)
         (bijective? const-decl "bool" functions nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (boolean nonempty-type-decl nil booleans nil))
        shostak)))

