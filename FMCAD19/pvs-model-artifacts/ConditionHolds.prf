(ConditionHolds
 (ConditionHolds_1_TCC1 0
  (ConditionHolds_1_TCC1-1 nil 3759075971
   ("" (skeep) (("" (eval-formula 1) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (ConditionHolds_1 subtype "0b0"
    "naturalnumbers.below(exp2.exp2(3))")))
 (ConditionHolds_1_TCC2 0
  (ConditionHolds_1_TCC2-1 nil 3759075971
   ("" (skeep) (("" (eval-formula 2) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (ConditionHolds_1 subtype "0b100"
    "naturalnumbers.below(exp2.exp2(3))")))
 (ConditionHolds_1_TCC3 0
  (ConditionHolds_1_TCC3-1 nil 3759075971
   ("" (skeep) (("" (eval-formula 3) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (ConditionHolds_1 subtype "0b10"
    "naturalnumbers.below(exp2.exp2(3))")))
 (ConditionHolds_1_TCC4 0
  (ConditionHolds_1_TCC4-1 nil 3759075971
   ("" (skeep) (("" (eval-formula 4) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (ConditionHolds_1 subtype "0b110"
    "naturalnumbers.below(exp2.exp2(3))")))
 (ConditionHolds_1_TCC5 0
  (ConditionHolds_1_TCC5-1 nil 3759075971
   ("" (skeep) (("" (eval-formula 5) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (ConditionHolds_1 subtype "0b1"
    "naturalnumbers.below(exp2.exp2(3))")))
 (ConditionHolds_1_TCC6 0
  (ConditionHolds_1_TCC6-1 nil 3759075971
   ("" (skeep) (("" (eval-formula 6) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (ConditionHolds_1 subtype "0b101"
    "naturalnumbers.below(exp2.exp2(3))")))
 (ConditionHolds_1_TCC7 0
  (ConditionHolds_1_TCC7-1 nil 3759075971
   ("" (skeep) (("" (eval-formula 7) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (ConditionHolds_1 subtype "0b11"
    "naturalnumbers.below(exp2.exp2(3))")))
 (ConditionHolds_1_TCC8 0
  (ConditionHolds_1_TCC8-1 nil 3759075971
   ("" (skeep)
    (("" (split)
      (("1" (claim "bv[3](0b000) /= bv[3](0b100)")
        (("1" (flatten -2) (("1" (grind) nil nil)) nil)
         ("2" (eval-formula) nil nil))
        nil)
       ("2" (claim "bv[3](0b000) /= bv[3](0b010)")
        (("1" (grind) nil nil) ("2" (eval-formula) nil nil)) nil)
       ("3" (claim "bv[3](0b000) /= bv[3](0b110)")
        (("1" (grind) nil nil) ("2" (eval-formula) nil nil)) nil)
       ("4" (claim "bv[3](0b000) /= bv[3](0b001)")
        (("1" (grind) nil nil) ("2" (eval-formula) nil nil)) nil)
       ("5" (claim "bv[3](0b000) /= bv[3](0b101)")
        (("1" (grind) nil nil) ("2" (eval-formula) nil nil)) nil)
       ("6" (claim "bv[3](0b000) /= bv[3](0b011)")
        (("1" (grind) nil nil) ("2" (eval-formula 1) nil nil)) nil)
       ("7" (claim "bv[3](0b100) /= bv[3](0b010)")
        (("1" (grind) nil nil) ("2" (eval-formula 1) nil nil)) nil)
       ("8" (claim "bv[3](0b100) /= bv[3](0b110)")
        (("1" (grind) nil nil) ("2" (eval-formula 1) nil nil)) nil)
       ("9" (claim "bv[3](0b100) /= bv[3](0b001)")
        (("1" (grind) nil nil) ("2" (eval-formula 1) nil nil)) nil)
       ("10" (claim "bv[3](0b100) /= bv[3](0b101)")
        (("1" (grind) nil nil) ("2" (eval-formula 1) nil nil)) nil)
       ("11" (claim "bv[3](0b100) /= bv[3](0b011)")
        (("1" (grind) nil nil) ("2" (eval-formula 1) nil nil)) nil)
       ("12" (claim "bv[3](0b010) /= bv[3](0b110)")
        (("1" (grind) nil nil) ("2" (eval-formula 1) nil nil)) nil)
       ("13" (claim "bv[3](0b010) /= bv[3](0b001)")
        (("1" (grind) nil nil) ("2" (eval-formula 1) nil nil)) nil)
       ("14" (claim "bv[3](0b010) /= bv[3](0b101)")
        (("1" (grind) nil nil) ("2" (eval-formula 1) nil nil)) nil)
       ("15" (claim "bv[3](0b010) /= bv[3](0b011)")
        (("1" (grind) nil nil) ("2" (eval-formula 1) nil nil)) nil)
       ("16" (claim "bv[3](0b110) /= bv[3](0b001)")
        (("1" (grind) nil nil) ("2" (eval-formula 1) nil nil)) nil)
       ("17" (claim "bv[3](0b110) /= bv[3](0b101)")
        (("1" (grind) nil nil) ("2" (eval-formula 1) nil nil)) nil)
       ("18" (claim "bv[3](0b110) /= bv[3](0b011)")
        (("1" (grind) nil nil) ("2" (eval-formula 1) nil nil)) nil)
       ("19" (claim "bv[3](0b001) /= bv[3](0b101)")
        (("1" (grind) nil nil) ("2" (eval-formula 1) nil nil)) nil)
       ("20" (claim "bv[3](0b001) /= bv[3](0b011)")
        (("1" (grind) nil nil) ("2" (eval-formula 1) nil nil)) nil)
       ("21" (claim "bv[3](0b101) /= bv[3](0b011)")
        (("1" (grind) nil nil) ("2" (eval-formula 1) nil nil)) nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (nat2bv_rec def-decl "bvec[N]" bv_arithmetic_defs nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nil application-judgement "below(m)" mod nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nprat_div_posrat_is_nprat application-judgement "nprat" rationals
     nil)
    (bv const-decl "bvec[N]" bv_arithmetic_defs nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil))
   nil
   (ConditionHolds_1 disjointness
    "COND ConditionHolds.cond_1_3 = bv[3](0b000) -> ConditionHolds.st0 WITH [result := (ConditionHolds.p`PSTATE`NZCV(1) = booleans.TRUE)], ConditionHolds.cond_1_3 = bv[3](0b100) -> ConditionHolds.st0 WITH [result := (ConditionHolds.p`PSTATE`NZCV(2) = booleans.TRUE)], ConditionHolds.cond_1_3 = bv[3](0b010) -> ConditionHolds.st0 WITH [result := (ConditionHolds.p`PSTATE`NZCV(0) = booleans.TRUE)], ConditionHolds.cond_1_3 = bv[3](0b110) -> ConditionHolds.st0 WITH [result := (ConditionHolds.p`PSTATE`NZCV(3) = booleans.TRUE)], ConditionHolds.cond_1_3 = bv[3](0b001) -> ConditionHolds.st0 WITH [result := (booleans.&(ConditionHolds.p`PSTATE`NZCV(2) = booleans.TRUE, ConditionHolds.p`PSTATE`NZCV(1) = booleans.FALSE))], ConditionHolds.cond_1_3 = bv[3](0b101) -> ConditionHolds.st0 WITH [result := (ConditionHolds.p`PSTATE`NZCV(0) = ConditionHolds.p`PSTATE`NZCV(3))], ConditionHolds.cond_1_3 = bv[3](0b011) -> ConditionHolds.st0 WITH [result := (booleans.&(ConditionHolds.p`PSTATE`NZCV(0) = ConditionHolds.p`PSTATE`NZCV(3), ConditionHolds.p`PSTATE`NZCV(1) = booleans.FALSE))], ELSE -> ConditionHolds.st0 WITH [result := booleans.TRUE] ENDCOND"
    "nil")))
 (ConditionHolds_TCC1 0
  (ConditionHolds_TCC1-1 nil 3759075971
   ("" (skeep) (("" (eval-formula 1) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (ConditionHolds subtype "0b1111"
    "naturalnumbers.below(exp2.exp2(4))"))))

