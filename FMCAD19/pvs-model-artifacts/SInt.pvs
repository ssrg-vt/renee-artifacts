SInt: THEORY

  BEGIN

   SInt(n: upfrom(1))( x: bvec[n]): int = let l = bv2nat(x) in
   	   	       	  	    	     if x( n - 1 ) = true then l - 2^n
   	   	    	      	    	    	 else l endif  


% tests only:
%Sint_test: lemma SInt(4)( lambda ( i: below(4) ): cond i = 0 -> True,
%	    	  	   	    	       	        i = 1 -> false,
%						        i = 2 -> false,
%						        i = 3 -> true endcond ) = -7  
Sint_test3: lemma SInt(4)( bv( 0b1000 ) ) = 1
Sint_test4: lemma SInt(4)( bv( 0b1101 ) ) = -5
Sint_test5: lemma SInt(4)( bv (0b1111)) = -1 % most significant to the right!

% %|- Sint_test3: PROOF (expand "SInt")(eval-formula) QED % this has to be declared as a strategy as it will be very reusable. 

%Sint_test2: lemma SInt(64)( lambda (i: below(64)): cond i <= 62 -> true,
%  	    	  	    	       		    	 i = 63 -> true endCond ) = -1
% %|- Sint*: PROOF (grind) QED

  END SInt
