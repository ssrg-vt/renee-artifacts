(lem_num_aux
 (natSucc_def_lemma 0
  (natSucc_def_lemma-1 nil 3742921514 ("" (grind) nil nil)
   ((succ const-decl "nat" naturalnumbers nil)
    (eqs const-decl "bool" lib_extra nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (naturalSucc_def_lemma 0
  (naturalSucc_def_lemma-1 nil 3742921519 ("" (grind) nil nil)
   ((succ const-decl "nat" naturalnumbers nil)
    (eqs const-decl "bool" lib_extra nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (rationalPowNat_def_lemma_TCC1 0
  (rationalPowNat_def_lemma_TCC1-1 nil 3742920976
   ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil))
   nil
   (rationalPowNat_def_lemma subtype "lem_num_aux.e"
    "{i: integers.int | booleans.OR(lem_num_aux.r /= 0, reals.>=(i, 0))}")))
 (rationalPowNat_def_lemma 0
  (rationalPowNat_def_lemma-1 nil 3742921524
   ("" (induct "e") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_expt application-judgement "rat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (expt def-decl "real" exponentiation nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (rationalPowInteger def-decl "rat" lem_num nil)
    (eqs const-decl "bool" lib_extra nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (realPowNat_def_lemma_TCC1 0
  (realPowNat_def_lemma_TCC1-1 nil 3742920976
   ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil))
   nil
   (realPowNat_def_lemma subtype "lem_num_aux.e"
    "{i: integers.int | booleans.OR(lem_num_aux.r /= 0, reals.>=(i, 0))}")))
 (realPowNat_def_lemma 0
  (realPowNat_def_lemma-1 nil 3742921536
   ("" (induct "e") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (expt def-decl "real" exponentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (realPowInteger def-decl "real" lem_num nil)
    (eqs const-decl "bool" lib_extra nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (nat_test1 0
  (nat_test1-1 nil 3742920976 ("" (grind) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (nat_test2_TCC1 0
  (nat_test2_TCC1-1 nil 3742920976 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (nat_test2 subtype "num_extra.r" "nat")))
 (nat_test2 0
  (nat_test2-1 nil 3742920976 ("" (grind) nil nil)
   ((even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (nat_test3_TCC1 0
  (nat_test3_TCC1-1 nil 3742920976 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (nat_test3 subtype "num_extra.r" "nat")))
 (nat_test3 0
  (nat_test3-1 nil 3742920976 ("" (grind) nil nil)
   ((odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (nat_test4 0
  (nat_test4-1 nil 3742920976 ("" (grind) nil nil)
   ((mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (nat_test5 0
  (nat_test5-1 nil 3742920976 ("" (grind) nil nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (eqs const-decl "bool" lib_extra nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil))
   shostak))
 (nat_test6 0
  (nat_test6-1 nil 3742920976
   ("" (grind) (("" (eval-formula) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (nat_test7 0
  (nat_test7-1 nil 3742920976
   ("" (grind) (("" (eval-formula) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (nat_test8 0
  (nat_test8-1 nil 3742920976 ("" (grind) nil nil)
   ((nil application-judgement "below(m)" mod nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil))
   shostak))
 (nat_test9 0
  (nat_test9-1 nil 3742920976 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (nat_test10 0
  (nat_test10-1 nil 3742920976 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (nat_test11 0
  (nat_test11-1 nil 3742920976 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (nat_test12 0
  (nat_test12-1 nil 3742920976 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (nat_test13 0
  (nat_test13-1 nil 3742920976 ("" (grind) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (nat_test14 0
  (nat_test14-1 nil 3742920976 ("" (grind) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (nat_test15 0
  (nat_test15-1 nil 3742920976 ("" (grind) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (nat_test16 0
  (nat_test16-1 nil 3742920976 ("" (grind) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (nat_test17 0
  (nat_test17-1 nil 3742920976 ("" (grind) nil nil)
   ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (eqs const-decl "bool" lib_extra nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil))
   shostak))
 (nat_test18 0
  (nat_test18-1 nil 3742920976 ("" (grind) nil nil)
   ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (eqs const-decl "bool" lib_extra nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil))
   shostak))
 (nat_test19 0
  (nat_test19-1 nil 3742920976 ("" (grind) nil nil)
   ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (eqs const-decl "bool" lib_extra nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil))
   shostak))
 (nat_test20 0
  (nat_test20-1 nil 3742920976 ("" (grind) nil nil)
   ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (eqs const-decl "bool" lib_extra nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil))
   shostak))
 (nat_test21 0
  (nat_test21-1 nil 3742920976 ("" (grind) nil nil)
   ((posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   shostak))
 (nat_test22 0
  (nat_test22-1 nil 3742920976 ("" (grind) nil nil)
   ((posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   shostak))
 (nat_test23 0
  (nat_test23-1 nil 3742920976 ("" (grind) nil nil)
   ((succ const-decl "nat" naturalnumbers nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (nat_test24 0
  (nat_test24-1 nil 3742920976 ("" (grind) nil nil)
   ((succ const-decl "nat" naturalnumbers nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (nat_test25 0
  (nat_test25-1 nil 3742920976 ("" (grind) nil nil)
   ((pred const-decl "nat" naturalnumbers nil)
    (eqs const-decl "bool" lib_extra nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (nat_test26 0
  (nat_test26-1 nil 3742920976 ("" (grind) nil nil)
   ((pred const-decl "nat" naturalnumbers nil)
    (eqs const-decl "bool" lib_extra nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (nat_test27_TCC1 0
  (nat_test27_TCC1-1 nil 3742920976 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil (nat_test27 subtype "num_extra.r" "nat")))
 (nat_test27_TCC2 0
  (nat_test27_TCC2-1 nil 3742920976 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil (nat_test27 subtype "num_extra.r" "nat")))
 (nat_test27 0
  (nat_test27-1 nil 3742920976 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (nat_test28a_TCC1 0
  (nat_test28a_TCC1-1 nil 3742920976 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (nat_test28a subtype "num_extra.r" "nat")))
 (nat_test28a_TCC2 0
  (nat_test28a_TCC2-1 nil 3742920976 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (nat_test28a subtype "num_extra.r" "nat")))
 (nat_test28a 0
  (nat_test28a-1 nil 3742920976 ("" (grind) nil nil)
   ((odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (nat_test28b_TCC1 0
  (nat_test28b_TCC1-1 nil 3742920976 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil (nat_test28b subtype "num_extra.r" "nat")))
 (nat_test28b_TCC2 0
  (nat_test28b_TCC2-1 nil 3742920976 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil (nat_test28b subtype "num_extra.r" "nat")))
 (nat_test28b 0
  (nat_test28b-1 nil 3742920976 ("" (grind) nil nil)
   ((even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (natural_test1 0
  (natural_test1-1 nil 3742920976 ("" (grind) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (natural_test2 0
  (natural_test2-1 nil 3742920976 ("" (grind) nil nil)
   ((even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (natural_test3 0
  (natural_test3-1 nil 3742920976 ("" (grind) nil nil)
   ((odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (natural_test4 0
  (natural_test4-1 nil 3742920977 ("" (grind) nil nil)
   ((mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (natural_test5 0
  (natural_test5-1 nil 3742920977 ("" (grind) nil nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (eqs const-decl "bool" lib_extra nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil))
   shostak))
 (natural_test6 0
  (natural_test6-1 nil 3742920977
   ("" (grind) (("" (eval-formula) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (natural_test7 0
  (natural_test7-1 nil 3742920977
   ("" (grind) (("" (eval-formula) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (natural_test8 0
  (natural_test8-1 nil 3742920977 ("" (grind) nil nil)
   ((nil application-judgement "below(m)" mod nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil))
   shostak))
 (natural_test9 0
  (natural_test9-1 nil 3742920977 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (natural_test10 0
  (natural_test10-1 nil 3742920977 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (natural_test11 0
  (natural_test11-1 nil 3742920977 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (natural_test12 0
  (natural_test12-1 nil 3742920977 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (natural_test13 0
  (natural_test13-1 nil 3742920977 ("" (grind) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (natural_test14 0
  (natural_test14-1 nil 3742920977 ("" (grind) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (natural_test15 0
  (natural_test15-1 nil 3742920977 ("" (grind) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (natural_test16 0
  (natural_test16-1 nil 3742920977 ("" (grind) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (natural_test17 0
  (natural_test17-1 nil 3742920977 ("" (grind) nil nil)
   ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (eqs const-decl "bool" lib_extra nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil))
   shostak))
 (natural_test18 0
  (natural_test18-1 nil 3742920977 ("" (grind) nil nil)
   ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (eqs const-decl "bool" lib_extra nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil))
   shostak))
 (natural_test19 0
  (natural_test19-1 nil 3742920977 ("" (grind) nil nil)
   ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (eqs const-decl "bool" lib_extra nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil))
   shostak))
 (natural_test20 0
  (natural_test20-1 nil 3742920977 ("" (grind) nil nil)
   ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (eqs const-decl "bool" lib_extra nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil))
   shostak))
 (natural_test21 0
  (natural_test21-1 nil 3742920977 ("" (grind) nil nil)
   ((posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   shostak))
 (natural_test22 0
  (natural_test22-1 nil 3742920977 ("" (grind) nil nil)
   ((posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   shostak))
 (natural_test23 0
  (natural_test23-1 nil 3742920977 ("" (grind) nil nil)
   ((succ const-decl "nat" naturalnumbers nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (natural_test24 0
  (natural_test24-1 nil 3742920977 ("" (grind) nil nil)
   ((succ const-decl "nat" naturalnumbers nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (natural_test25 0
  (natural_test25-1 nil 3742920977 ("" (grind) nil nil)
   ((pred const-decl "nat" naturalnumbers nil)
    (eqs const-decl "bool" lib_extra nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (natural_test26 0
  (natural_test26-1 nil 3742920977 ("" (grind) nil nil)
   ((pred const-decl "nat" naturalnumbers nil)
    (eqs const-decl "bool" lib_extra nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (natural_test27 0
  (natural_test27-1 nil 3742920977 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (natural_test28a 0
  (natural_test28a-1 nil 3742920977 ("" (grind) nil nil)
   ((odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (natural_test28b 0
  (natural_test28b-1 nil 3742920977 ("" (grind) nil nil)
   ((even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (int_test1 0
  (int_test1-1 nil 3742920977 ("" (grind) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (int_test2 0
  (int_test2-1 nil 3742920977 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (int_test3 0
  (int_test3-1 nil 3742920977 ("" (grind) nil nil)
   ((odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (int_test4 0
  (int_test4-1 nil 3742920977 ("" (grind) nil nil)
   ((mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (int_test5 0
  (int_test5-1 nil 3742920977 ("" (grind) nil nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (eqs const-decl "bool" lib_extra nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil))
   shostak))
 (int_test6 0
  (int_test6-1 nil 3742920977
   ("" (grind) (("" (eval-formula) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (int_test6a 0
  (int_test6a-1 nil 3742920977 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (int_test7 0
  (int_test7-1 nil 3742920977
   ("" (grind) (("" (eval-formula) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (int_test7a 0
  (int_test7a-1 nil 3742920977 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (int_test8 0
  (int_test8-1 nil 3742920977 ("" (grind) nil nil)
   ((nil application-judgement "below(m)" mod nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil))
   shostak))
 (int_test8at 0
  (int_test8at-1 nil 3742920977 ("" (grind) nil nil)
   ((nil application-judgement "below(m)" mod nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (eqs const-decl "bool" lib_extra nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil))
   shostak))
 (int_test9 0
  (int_test9-1 nil 3742920977 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (int_test10 0
  (int_test10-1 nil 3742920977 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (int_test11 0
  (int_test11-1 nil 3742920977 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (int_test12 0
  (int_test12-1 nil 3742920977 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (int_test13 0
  (int_test13-1 nil 3742920977 ("" (grind) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (int_test14 0
  (int_test14-1 nil 3742920977 ("" (grind) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (int_test15 0
  (int_test15-1 nil 3742920977 ("" (grind) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (int_test16 0
  (int_test16-1 nil 3742920977 ("" (grind) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (int_test17 0
  (int_test17-1 nil 3742920977 ("" (grind) nil nil)
   ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (eqs const-decl "bool" lib_extra nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil))
   shostak))
 (int_test18 0
  (int_test18-1 nil 3742920977 ("" (grind) nil nil)
   ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (eqs const-decl "bool" lib_extra nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil))
   shostak))
 (int_test19 0
  (int_test19-1 nil 3742920977 ("" (grind) nil nil)
   ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (eqs const-decl "bool" lib_extra nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil))
   shostak))
 (int_test20 0
  (int_test20-1 nil 3742920977 ("" (grind) nil nil)
   ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (eqs const-decl "bool" lib_extra nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil))
   shostak))
 (int_test21 0
  (int_test21-1 nil 3742920977 ("" (grind) nil nil)
   ((posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   shostak))
 (int_test22 0
  (int_test22-1 nil 3742920977 ("" (grind) nil nil)
   ((posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   shostak))
 (int_test23 0
  (int_test23-1 nil 3742920977 ("" (grind) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (int_test24 0
  (int_test24-1 nil 3742920977 ("" (grind) nil nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (int_test25 0
  (int_test25-1 nil 3742920977 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (int_test26 0
  (int_test26-1 nil 3742920977 ("" (grind) nil nil)
   ((even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (int_test27 0
  (int_test27-1 nil 3742920977 ("" (grind) nil nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (eqs const-decl "bool" lib_extra nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil))
   shostak))
 (int_test28 0
  (int_test28-1 nil 3742920977 ("" (grind) nil nil)
   ((nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil))
   shostak))
 (int32_test1 0
  (int32_test1-1 nil 3742920977 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_add const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int32_test2 0
  (int32_test2-1 nil 3742920977 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_minus const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int32_test3 0
  (int32_test3-1 nil 3742920977 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (word_neg const-decl "word" word nil)
    (word_minus const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (int32_test4 0
  (int32_test4-1 nil 3742920977 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_mult const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int32_test5 0
  (int32_test5-1 nil 3742920977 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_pow const-decl "word" word nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int32_test6_TCC1 0
  (int32_test6_TCC1-1 nil 3742920976 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (int32_test6 subtype "word[32].of_nat(4)" "nzword[32]")))
 (int32_test6 0
  (int32_test6-1 nil 3742920977 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (int32_test7 0
  (int32_test7-1 nil 3742920977 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (int32_test8 0
  (int32_test8-1 nil 3742920977 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_mod const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int32_test9 0
  (int32_test9-1 nil 3742920977 ("" (grind) nil nil)
   ((word_slt const-decl "bool" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int32_test10 0
  (int32_test10-1 nil 3742920977 ("" (grind) nil nil)
   ((word_sle const-decl "bool" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int32_test11 0
  (int32_test11-1 nil 3742920977 ("" (grind) nil nil)
   ((word_sle const-decl "bool" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int32_test12 0
  (int32_test12-1 nil 3742920977 ("" (grind) nil nil)
   ((word_slt const-decl "bool" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int32_test13 0
  (int32_test13-1 nil 3742920977 ("" (grind) nil nil)
   ((word_sgt const-decl "bool" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int32_test13a 0
  (int32_test13a-1 nil 3742920977 ("" (grind) nil nil)
   ((nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (word_sgt const-decl "bool" word nil)
    (word_neg const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (int32_test14 0
  (int32_test14-1 nil 3742920977 ("" (grind) nil nil)
   ((word_sge const-decl "bool" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int32_test15 0
  (int32_test15-1 nil 3742920977 ("" (grind) nil nil)
   ((word_sge const-decl "bool" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int32_test16 0
  (int32_test16-1 nil 3742920977 ("" (grind) nil nil)
   ((word_sgt const-decl "bool" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int32_test17 0
  (int32_test17-1 nil 3742920977 ("" (grind) nil nil)
   ((rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_smin const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int32_test18 0
  (int32_test18-1 nil 3742920977 ("" (grind) nil nil)
   ((rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_smin const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int32_test19 0
  (int32_test19-1 nil 3742920977 ("" (grind) nil nil)
   ((rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_smin const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int32_test20 0
  (int32_test20-1 nil 3742920977 ("" (grind) nil nil)
   ((rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_smax const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int32_test21 0
  (int32_test21-1 nil 3742920977 ("" (grind) nil nil)
   ((rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_smax const-decl "word" word nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (word_neg const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil))
   shostak))
 (int32_test22 0
  (int32_test22-1 nil 3742920977 ("" (grind) nil nil)
   ((rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_smax const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (int32_test23 0
  (int32_test23-1 nil 3742920977 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_add const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int32_test24 0
  (int32_test24-1 nil 3742920977 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_add const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int32_test25 0
  (int32_test25-1 nil 3742920977 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_minus const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int32_test26 0
  (int32_test26-1 nil 3742920977 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (word_neg const-decl "word" word nil)
    (word_minus const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (int32_test27 0
  (int32_test27-1 nil 3742920977 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (int32Abs const-decl "word[32]" lem_num nil)
    (word_neg const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (word_sle const-decl "bool" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil))
   shostak))
 (int32_test28 0
  (int32_test28-1 nil 3742920977 ("" (grind) nil nil)
   ((rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (int32Abs const-decl "word[32]" lem_num nil)
    (word_sle const-decl "bool" word nil)
    (word_neg const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil))
   shostak))
 (int64_test1 0
  (int64_test1-1 nil 3742920977 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_add const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int64_test2 0
  (int64_test2-1 nil 3742920977 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_minus const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int64_test3 0
  (int64_test3-1 nil 3742920977 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (word_neg const-decl "word" word nil)
    (word_minus const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (int64_test4 0
  (int64_test4-1 nil 3742920977 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_mult const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int64_test5 0
  (int64_test5-1 nil 3742920977 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_pow const-decl "word" word nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int64_test6_TCC1 0
  (int64_test6_TCC1-1 nil 3742920976 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (int64_test6 subtype "word[64].of_nat(4)" "nzword[64]")))
 (int64_test6 0
  (int64_test6-1 nil 3742920977 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (int64_test7 0
  (int64_test7-1 nil 3742920977 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (int64_test8 0
  (int64_test8-1 nil 3742920977 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_mod const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int64_test9 0
  (int64_test9-1 nil 3742920977 ("" (grind) nil nil)
   ((word_slt const-decl "bool" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int64_test10 0
  (int64_test10-1 nil 3742920977 ("" (grind) nil nil)
   ((word_sle const-decl "bool" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int64_test11 0
  (int64_test11-1 nil 3742920977 ("" (grind) nil nil)
   ((word_sle const-decl "bool" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int64_test12 0
  (int64_test12-1 nil 3742920977 ("" (grind) nil nil)
   ((word_slt const-decl "bool" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int64_test13 0
  (int64_test13-1 nil 3742920977 ("" (grind) nil nil)
   ((word_sgt const-decl "bool" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int64_test13a 0
  (int64_test13a-1 nil 3742920977 ("" (grind) nil nil)
   ((nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (word_sgt const-decl "bool" word nil)
    (word_neg const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (int64_test14 0
  (int64_test14-1 nil 3742920977 ("" (grind) nil nil)
   ((word_sge const-decl "bool" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int64_test15 0
  (int64_test15-1 nil 3742920977 ("" (grind) nil nil)
   ((word_sge const-decl "bool" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int64_test16 0
  (int64_test16-1 nil 3742920977 ("" (grind) nil nil)
   ((word_sgt const-decl "bool" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int64_test17 0
  (int64_test17-1 nil 3742920977 ("" (grind) nil nil)
   ((rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_smin const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int64_test18 0
  (int64_test18-1 nil 3742920977 ("" (grind) nil nil)
   ((rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_smin const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int64_test19 0
  (int64_test19-1 nil 3742920977 ("" (grind) nil nil)
   ((rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_smin const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int64_test20 0
  (int64_test20-1 nil 3742920977 ("" (grind) nil nil)
   ((rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_smax const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int64_test21 0
  (int64_test21-1 nil 3742920977 ("" (grind) nil nil)
   ((rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_smax const-decl "word" word nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (word_neg const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil))
   shostak))
 (int64_test22 0
  (int64_test22-1 nil 3742920977 ("" (grind) nil nil)
   ((rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_smax const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (int64_test23 0
  (int64_test23-1 nil 3742920977 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_add const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int64_test24 0
  (int64_test24-1 nil 3742920977 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_add const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int64_test25 0
  (int64_test25-1 nil 3742920977 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_minus const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int64_test26 0
  (int64_test26-1 nil 3742920977 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (word_neg const-decl "word" word nil)
    (word_minus const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (int64_test27 0
  (int64_test27-1 nil 3742920977 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (int64Abs const-decl "word[64]" lem_num nil)
    (word_neg const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (word_sle const-decl "bool" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil))
   shostak))
 (int64_test28 0
  (int64_test28-1 nil 3742920977 ("" (grind) nil nil)
   ((rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (int64Abs const-decl "word[64]" lem_num nil)
    (word_sle const-decl "bool" word nil)
    (word_neg const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil))
   shostak))
 (integer_test1 0
  (integer_test1-1 nil 3742920977 ("" (grind) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (integer_test2 0
  (integer_test2-1 nil 3742920977 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (integer_test3 0
  (integer_test3-1 nil 3742920977 ("" (grind) nil nil)
   ((odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (integer_test4 0
  (integer_test4-1 nil 3742920977 ("" (grind) nil nil)
   ((mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (integer_test5 0
  (integer_test5-1 nil 3742920977 ("" (grind) nil nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (eqs const-decl "bool" lib_extra nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil))
   shostak))
 (integer_test6 0
  (integer_test6-1 nil 3742920977 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil))
   shostak))
 (integer_test6a 0
  (integer_test6a-1 nil 3742920977 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (integer_test7 0
  (integer_test7-1 nil 3742920977 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil))
   shostak))
 (integer_test7a 0
  (integer_test7a-1 nil 3742920977 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (integer_test8 0
  (integer_test8-1 nil 3742920977 ("" (grind) nil nil)
   ((nil application-judgement "below(m)" mod nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil))
   shostak))
 (integer_test8a 0
  (integer_test8a-1 nil 3742920977 ("" (grind) nil nil)
   ((nil application-judgement "below(m)" mod nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (eqs const-decl "bool" lib_extra nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil))
   shostak))
 (integer_test9 0
  (integer_test9-1 nil 3742920977 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (integer_test10 0
  (integer_test10-1 nil 3742920977 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (integer_test11 0
  (integer_test11-1 nil 3742920977 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (integer_test12 0
  (integer_test12-1 nil 3742920977 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (integer_test13 0
  (integer_test13-1 nil 3742920977 ("" (grind) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (integer_test14 0
  (integer_test14-1 nil 3742920977 ("" (grind) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (integer_test15 0
  (integer_test15-1 nil 3742920977 ("" (grind) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (integer_test16 0
  (integer_test16-1 nil 3742920977 ("" (grind) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (integer_test17 0
  (integer_test17-1 nil 3742920977 ("" (grind) nil nil)
   ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (eqs const-decl "bool" lib_extra nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil))
   shostak))
 (integer_test18 0
  (integer_test18-1 nil 3742920977 ("" (grind) nil nil)
   ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (eqs const-decl "bool" lib_extra nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil))
   shostak))
 (integer_test19 0
  (integer_test19-1 nil 3742920977 ("" (grind) nil nil)
   ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (eqs const-decl "bool" lib_extra nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil))
   shostak))
 (integer_test20 0
  (integer_test20-1 nil 3742920977 ("" (grind) nil nil)
   ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (eqs const-decl "bool" lib_extra nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil))
   shostak))
 (integer_test21 0
  (integer_test21-1 nil 3742920977 ("" (grind) nil nil)
   ((posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   shostak))
 (integer_test22 0
  (integer_test22-1 nil 3742920977 ("" (grind) nil nil)
   ((posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   shostak))
 (integer_test23 0
  (integer_test23-1 nil 3742920977 ("" (grind) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (integer_test24 0
  (integer_test24-1 nil 3742920977 ("" (grind) nil nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (integer_test25 0
  (integer_test25-1 nil 3742920977 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (integer_test26 0
  (integer_test26-1 nil 3742920977 ("" (grind) nil nil)
   ((even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (integer_test27 0
  (integer_test27-1 nil 3742920977 ("" (grind) nil nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (eqs const-decl "bool" lib_extra nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil))
   shostak))
 (integer_test28 0
  (integer_test28-1 nil 3742920977 ("" (grind) nil nil)
   ((nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil))
   shostak))
 (rational_test1 0
  (rational_test1-1 nil 3742920977 ("" (grind) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (rational_test2 0
  (rational_test2-1 nil 3742920977 ("" (grind) nil nil)
   ((rationalFromFrac const-decl "rat" lem_num nil)
    (eqs const-decl "bool" lib_extra nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil))
   shostak))
 (rational_test3 0
  (rational_test3-1 nil 3742920977 ("" (grind) nil nil)
   ((odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (rational_test4 0
  (rational_test4-1 nil 3742920977 ("" (grind) nil nil)
   ((mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (rational_test5 0
  (rational_test5-1 nil 3742920977 ("" (grind) nil nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (eqs const-decl "bool" lib_extra nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil))
   shostak))
 (rational_test5a 0
  (rational_test5a-1 nil 3742920977 ("" (grind) nil nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (rationalFromFrac const-decl "rat" lem_num nil)
    (rationalPowInteger def-decl "rat" lem_num nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (rational_test5b 0
  (rational_test5b-1 nil 3742920977 ("" (grind) nil nil)
   ((even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nprat_div_posrat_is_nprat application-judgement "nprat" rationals
     nil)
    (rationalFromFrac const-decl "rat" lem_num nil)
    (rationalPowInteger def-decl "rat" lem_num nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (rational_test5c 0
  (rational_test5c-1 nil 3742920977 ("" (grind) nil nil)
   ((even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (rationalFromFrac const-decl "rat" lem_num nil)
    (rationalPowInteger def-decl "rat" lem_num nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (rational_test6 0
  (rational_test6-1 nil 3742920977 ("" (grind) nil nil)
   ((rationalFromFrac const-decl "rat" lem_num nil)
    (eqs const-decl "bool" lib_extra nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil))
   shostak))
 (rational_test6a 0
  (rational_test6a-1 nil 3742920977 ("" (grind) nil nil)
   ((nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (eqs const-decl "bool" lib_extra nil)
    (rationalFromFrac const-decl "rat" lem_num nil))
   shostak))
 (rational_test7 0
  (rational_test7-1 nil 3742920977 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (rational_test8 0
  (rational_test8-1 nil 3742920977 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (rational_test9 0
  (rational_test9-1 nil 3742920977 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (rational_test10 0
  (rational_test10-1 nil 3742920977 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (rational_test11 0
  (rational_test11-1 nil 3742920977 ("" (grind) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (rational_test12 0
  (rational_test12-1 nil 3742920977 ("" (grind) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (rational_test13 0
  (rational_test13-1 nil 3742920977 ("" (grind) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (rational_test14 0
  (rational_test14-1 nil 3742920977 ("" (grind) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (rational_test15 0
  (rational_test15-1 nil 3742920977 ("" (grind) nil nil)
   ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (eqs const-decl "bool" lib_extra nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil))
   shostak))
 (rational_test16 0
  (rational_test16-1 nil 3742920977 ("" (grind) nil nil)
   ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (eqs const-decl "bool" lib_extra nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil))
   shostak))
 (rational_test17 0
  (rational_test17-1 nil 3742920977 ("" (grind) nil nil)
   ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (eqs const-decl "bool" lib_extra nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil))
   shostak))
 (rational_test18 0
  (rational_test18-1 nil 3742920977 ("" (grind) nil nil)
   ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (eqs const-decl "bool" lib_extra nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil))
   shostak))
 (rational_test19 0
  (rational_test19-1 nil 3742920977 ("" (grind) nil nil)
   ((posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   shostak))
 (rational_test20 0
  (rational_test20-1 nil 3742920977 ("" (grind) nil nil)
   ((posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   shostak))
 (rational_test21 0
  (rational_test21-1 nil 3742920977 ("" (grind) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (rational_test22 0
  (rational_test22-1 nil 3742920977 ("" (grind) nil nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (rational_test23 0
  (rational_test23-1 nil 3742920977 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (rational_test24 0
  (rational_test24-1 nil 3742920977 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (rational_test25 0
  (rational_test25-1 nil 3742920977 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (rational_test26 0
  (rational_test26-1 nil 3742920977 ("" (grind) nil nil)
   ((even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (rational_test27 0
  (rational_test27-1 nil 3742920977 ("" (grind) nil nil)
   ((rationalFromFrac const-decl "rat" lem_num nil)
    (eqs const-decl "bool" lib_extra nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil))
   shostak))
 (real_test1 0
  (real_test1-1 nil 3742920977 ("" (grind) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (real_test2 0
  (real_test2-1 nil 3742920977 ("" (grind) nil nil)
   ((posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (real_test3 0
  (real_test3-1 nil 3742920977 ("" (grind) nil nil)
   ((odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (real_test4 0
  (real_test4-1 nil 3742920977 ("" (grind) nil nil)
   ((mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (real_test5 0
  (real_test5-1 nil 3742920977 ("" (grind) nil nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (eqs const-decl "bool" lib_extra nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil))
   shostak))
 (real_test5a 0
  (real_test5a-1 nil 3742920977 ("" (grind) nil nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (realFromFrac const-decl "real" lem_num nil)
    (realPowInteger def-decl "real" lem_num nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (real_test5b 0
  (real_test5b-1 nil 3742920977 ("" (grind) nil nil)
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nprat_div_posrat_is_nprat application-judgement "nprat" rationals
     nil)
    (realFromFrac const-decl "real" lem_num nil)
    (realPowInteger def-decl "real" lem_num nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (real_test5c 0
  (real_test5c-1 nil 3742920977 ("" (grind) nil nil)
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (realFromFrac const-decl "real" lem_num nil)
    (realPowInteger def-decl "real" lem_num nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (real_test6 0
  (real_test6-1 nil 3742920977 ("" (grind) nil nil)
   ((realFromFrac const-decl "real" lem_num nil)
    (eqs const-decl "bool" lib_extra nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil))
   shostak))
 (real_test6a 0
  (real_test6a-1 nil 3742920977 ("" (grind) nil nil)
   ((realFromFrac const-decl "real" lem_num nil)
    (eqs const-decl "bool" lib_extra nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil))
   shostak))
 (real_test7 0
  (real_test7-1 nil 3742920977 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (real_test8 0
  (real_test8-1 nil 3742920977 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (real_test9 0
  (real_test9-1 nil 3742920977 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (real_test10 0
  (real_test10-1 nil 3742920977 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (real_test11 0
  (real_test11-1 nil 3742920977 ("" (grind) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (real_test12 0
  (real_test12-1 nil 3742920977 ("" (grind) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (real_test13 0
  (real_test13-1 nil 3742920977 ("" (grind) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (real_test14 0
  (real_test14-1 nil 3742920977 ("" (grind) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (real_test15 0
  (real_test15-1 nil 3742920977 ("" (grind) nil nil)
   ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (eqs const-decl "bool" lib_extra nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil))
   shostak))
 (real_test16 0
  (real_test16-1 nil 3742920977 ("" (grind) nil nil)
   ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (eqs const-decl "bool" lib_extra nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil))
   shostak))
 (real_test17 0
  (real_test17-1 nil 3742920977 ("" (grind) nil nil)
   ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (eqs const-decl "bool" lib_extra nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil))
   shostak))
 (real_test18 0
  (real_test18-1 nil 3742920977 ("" (grind) nil nil)
   ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (eqs const-decl "bool" lib_extra nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil))
   shostak))
 (real_test19 0
  (real_test19-1 nil 3742920977 ("" (grind) nil nil)
   ((posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   shostak))
 (real_test20 0
  (real_test20-1 nil 3742920977 ("" (grind) nil nil)
   ((posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   shostak))
 (real_test21 0
  (real_test21-1 nil 3742920977 ("" (grind) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (real_test22 0
  (real_test22-1 nil 3742920978 ("" (grind) nil nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (real_test23 0
  (real_test23-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (real_test24 0
  (real_test24-1 nil 3742920978 ("" (grind) nil nil)
   ((even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (real_test25 0
  (real_test25-1 nil 3742920978 ("" (grind) nil nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (eqs const-decl "bool" lib_extra nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil))
   shostak))
 (real_test26 0
  (real_test26-1 nil 3742920978 ("" (grind) nil nil)
   ((nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil))
   shostak))
 (real_test27 0
  (real_test27-1 nil 3742920978 ("" (grind) nil nil)
   ((posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (real_test28_TCC1 0
  (real_test28_TCC1-1 nil 3742920976 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (realFromFrac const-decl "real" lem_num nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (real_test28 subtype "(2)"
    "{i | booleans.&(reals.<=(floor_ceil.i, lem_num.realFromFrac((11))((4))), reals.<(lem_num.realFromFrac((11))((4)), (number_fields.+)(1, floor_ceil.i)))}")))
 (real_test28 0
  (real_test28-1 nil 3742920978 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   shostak))
 (real_test29_TCC1 0
  (real_test29_TCC1-1 nil 3742920976 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (realFromFrac const-decl "real" lem_num nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (real_test29 subtype "(3)"
    "{i | booleans.&(reals.<=(lem_num.realFromFrac((11))((4)), floor_ceil.i), reals.<(floor_ceil.i, (number_fields.+)(1, lem_num.realFromFrac((11))((4)))))}")))
 (real_test29 0
  (real_test29-1 nil 3742920978 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (real_test30_TCC1 0
  (real_test30_TCC1-1 nil 3742920976 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (realFromFrac const-decl "real" lem_num nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (real_test30 subtype "(3)"
    "{i | booleans.&(reals.<=(floor_ceil.i, lem_num.realFromFrac((12))((4))), reals.<(lem_num.realFromFrac((12))((4)), (number_fields.+)(1, floor_ceil.i)))}")))
 (real_test30 0
  (real_test30-1 nil 3742920978
   ("" (grind) (("" (eval-formula) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil)
    (realFromFrac const-decl "real" lem_num nil))
   shostak))
 (real_test31_TCC1 0
  (real_test31_TCC1-1 nil 3742920976 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (realFromFrac const-decl "real" lem_num nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (real_test31 subtype "(3)"
    "{i | booleans.&(reals.<=(lem_num.realFromFrac((12))((4)), floor_ceil.i), reals.<(floor_ceil.i, (number_fields.+)(1, lem_num.realFromFrac((12))((4)))))}")))
 (real_test31 0
  (real_test31-1 nil 3742920978 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (real_test32_TCC1 0
  (real_test32_TCC1-1 nil 3742920976 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (realFromFrac const-decl "real" lem_num nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (real_test32 subtype ""
    "{i | booleans.&(reals.<=(floor_ceil.i, lem_num.realFromFrac()((2))), reals.<(lem_num.realFromFrac()((2)), (number_fields.+)(1, floor_ceil.i)))}")))
 (real_test32 0
  (real_test32-1 nil 3742920978 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   shostak))
 (real_test33_TCC1 0
  (real_test33_TCC1-1 nil 3742920976 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (realFromFrac const-decl "real" lem_num nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (real_test33 subtype ""
    "{i | booleans.&(reals.<=(lem_num.realFromFrac()((2)), floor_ceil.i), reals.<(floor_ceil.i, (number_fields.+)(1, lem_num.realFromFrac()((2)))))}")))
 (real_test33 0
  (real_test33-1 nil 3742920978 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (integer_from_int_0 0
  (integer_from_int_0-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)) shostak))
 (integer_from_int_1 0
  (integer_from_int_1-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)) shostak))
 (integer_from_int_2 0
  (integer_from_int_2-1 nil 3742920978 ("" (grind) nil nil)
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (integer_from_nat_0 0
  (integer_from_nat_0-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)) shostak))
 (integer_from_nat_1 0
  (integer_from_nat_1-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)) shostak))
 (integer_from_nat_2 0
  (integer_from_nat_2-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)) shostak))
 (integerFromNatural_0 0
  (integerFromNatural_0-1 nil 3742922728 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (integerFromNatural_1 0
  (integerFromNatural_1-1 nil 3742922735 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (integerFromNatural_2 0
  (integerFromNatural_2-1 nil 3742922740 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (integer_from_int32_0 0
  (integer_from_int32_0-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (integer_from_int32_1 0
  (integer_from_int32_1-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (integer_from_int32_2 0
  (integer_from_int32_2-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (integer_from_int32_3 0
  (integer_from_int32_3-1 nil 3742920978 ("" (grind) nil nil)
   ((rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_neg const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (integer_from_int32_4 0
  (integer_from_int32_4-1 nil 3742920978 ("" (grind) nil nil)
   ((nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_neg const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (integer_from_int32_5 0
  (integer_from_int32_5-1 nil 3742920978 ("" (grind) nil nil)
   ((nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_neg const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (integer_from_int64_0 0
  (integer_from_int64_0-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (integer_from_int64_1 0
  (integer_from_int64_1-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (integer_from_int64_2 0
  (integer_from_int64_2-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (integer_from_int64_3 0
  (integer_from_int64_3-1 nil 3742920978 ("" (grind) nil nil)
   ((rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_neg const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (integer_from_int64_4 0
  (integer_from_int64_4-1 nil 3742920978 ("" (grind) nil nil)
   ((nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_neg const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (integer_from_int64_5 0
  (integer_from_int64_5-1 nil 3742920978 ("" (grind) nil nil)
   ((nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_neg const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (natural_from_nat_0 0
  (natural_from_nat_0-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)) shostak))
 (natural_from_nat_1 0
  (natural_from_nat_1-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)) shostak))
 (natural_from_nat_2 0
  (natural_from_nat_2-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)) shostak))
 (natural_from_integer_0 0
  (natural_from_integer_0-1 nil 3742920978 ("" (grind) nil nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (eqs const-decl "bool" lib_extra nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil))
   shostak))
 (natural_from_integer_1 0
  (natural_from_integer_1-1 nil 3742920978 ("" (grind) nil nil)
   ((int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil))
   shostak))
 (natural_from_integer_2 0
  (natural_from_integer_2-1 nil 3742920978 ("" (grind) nil nil)
   ((nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil))
   shostak))
 (int_from_integer_0 0
  (int_from_integer_0-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)) shostak))
 (int_from_integer_1 0
  (int_from_integer_1-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)) shostak))
 (int_from_integer_2 0
  (int_from_integer_2-1 nil 3742920978 ("" (grind) nil nil)
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (eqs const-decl "bool" lib_extra nil))
   shostak))
 (int_from_nat_0 0
  (int_from_nat_0-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)) shostak))
 (int_from_nat_1 0
  (int_from_nat_1-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)) shostak))
 (int_from_nat_2 0
  (int_from_nat_2-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)) shostak))
 (nat_from_natural_0 0
  (nat_from_natural_0-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)) shostak))
 (nat_from_natural_1 0
  (nat_from_natural_1-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)) shostak))
 (nat_from_natural_2 0
  (nat_from_natural_2-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)) shostak))
 (nat_from_int_0 0
  (nat_from_int_0-1 nil 3742920978 ("" (grind) nil nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (eqs const-decl "bool" lib_extra nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil))
   shostak))
 (nat_from_int_1 0
  (nat_from_int_1-1 nil 3742920978 ("" (grind) nil nil)
   ((int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil))
   shostak))
 (nat_from_int_2 0
  (nat_from_int_2-1 nil 3742920978 ("" (grind) nil nil)
   ((nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil))
   shostak))
 (int32_from_nat_0 0
  (int32_from_nat_0-1 nil 3742920978 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int32_from_nat_1 0
  (int32_from_nat_1-1 nil 3742920978 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int32_from_nat_2 0
  (int32_from_nat_2-1 nil 3742920978 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int32_from_natural_0 0
  (int32_from_natural_0-1 nil 3742920978 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int32_from_natural_1 0
  (int32_from_natural_1-1 nil 3742920978 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int32_from_natural_2 0
  (int32_from_natural_2-1 nil 3742920978 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int32FromInteger_def_lemma 0
  (int32FromInteger_def_lemma-1 nil 3742923672
   ("" (skeep)
    (("" (expand "of_int")
      (("" (case "i < 0")
        (("1" (replace -1)
          (("1" (expand "word_neg")
            (("1" (case "of_nat[32](abs(i)) > exp2(31) - 1")
              (("1" (replace -1) (("1" (grind) nil nil)) nil)
               ("2" (replace 1) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (replace 1) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (of_int const-decl "word" word nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (of_nat const-decl "word" word nil)
    (word type-eq-decl nil word nil) (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (eqs const-decl "bool" lib_extra nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (word_neg const-decl "word" word nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil))
   shostak))
 (int32_from_integer_0 0
  (int32_from_integer_0-1 nil 3742920978 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int32_from_integer_1 0
  (int32_from_integer_1-1 nil 3742920978 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int32_from_integer_2 0
  (int32_from_integer_2-1 nil 3742920978 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int32_from_integer_3 0
  (int32_from_integer_3-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (word_neg const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int32_from_integer_4 0
  (int32_from_integer_4-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (word_neg const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int32_from_integer_5 0
  (int32_from_integer_5-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (word_neg const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int32FromInt_def_lemma 0
  (int32FromInt_def_lemma-1 nil 3742923833
   ("" (skeep) (("" (grind) nil nil)) nil)
   ((exp2 def-decl "posnat" exp2 nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (of_int const-decl "word" word nil)
    (eqs const-decl "bool" lib_extra nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nil application-judgement "below(m)" mod nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (int32_from_int_0 0
  (int32_from_int_0-1 nil 3742920978 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int32_from_int_1 0
  (int32_from_int_1-1 nil 3742920978 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int32_from_int_2 0
  (int32_from_int_2-1 nil 3742920978 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int32_from_int_3 0
  (int32_from_int_3-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (word_neg const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int32_from_int_4 0
  (int32_from_int_4-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (word_neg const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int32_from_int_5 0
  (int32_from_int_5-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (word_neg const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int32FromInt64_def_lemma 0
  (int32FromInt64_def_lemma-1 nil 3742923854
   ("" (skeep)
    (("" (case "i > exp2(64 - 1) - 1")
      (("1" (replace -1)
        (("1" (expand "of_int")
          (("1" (case "exp2(64) = exp2(32) * exp2(32)")
            (("1" (replace -1)
              (("1"
                (use "mod_sum"
                     ("i" "i" "k" "-exp2(32)" "j" "exp2(32)"))
                (("1" (grind) nil nil)) nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil)
       ("2" (replace 1) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (word type-eq-decl nil word nil) (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (of_int const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (eqs const-decl "bool" lib_extra nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (mod_sum formula-decl nil mod nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (int32_from_int_64_0 0
  (int32_from_int_64_0-1 nil 3742920978 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (eqs const-decl "bool" lib_extra nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int32_from_int_64_1 0
  (int32_from_int_64_1-1 nil 3742920978 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (eqs const-decl "bool" lib_extra nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int32_from_int_64_2 0
  (int32_from_int_64_2-1 nil 3742920978 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (eqs const-decl "bool" lib_extra nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int32_from_int_64_3 0
  (int32_from_int_64_3-1 nil 3742920978 ("" (grind) nil nil)
   ((rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_neg const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil))
   shostak))
 (int32_from_int_64_4 0
  (int32_from_int_64_4-1 nil 3742920978 ("" (grind) nil nil)
   ((nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_neg const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (int32_from_int_64_5 0
  (int32_from_int_64_5-1 nil 3742920978 ("" (grind) nil nil)
   ((nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_neg const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (int64_from_nat_0 0
  (int64_from_nat_0-1 nil 3742920978 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int64_from_nat_1 0
  (int64_from_nat_1-1 nil 3742920978 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int64_from_nat_2 0
  (int64_from_nat_2-1 nil 3742920978 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int64_from_natural_0 0
  (int64_from_natural_0-1 nil 3742920978 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int64_from_natural_1 0
  (int64_from_natural_1-1 nil 3742920978 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int64_from_natural_2 0
  (int64_from_natural_2-1 nil 3742920978 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int64FromInteger_def_lemma 0
  (int64FromInteger_def_lemma-1 nil 3742924071
   ("" (skeep)
    (("" (case "i < 0")
      (("1" (replace -1)
        (("1" (expand "of_int")
          (("1" (expand "word_neg")
            (("1" (case "of_nat[64](abs(i)) > exp2(63) - 1")
              (("1" (replace -1)
                (("1" (expand "of_int") (("1" (grind) nil nil)) nil))
                nil)
               ("2" (replace 1) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (replace 1) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (of_int const-decl "word" word nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (of_nat const-decl "word" word nil)
    (word type-eq-decl nil word nil) (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (eqs const-decl "bool" lib_extra nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (word_neg const-decl "word" word nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (int64_from_integer_0 0
  (int64_from_integer_0-1 nil 3742920978 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int64_from_integer_1 0
  (int64_from_integer_1-1 nil 3742920978 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int64_from_integer_2 0
  (int64_from_integer_2-1 nil 3742920978 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int64_from_integer_3 0
  (int64_from_integer_3-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (word_neg const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int64_from_integer_4 0
  (int64_from_integer_4-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (word_neg const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int64_from_integer_5 0
  (int64_from_integer_5-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (word_neg const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int64FromInt_def_lemma 0
  (int64FromInt_def_lemma-1 nil 3742924190 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (eqs const-decl "bool" lib_extra nil)
    (of_int const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int64_from_int_0 0
  (int64_from_int_0-1 nil 3742920978 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int64_from_int_1 0
  (int64_from_int_1-1 nil 3742920978 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int64_from_int_2 0
  (int64_from_int_2-1 nil 3742920978 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int64_from_int_3 0
  (int64_from_int_3-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (word_neg const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int64_from_int_4 0
  (int64_from_int_4-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (word_neg const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int64_from_int_5 0
  (int64_from_int_5-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (word_neg const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (int64FromInt32_def_lemma 0
  (int64FromInt32_def_lemma-1 nil 3742924199 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (of_int const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (int64_from_int_33_0 0
  (int64_from_int_33_0-1 nil 3742920978 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (eqs const-decl "bool" lib_extra nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int64_from_int_32_1 0
  (int64_from_int_32_1-1 nil 3742920978 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (eqs const-decl "bool" lib_extra nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int64_from_int_32_2 0
  (int64_from_int_32_2-1 nil 3742920978 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (eqs const-decl "bool" lib_extra nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (int64_from_int_32_3 0
  (int64_from_int_32_3-1 nil 3742920978 ("" (grind) nil nil)
   ((rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_neg const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil))
   shostak))
 (int64_from_int_32_4 0
  (int64_from_int_32_4-1 nil 3742920978 ("" (grind) nil nil) nil
   shostak))
 (int64_from_int_32_5 0
  (int64_from_int_32_5-1 nil 3742920978 ("" (grind) nil nil) nil
   shostak))
 (natural_from_int_0 0
  (natural_from_int_0-1 nil 3742920978 ("" (grind) nil nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (eqs const-decl "bool" lib_extra nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil))
   shostak))
 (natural_from_int_1 0
  (natural_from_int_1-1 nil 3742920978 ("" (grind) nil nil)
   ((int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil))
   shostak))
 (natural_from_int_2 0
  (natural_from_int_2-1 nil 3742920978 ("" (grind) nil nil)
   ((nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil))
   shostak))
 (natural_from_int32_0 0
  (natural_from_int32_0-1 nil 3742920978 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (natural_from_int32_1 0
  (natural_from_int32_1-1 nil 3742920978 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (natural_from_int32_2 0
  (natural_from_int32_2-1 nil 3742920978 ("" (grind) nil nil)
   ((rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (word_neg const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (natural_from_int64_0 0
  (natural_from_int64_0-1 nil 3742920978 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (natural_from_int64_1 0
  (natural_from_int64_1-1 nil 3742920978 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (natural_from_int64_2 0
  (natural_from_int64_2-1 nil 3742920978 ("" (grind) nil nil)
   ((rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (word_neg const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (int_from_natural_0 0
  (int_from_natural_0-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)) shostak))
 (int_from_natural_1 0
  (int_from_natural_1-1 nil 3742920978 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)) shostak))
 (int_from_natural_2 0
  (int_from_natural_2-1 nil 3742920979 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)) shostak))
 (int_from_int32_0 0
  (int_from_int32_0-1 nil 3742920979 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (int_from_int32_1 0
  (int_from_int32_1-1 nil 3742920979 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (int_from_int32_2 0
  (int_from_int32_2-1 nil 3742920979 ("" (grind) nil nil)
   ((rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_neg const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   shostak))
 (int_from_int64_0 0
  (int_from_int64_0-1 nil 3742920979 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (int_from_int64_1 0
  (int_from_int64_1-1 nil 3742920979 ("" (grind) nil nil)
   ((eqs const-decl "bool" lib_extra nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (int_from_int64_2 0
  (int_from_int64_2-1 nil 3742920979 ("" (grind) nil nil)
   ((rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (eqs const-decl "bool" lib_extra nil)
    (word_neg const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   shostak))
 (nat_from_integer_0 0
  (nat_from_integer_0-1 nil 3742920979 ("" (grind) nil nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (eqs const-decl "bool" lib_extra nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil))
   shostak))
 (nat_from_integer_1 0
  (nat_from_integer_1-1 nil 3742920979 ("" (grind) nil nil)
   ((int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil))
   shostak))
 (nat_from_integer_2 0
  (nat_from_integer_2-1 nil 3742920979 ("" (grind) nil nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (eqs const-decl "bool" lib_extra nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil))
   shostak))
 (nat_from_int32_0 0
  (nat_from_int32_0-1 nil 3742920979 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (nat_from_int32_1 0
  (nat_from_int32_1-1 nil 3742920979 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (nat_from_int32_2 0
  (nat_from_int32_2-1 nil 3742920979 ("" (grind) nil nil)
   ((rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (word_neg const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (nat_from_int64_0 0
  (nat_from_int64_0-1 nil 3742920979 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (nat_from_int64_1 0
  (nat_from_int64_1-1 nil 3742920979 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (nat_from_int64_2 0
  (nat_from_int64_2-1 nil 3742920979 ("" (grind) nil nil)
   ((rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqs const-decl "bool" lib_extra nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (word_neg const-decl "word" word nil)
    (of_int const-decl "word" word nil)
    (of_nat const-decl "word" word nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak)))

