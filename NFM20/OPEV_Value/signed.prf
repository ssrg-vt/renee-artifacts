(signed
 (signed_TCC1 0
  (signed_TCC1-1 nil 3721584640 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (signed_inj 0
  (signed_inj-1 nil 3724877614
   ("" (skeep)
    (("" (case "unsigned(x) < exp2(N - 1)")
      (("1" (replace -1)
        (("1" (case "unsigned(y) < exp2(N - 1)")
          (("1" (replace -1)
            (("1" (rewrite "unsigned_inj[N]") nil nil)) nil)
           ("2" (replace 1)
            (("2" (typepred "unsigned(x)")
              (("2" (use "unsigned_upperbound" ("bv" "y"))
                (("2" (both-sides "-" "exp2(N)" -1)
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (replace 1)
        (("2" (case "unsigned(y) < exp2(N - 1)")
          (("1" (replace -1)
            (("1" (use "unsigned_upperbound" ("bv" "x"))
              (("1" (both-sides "-" "exp2(N)" -1)
                (("1" (typepred "unsigned(y)") (("1" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (replace 1)
            (("2" (assert) (("2" (rewrite "unsigned_inj[N]") nil nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (grind) nil nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (exp2 def-decl "posnat" exp2 nil)
    (unsigned const-decl "nat" unsigned nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" signed nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (unsigned_inj formula-decl nil unsigned nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (both_sides_minus_lt1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (unsigned_upperbound formula-decl nil unsigned nil))
   shostak))
 (signed_surj 0
  (signed_surj-1 nil 3724878413
   ("" (skeep :preds? t)
    (("" (case "y >= 0")
      (("1" (use "unsigned_surj[N]")
        (("1" (skeep) (("1" (inst 1 "x") (("1" (grind) nil nil)) nil))
          nil)
         ("2" (hide 2) (("2" (grind) nil nil)) nil))
        nil)
       ("2" (lemma "unsigned_surj[N]")
        (("2" (flip-ineq 1)
          (("2" (inst -2 "y")
            (("1" (assert) nil nil) ("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((minint const-decl "int" bv_int_defs nil)
    (maxint const-decl "int" bv_int_defs nil)
    (N formal-const-decl "posnat" signed nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (unsigned const-decl "nat" unsigned nil)
    (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (< const-decl "bool" reals nil)
    (y skolem-const-decl "{n: nat | n <= maxint[N] AND n >= minint[N]}"
     signed nil)
    (exp2 def-decl "posnat" exp2 nil)
    (below type-eq-decl nil naturalnumbers nil)
    (unsigned_surj formula-decl nil unsigned nil))
   shostak))
 (signed_lowerbound 0
  (signed_lowerbound-1 nil 3724876820 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (exp2 def-decl "posnat" exp2 nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (unsigned const-decl "nat" unsigned nil)
    (minint const-decl "int" bv_int_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (signed_upperbound 0
  (signed_upperbound-1 nil 3724876845
   ("" (skeep)
    (("" (use "unsigned_upperbound[N]") (("" (grind) nil nil)) nil))
    nil)
   ((unsigned_upperbound formula-decl nil unsigned nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" signed nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (maxint const-decl "int" bv_int_defs nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (b2n const-decl "nbit" bit nil) (^ const-decl "bit" bv nil)
    (unsigned const-decl "nat" unsigned nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   shostak)))

