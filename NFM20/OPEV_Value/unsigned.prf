(unsigned
 (reverse_TCC1 0
  (reverse_TCC1-1 nil 3722473611 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (reverse_inj 0
  (reverse_inj-1 nil 3722624331
   ("" (skeep :preds? t)
    (("" (grind)
      (("" (decompose-equality)
        (("" (grind)
          (("" (decompose-equality)
            (("" (inst -1 "N-1-x!1") (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (bvec type-eq-decl nil bv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" unsigned nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (reverse_surj 0
  (reverse_surj-1 nil 3722624578
   ("" (skeep :preds? t)
    (("" (inst 1 "(LAMBDA (i: below(N)): y(N - i - 1))")
      (("" (grind) (("" (decompose-equality) nil nil)) nil)) nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (N formal-const-decl "nat" unsigned nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (reverse_bij 0
  (reverse_bij-1 nil 3722624683
   ("" (expand "bijective?")
    (("" (prop)
      (("1" (expand "injective?")
        (("1" (skosimp*)
          (("1" (use "reverse_inj") (("1" (grind) nil nil)) nil)) nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skosimp*)
          (("2" (use "reverse_surj") (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (N formal-const-decl "nat" unsigned nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (reverse_inj formula-decl nil unsigned nil)
    (injective? const-decl "bool" functions nil)
    (reverse_surj formula-decl nil unsigned nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (reverse_reverse_TCC1 0
  (reverse_reverse_TCC1-1 nil 3725208412 ("" (subtype-tcc) nil nil) nil
   nil))
 (reverse_reverse 0
  (reverse_reverse-1 nil 3722702823
   ("" (skeep)
    (("" (assert) (("" (apply-extensionality) nil nil)) nil)) nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" unsigned nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil))
   shostak))
 (unsigned_inj 0
  (unsigned_inj-1 nil 3722703248
   ("" (grind)
    ((""
      (case "(LAMBDA (i: below(N)): x!1(N - 1 - i)) =  (LAMBDA (i: below(N)): y!1(N - 1 -i))")
      (("1" (hide -2)
        (("1" (lemma "reverse_inj" ("x" "x!1" "y" "y!1"))
          (("1" (grind) nil nil)) nil))
        nil)
       ("2" (hide 2)
        (("2"
          (lemma "bv2nat_inj_rec"
           ("n" "N" "bv1" "(LAMBDA (i: below(N)): x!1(N - 1 - i))"
            "bv2" "(LAMBDA (i: below(N)): y!1(N - 1 - i))"))
          (("2" (grind) (("2" (decompose-equality) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (bvec type-eq-decl nil bv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" unsigned nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (reverse_inj formula-decl nil unsigned nil)
    (bv2nat_inj_rec formula-decl nil bv_nat nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (unsigned const-decl "nat" unsigned nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil))
   shostak))
 (unsigned_surj 0
  (unsigned_surj-1 nil 3722704042
   ("" (expand "unsigned")
    (("" (skosimp*)
      (("" (case "EXISTS (x: bvec[N]): bv2nat(x) = y!1")
        (("1" (skosimp*)
          (("1" (inst 1 "reverse(x!1)")
            (("1" (assert)
              (("1" (case "(LAMBDA (i_1: below(N)): x!1(i_1)) = x!1")
                (("1" (replaces -1) nil nil)
                 ("2" (hide 2) (("2" (decompose-equality) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (lemma "bv2nat_surj" ("y" "y!1"))
            (("2" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((bv2nat_surj formula-decl nil bv_nat nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (N formal-const-decl "nat" unsigned nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (unsigned const-decl "nat" unsigned nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (unsigned_lowerbound 0
  (unsigned_lowerbound-1 nil 3722705872
   ("" (skeep) (("" (expand "unsigned") (("" (grind) nil nil)) nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (unsigned const-decl "nat" unsigned nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil))
   shostak))
 (unsigned_upperbound 0
  (unsigned_upperbound-1 nil 3722705888
   ("" (skeep)
    (("" (expand "unsigned")
      (("" (grind)
        (("" (grind)
          ((""
            (lemma "bv2nat_rec_bound"
             ("n" "N" "bv" "(LAMBDA (i: below(N)): bv(N - 1 - i))"))
            (("" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (unsigned const-decl "nat" unsigned nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bv2nat_rec_bound formula-decl nil bv_nat nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" unsigned nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil))
   shostak))
 (unsigned_fill_F 0
  (unsigned_fill_F-1 nil 3726341475
   ("" (skeep)
    (("" (expand "unsigned")
      ((""
        (case "(LAMBDA (i: below(N)): bv(N - 1 - i)) = fill[N](FALSE)")
        (("1" (replaces -1)
          (("1" (rewrite "bv2nat_fill_F[N]") nil nil)) nil)
         ("2" (decompose-equality) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (unsigned const-decl "nat" unsigned nil)
    (nil application-judgement "above(n)" exp2 nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (bvec0 const-decl "bit" bv nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (bv2nat_fill_F formula-decl nil bv_nat nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (N formal-const-decl "nat" unsigned nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bvec type-eq-decl nil bv nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (fill const-decl "bit" bv nil)
    (FALSE const-decl "bool" booleans nil))
   shostak))
 (unsigned_fill_T 0
  (unsigned_fill_T-1 nil 3726341553
   ("" (skeep)
    (("" (expand "unsigned")
      ((""
        (case "(LAMBDA (i: below(N)): bv(N - 1 - i)) = fill[N](TRUE)")
        (("1" (replaces -1)
          (("1" (rewrite "bv2nat_fill_T[N]") nil nil)) nil)
         ("2" (decompose-equality) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (unsigned const-decl "nat" unsigned nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil) (bvec1 const-decl "bit" bv nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (bv2nat_fill_T formula-decl nil bv_nat nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (N formal-const-decl "nat" unsigned nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bvec type-eq-decl nil bv nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (fill const-decl "bit" bv nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (unsigned_eq0 0
  (unsigned_eq0-1 nil 3726341716
   ("" (skeep)
    (("" (expand "unsigned")
      (("" (rewrite "bv2nat_eq0[N]")
        (("1" (decompose-equality) (("1" (grind) nil nil)) nil)
         ("2" (lemma "bv2nat_eq0[N]")
          (("2" (inst -1 "reverse(bv)")
            (("2" (prop)
              (("1" (use "reverse_inj")
                (("1" (grind) (("1" (decompose-equality) nil nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (unsigned const-decl "nat" unsigned nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (reverse_inj formula-decl nil unsigned nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bvec0 const-decl "bit" bv nil)
    (FALSE const-decl "bool" booleans nil)
    (fill const-decl "bit" bv nil)
    (below type-eq-decl nil nat_types nil)
    (N formal-const-decl "nat" unsigned nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (bv2nat_eq0 formula-decl nil bv_nat nil))
   shostak))
 (unsigned_eq_max 0
  (unsigned_eq_max-1 nil 3726341822
   ("" (skeep)
    (("" (expand "unsigned")
      (("" (rewrite "bv2nat_eq_max[N]")
        (("1" (decompose-equality) (("1" (grind) nil nil)) nil)
         ("2" (lemma "bv2nat_eq_max[N]")
          (("2" (inst -1 "reverse(bv)")
            (("2" (assert)
              (("2" (case "bv = reverse(fill[N](TRUE))")
                (("1" (hide -2 -3 1)
                  (("1" (decompose-equality)
                    (("1" (decompose-equality) (("1" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -2 2 3)
                  (("2" (rewrite "reverse_inj")
                    (("2" (replaces -1)
                      (("2" (decompose-equality) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (unsigned const-decl "nat" unsigned nil)
    (reverse_inj formula-decl nil unsigned nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bvec1 const-decl "bit" bv nil)
    (TRUE const-decl "bool" booleans nil)
    (fill const-decl "bit" bv nil)
    (below type-eq-decl nil nat_types nil)
    (nil application-judgement "above(n)" exp2 nil)
    (N formal-const-decl "nat" unsigned nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (bv2nat_eq_max formula-decl nil bv_nat nil))
   shostak)))

