(modulo
 (modulo_mod_rel 0
  (modulo_mod_rel-1 nil 3725901600
   ("" (skeep :preds? t)
    (("" (split)
      (("1" (expand "mod") (("1" (grind) nil nil)) nil)
       ("2" (grind) nil nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil))
   shostak))
 (modulo_zero 0
  (modulo_zero-1 nil 3725905869
   ("" (skeep :preds? t)
    (("" (grind)
      (("1" (grind)
        (("1" (rewrite "ceiling_int") (("1" (grind) nil nil)) nil))
        nil)
       ("2" (rewrite "ceiling_int") (("2" (grind) nil nil)) nil)
       ("3" (rewrite "floor_int") (("3" (grind) nil nil)) nil)
       ("4" (rewrite "floor_int") (("4" (grind) nil nil)) nil))
      nil))
    nil)
   ((integer? const-decl "bool" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ceiling_int formula-decl nil floor_ceil nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (floor_int formula-decl nil floor_ceil nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil))
   shostak))
 (modulo_notzero 0
  (modulo_notzero-1 nil 3725906210
   ("" (skeep :preds? t)
    (("" (grind)
      (("1" (both-sides "+" "m * ceiling(n / m)" -4)
        (("1" (assert)
          (("1" (div-by -4 "m") (("1" (grind) nil nil)) nil)) nil))
        nil)
       ("2" (both-sides "+" "m * ceiling(n/m)" -4)
        (("2" (assert)
          (("2" (div-by -4 "m") (("2" (grind) nil nil)) nil)) nil))
        nil)
       ("3" (both-sides "+" "m * floor(n/m)" -2)
        (("3" (assert)
          (("3" (div-by -2 "m") (("3" (grind) nil nil)) nil)) nil))
        nil)
       ("4" (both-sides "+" "m * floor(n/m)" -2)
        (("4" (assert)
          (("4" (div-by -2 "m") (("4" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((integer? const-decl "bool" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (divides const-decl "bool" divides nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil))
   shostak))
 (modulo_pos 0
  (modulo_pos-1 nil 3725906041
   ("" (skeep :preds? t)
    (("" (grind)
      (("1" (both-sides "+" "m * ceiling(n / m)" 3)
        (("1" (assert)
          (("1" (div-by 3 "m" -)
            (("1" (use "ceiling_def")
              (("1" (flatten)
                (("1" (case "n / m = ceiling(n / m)")
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (both-sides "+" "m * floor(n / m)" 4)
        (("2" (assert)
          (("2" (div-by 4 "m")
            (("2" (use "floor_def")
              (("2" (flatten)
                (("2" (case "floor(n / m) = n / m")
                  (("1" (hide 1 3 4)
                    (("1" (grind)
                      (("1" (grind)
                        (("1" (swap-rel -1)
                          (("1" (replace -1) (("1" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integer? const-decl "bool" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ceiling_def formula-decl nil floor_ceil nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_div_neg_gt1 formula-decl nil real_props nil)
    (both_sides_plus_gt1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (divides const-decl "bool" divides nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (floor_def formula-decl nil floor_ceil nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (both_sides_div_pos_gt1 formula-decl nil real_props nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil))
   shostak))
 (modulo_neg 0
  (modulo_neg-1 nil 3725907205
   ("" (skeep :preds? t)
    (("" (grind)
      (("1" (both-sides "+" "m * ceiling(n / m)" 3)
        (("1" (assert)
          (("1" (div-by 3 "m")
            (("1" (use "ceiling_def")
              (("1" (flatten)
                (("1" (case "n / m = ceiling(n / m)")
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (both-sides "+" "m *floor(n/m)" 4)
        (("2" (assert)
          (("2" (div-by 4 "m" -)
            (("2" (use "floor_def")
              (("2" (case "floor(n / m) = n / m")
                (("1" (grind)
                  (("1" (swap-rel -1)
                    (("1" (replace -1) (("1" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integer? const-decl "bool" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ceiling_def formula-decl nil floor_ceil nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (both_sides_plus_lt1 formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (divides const-decl "bool" divides nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (floor_def formula-decl nil floor_ceil nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_div_neg_lt1 formula-decl nil real_props nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil))
   shostak))
 (modulo_mod_diff 0
  (modulo_mod_diff-1 nil 3725907692
   ("" (skeep :preds? t)
    (("" (grind)
      (("1" (rewrite "ceiling_int") (("1" (grind) nil nil)) nil)
       ("2" (factor 3)
        (("2" (mult-by 3 "-1" -)
          (("2" (assert)
            (("2" (factor 3)
              (("2" (div-by 3 "m" -)
                (("2" (use "floor_ceiling_nonint")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (rewrite "ceiling_int") (("3" (grind) nil nil)) nil)
       ("4" (mult-by 3 "-1" -)
        (("4" (assert)
          (("4" (factor 3)
            (("4" (div-by 3 "m" +)
              (("4" (use "floor_ceiling_nonint")
                (("4" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (integer? const-decl "bool" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ceiling_int formula-decl nil floor_ceil nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (floor_ceiling_nonint formula-decl nil floor_ceil nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil))
   shostak)))

