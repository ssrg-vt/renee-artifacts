(to_vec_inc
 (mod_signed_TCC1 0
  (mod_signed_TCC1-1 nil 3726508037 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil))
   nil))
 (to_vec_inj 0
  (to_vec_inj-1 nil 3722784430
   ("" (skeep :preds? t)
    (("" (grind)
      (("" (case-insert-fname "nat2bv[len]")
        (("1" (grind) nil nil)
         ("2" (hide 2) (("2" (rewrite "reverse_inj") nil nil)) nil))
        nil))
      nil))
    nil)
   ((to_vec_inc const-decl "bvec[len]" to_vec_inc nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (reverse_inj formula-decl nil unsigned nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil))
   shostak))
 (to_vec_inj_rev 0
  (to_vec_inj_rev-1 nil 3724894899
   ("" (skeep :preds? t)
    (("" (case "x >= 0 AND x < exp2(len)")
      (("1" (case "y >= 0 AND y < exp2(len)")
        (("1" (rewrite "mod_lt_nat")
          (("1" (rewrite "mod_lt_nat") (("1" (grind) nil nil)) nil))
          nil)
         ("2" (rewrite "mod_lt_nat")
          (("2" (expand "to_vec_inc")
            (("2" (replace -1)
              (("2" (replace 1) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (case "y >= 0 AND y < exp2(len)")
        (("1" (expand "to_vec_inc")
          (("1" (replace -1)
            (("1" (case "mod(y, exp2(len)) = y")
              (("1" (replace -1)
                (("1" (replace 1) (("1" (assert) nil nil)) nil)) nil)
               ("2" (use "mod_lt_nat")
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (expand "to_vec_inc")
          (("2" (replace 1)
            (("2" (replace 2) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mod_lt_nat formula-decl nil mod nil)
    (nil application-judgement "below(m)" mod nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (to_vec_inc const-decl "bvec[len]" to_vec_inc nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (y skolem-const-decl "int" to_vec_inc nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (to_vec_inv 0
  (to_vec_inv-1 nil 3722711748
   ("" (skeep :preds? t)
    (("" (expand "to_vec_inc")
      (("" (rewrite "unsigned_lowerbound")
        (("" (rewrite "unsigned_upperbound")
          (("" (expand "unsigned")
            ((""
              (case "nat2bv[len]
             (bv2nat(LAMBDA (i: below(len)): bv(-1 - i + len))) = (LAMBDA (i: below(len)): bv(-1 - i + len))")
              (("1" (replaces -1)
                (("1" (grind) (("1" (decompose-equality) nil nil))
                  nil))
                nil)
               ("2" (hide 2) (("2" (rewrite "nat2bv_inv") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (to_vec_inc const-decl "bvec[len]" to_vec_inc nil)
    (unsigned_upperbound formula-decl nil unsigned nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (nat2bv_inv formula-decl nil bv_nat nil)
    (unsigned const-decl "nat" unsigned nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (unsigned_lowerbound formula-decl nil unsigned nil))
   shostak))
 (to_vec_inv_ext 0
  (to_vec_inv_ext-1 nil 3722799515
   ("" (skeep :preds? t)
    (("" (case "i = 0")
      (("1" (replace -1)
        (("1" (assert) (("1" (rewrite "to_vec_inv") nil nil)) nil))
        nil)
       ("2" (case "i > 0")
        (("1" (expand "to_vec_inc")
          (("1" (expand "unsigned")
            (("1"
              (case "bv2nat(LAMBDA (i: below(len)): bv(-1 - i + len)) + i * exp2(len)
          >= 0
          AND
          bv2nat(LAMBDA (i: below(len)): bv(-1 - i + len)) + i * exp2(len)
           < exp2(len)")
              (("1" (replace -1)
                (("1" (flatten)
                  (("1" (case "i * exp2(len) >= exp2(len)")
                    (("1" (hide 2) (("1" (grind) nil nil)) nil)
                     ("2" (hide 3)
                      (("2" (hide -1 -2)
                        (("2" (grind)
                          (("2" (div-by 1 "exp2(len)")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (replace 1)
                (("2"
                  (case-replace
                   "mod(bv2nat(LAMBDA (i: below(len)): bv(-1 - i + len)) +
                   i * exp2(len),
                  exp2(len)) = bv2nat(LAMBDA (i: below(len)): bv(-1 - i + len))")
                  (("1" (rewrite "nat2bv_inv")
                    (("1" (hide -1 1)
                      (("1" (grind)
                        (("1" (hide 1)
                          (("1" (decompose-equality) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2 3 4)
                    (("2"
                      (lemma "mod_sum_pos"
                       ("i"
                        "bv2nat(LAMBDA (i: below(len)): bv(-1 - i + len))"
                        "k" "i" "m" "exp2(len)"))
                      (("2" (replace -1)
                        (("2" (use "mod_lt_nat")
                          (("2" (hide -2) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "to_vec_inc")
          (("2" (expand "unsigned")
            (("2"
              (case "bv2nat(LAMBDA (i: below(len)): bv(-1 - i + len)) + i * exp2(len)
          >= 0
          AND
          bv2nat(LAMBDA (i: below(len)): bv(-1 - i + len)) + i * exp2(len)
           < exp2(len)")
              (("1" (replace -1)
                (("1" (case "i * exp2(len) <= -exp2(len)")
                  (("1" (flatten)
                    (("1" (hide 3) (("1" (assert) nil nil)) nil)) nil)
                   ("2" (hide -1 4)
                    (("2" (div-by 1 "exp2(len)")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (replaces 1)
                (("2"
                  (case-replace
                   "mod(bv2nat(LAMBDA (i: below(len)): bv(-1 - i + len)) +
                   i * exp2(len),
                  exp2(len)) = bv2nat(LAMBDA (i: below(len)): bv(-1 - i + len))")
                  (("1" (replaces -1)
                    (("1" (rewrite "nat2bv_inv")
                      (("1" (assert)
                        (("1" (hide 1 2)
                          (("1" (apply-extensionality) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 4)
                    (("2" (rewrite "mod_sum")
                      (("2" (rewrite "mod_lt_nat")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (to_vec_inv formula-decl nil to_vec_inc nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (mod_sum formula-decl nil mod nil)
    (TRUE const-decl "bool" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (to_vec_inc const-decl "bvec[len]" to_vec_inc nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (div_simp formula-decl nil real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_div_pos_ge1 formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (nil application-judgement "below(m)" mod nil)
    (nat2bv_inv formula-decl nil bv_nat nil)
    (mod_sum_pos formula-decl nil mod nil)
    (mod_lt_nat formula-decl nil mod nil)
    (unsigned const-decl "nat" unsigned nil)
    (> const-decl "bool" reals nil))
   shostak))
 (to_vec_inv_extension 0
  (to_vec_inv_extension-1 nil 3722876893
   ("" (skeep :preds? t)
    (("" (case "j = 0")
      (("1" (replace -1) (("1" (assert) nil nil)) nil)
       ("2" (expand "to_vec_inc")
        (("2" (case "i >= 0 AND i < exp2(len)")
          (("1" (replace -1)
            (("1"
              (case "j * exp2(len) + i >= 0 AND j * exp2(len) + i < exp2(len)")
              (("1" (replace -1)
                (("1" (hide 2)
                  (("1" (flatten)
                    (("1" (grind)
                      (("1" (case "j > 0")
                        (("1" (both-sides "+" "j * exp2(len)" -4)
                          (("1" (assert)
                            (("1" (case "j * exp2(len) > exp2(len)")
                              (("1" (assert) nil nil)
                               ("2"
                                (div-by 1 "exp2(len)")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "j * exp2(len) < - exp2(len)")
                          (("1" (both-sides "-" "j * exp2(len)" -5)
                            (("1" (assert) nil nil)) nil)
                           ("2" (div-by 1 "exp2(len)")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (replace 1)
                (("2" (case "mod(j * exp2(len) + i, exp2(len)) = i")
                  (("1" (replace -1) (("1" (propax) nil nil)) nil)
                   ("2" (hide 4)
                    (("2"
                      (lemma "mod_sum"
                       ("i" "i" "k" "j" "j" "exp2(len)"))
                      (("2" (replace -1)
                        (("2"
                          (lemma "mod_lt_nat"
                           ("n" "i" "m" "exp2(len)"))
                          (("1" (assert) nil nil)
                           ("2" (flatten) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (replace 1)
            (("2"
              (case "j * exp2(len) + i >= 0 AND j * exp2(len) + i < exp2(len)")
              (("1" (replace -1)
                (("1" (case "mod(i, exp2(len)) = j * exp2(len) + i")
                  (("1" (replace -1) (("1" (propax) nil nil)) nil)
                   ("2" (hide 4)
                    (("2"
                      (case "j * exp2(len) + i = mod(j * exp2(len) + i, exp2(len))")
                      (("1" (replace -1)
                        (("1" (swap-rel 1)
                          (("1"
                            (lemma "mod_sum"
                             ("i" "i" "k" "j" "j" "exp2(len)"))
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (swap-rel 1)
                        (("2" (rewrite "mod_lt_nat") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (replace 1)
                (("2"
                  (case "mod(j * exp2(len) + i, exp2(len)) = mod(i, exp2(len))")
                  (("1" (replace -1) (("1" (propax) nil nil)) nil)
                   ("2" (hide 5)
                    (("2"
                      (lemma "mod_sum"
                       ("i" "i" "k" "j" "j" "exp2(len)"))
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nil application-judgement "above(n)" exp2 nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (both_sides_minus_lt1 formula-decl nil real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (divides const-decl "bool" divides nil)
    (both_sides_plus_ge1 formula-decl nil real_props nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (divides const-decl "bool" divides nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (div_simp formula-decl nil real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_div_pos_gt1 formula-decl nil real_props nil)
    (nil application-judgement "below(m)" mod nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (mod_sum formula-decl nil mod nil)
    (mod_lt_nat formula-decl nil mod nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (to_vec_inc const-decl "bvec[len]" to_vec_inc nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (to_vec_surj 0
  (to_vec_surj-1 nil 3722785066
   ("" (skeep :preds? t)
    (("" (inst 1 "unsigned[len](y)")
      (("1" (rewrite "to_vec_inv") nil nil)
       ("2" (lemma "unsigned_upperbound" ("bv" "y"))
        (("2" (propax) nil nil)) nil))
      nil))
    nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (y skolem-const-decl "bvec[len]" to_vec_inc nil)
    (unsigned const-decl "nat" unsigned nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (len skolem-const-decl "nat" to_vec_inc nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (to_vec_inv formula-decl nil to_vec_inc nil)
    (unsigned_upperbound formula-decl nil unsigned nil))
   shostak))
 (unsigned_inv 0
  (unsigned_inv-1 nil 3726453770
   ("" (skeep)
    (("" (expand "to_vec_inc")
      (("" (expand "unsigned")
        (("" (case "val >= 0 AND val < exp2(len)")
          (("1" (replace -1)
            (("1"
              (case "(LAMBDA (i_1: below(len)): nat2bv[len](val)(i_1)) = nat2bv[len](val)")
              (("1" (replaces -1)
                (("1" (rewrite "bv2nat_inv")
                  (("1" (rewrite "mod_lt_nat") nil nil)) nil))
                nil)
               ("2" (decompose-equality) (("2" (grind) nil nil)) nil)
               ("3" (propax) nil nil) ("4" (grind) nil nil))
              nil))
            nil)
           ("2" (replace 1)
            (("2"
              (case "(LAMBDA (i_1: below(len)): nat2bv[len](mod(val, exp2(len)))(i_1)) = nat2bv[len](mod(val, exp2(len)))")
              (("1" (replaces -1)
                (("1" (rewrite "bv2nat_inv") nil nil)) nil)
               ("2" (decompose-equality) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (to_vec_inc const-decl "bvec[len]" to_vec_inc nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (bvec type-eq-decl nil bv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bv2nat_inv formula-decl nil bv_nat nil)
    (nil application-judgement "below(m)" mod nil)
    (mod_lt_nat formula-decl nil mod nil)
    (TRUE const-decl "bool" booleans nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (val skolem-const-decl "int" to_vec_inc nil)
    (len skolem-const-decl "nat" to_vec_inc nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (unsigned const-decl "nat" unsigned nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (unsigned_inv_ext_TCC1 0
  (unsigned_inv_ext_TCC1-1 nil 3726453919 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (unsigned_inv_ext 0
  (unsigned_inv_ext-1 nil 3726453920
   ("" (skeep)
    ((""
      (case "(LAMBDA (i: below(len)): nat2bv[len](val)(len - 1 - i)) = (to_vec_inc(len, val))")
      (("1" (replaces -1) (("1" (rewrite "unsigned_inv") nil nil)) nil)
       ("2" (grind) nil nil) ("3" (grind) nil nil))
      nil))
    nil)
   ((to_vec_inc const-decl "bvec[len]" to_vec_inc nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (bvec type-eq-decl nil bv nil) (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (unsigned_inv formula-decl nil to_vec_inc nil)
    (TRUE const-decl "bool" booleans nil)
    (unsigned const-decl "nat" unsigned nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nil application-judgement "below(m)" mod nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak)))

