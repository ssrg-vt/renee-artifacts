("quot" quot quot_lemma 0 (quot_lemma-1 nil 3721507227 ("" (skeep) (("" (lemma "quot") (("" (grind) (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil)) nil)) nil) nil shostak))("common_lemmas" common_lemmas bv2nat_scope 0 (bv2nat_scope-1 nil 3721753155 ("" (skeep) (("" (split) (("1" (grind) nil nil) ("2" (grind) (("2" (induct-and-simplify "N") (("2" (postpone) nil nil)) nil)) nil)) nil)) nil) nil shostak))("extz" extz extz_TCC6 0 (extz_TCC6-1 nil 3722001822 ("" (subtype-tcc) nil nil) nil nil))("extz" extz extz_TCC5 0 (extz_TCC5-1 nil 3722001822 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))("bitwise_shift" bitwise_shift bitwise_leftshift_TCC1 0 (bitwise_leftshift_TCC1-1 nil 3722002683 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("bitwise_shift" bitwise_shift bitwise_leftshift_TCC2 0 (bitwise_leftshift_TCC2-1 nil 3722002683 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("bitwise_shift" bitwise_shift bitwise_leftshift_TCC3 0 (bitwise_leftshift_TCC3-1 nil 3722002683 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))("bitwise_shift" bitwise_shift bitwise_rightshift_TCC1 0 (bitwise_rightshift_TCC1-1 nil 3722002683 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))("bitwise_shift" bitwise_shift bitwise_rightshift_TCC2 0 (bitwise_rightshift_TCC2-1 nil 3722002683 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))("extz" extz extz_TCC4 0 (extz_TCC4-1 nil 3722001822 ("" (subtype-tcc) nil nil) nil nil))("exts" exts exts_TCC6 0 (exts_TCC6-1 nil 3722006140 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) nil))("exts" exts exts_TCC5 0 (exts_TCC5-1 nil 3722006032 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))("add_signed" add_signed add_vec_vec_range_signed_TCC1 0 (add_vec_vec_range_signed_TCC1-1 nil 3722007599 ("" (subtype-tcc) nil nil) nil nil))("add_signed" add_signed add_vec_range_signed_TCC1 0 (add_vec_range_signed_TCC1-1 nil 3722007599 ("" (subtype-tcc) nil nil) nil nil))("minus" minus minus_vec_TCC1 0 (minus_vec_TCC1-1 nil 3722011034 ("" (subtype-tcc) nil nil) nil nil))("minus" minus minus_vec_vec_range_TCC1 0 (minus_vec_vec_range_TCC1-1 nil 3722011034 ("" (subtype-tcc) nil nil) nil nil))("minus" minus minus_vec_range_range_TCC1 0 (minus_vec_range_range_TCC1-1 nil 3722011034 ("" (subtype-tcc) nil nil) nil nil))("minus" minus minus_range_vec_range_TCC1 0 (minus_range_vec_range_TCC1-1 nil 3722011034 ("" (subtype-tcc) nil nil) nil nil))("add" add add_vec_vec_range_TCC1 0 (add_vec_vec_range_TCC1-1 nil 3721762585 ("" (skeep :preds? T) (("" (lemma "bv2nat_scope2") (("" (inst?) (("" (lemma "bv2nat_scope2") (("" (inst -1 "N" "bv2") (("" (grind-reals) (("" (add-formulas -1 -2) (("" (lemma "exp2_n") (("" (inst -1 "N") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((bv2nat_scope2 formula-decl nil common_lemmas nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (exp2_n formula-decl nil exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (N formal-const-decl "nat" add nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) nil))("minus_signed" minus_signed minus_vec_signed_TCC1 0 (minus_vec_signed_TCC1-1 nil 3722012336 ("" (subtype-tcc) nil nil) nil nil))("minus_signed" minus_signed minus_vec_range_signed_TCC1 0 (minus_vec_range_signed_TCC1-1 nil 3722012336 ("" (subtype-tcc) nil nil) nil nil))("minus_signed" minus_signed minus_range_vec_signed_TCC1 0 (minus_range_vec_signed_TCC1-1 nil 3722012336 ("" (subtype-tcc) nil nil) nil nil))("multiply" multiply mult_vec_range_TCC1 0 (mult_vec_range_TCC1-1 nil 3721747425 ("" (subtype-tcc) nil nil) nil nil))("multiply" multiply times_TCC1 0 (times_TCC1-1 nil 3722013667 ("" (subtype-tcc) nil nil) nil nil))("multiply" multiply mult_overflow_vec_TCC4 0 (mult_overflow_vec_TCC4-1 nil 3722014564 ("" (subtype-tcc) nil nil) nil nil))("multiply" multiply mult_overflow_vec_TCC3 0 (mult_overflow_vec_TCC3-1 nil 3722014564 ("" (subtype-tcc) nil nil) nil nil))("common_lemmas" common_lemmas lt_transitive 0 (lt_transitive-1 nil 3721758680 ("" (skeep) (("" (grind) nil nil)) nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) shostak))("multiply_signed" multiply_signed mult_overflow_vec_signed_TCC3 0 (mult_overflow_vec_signed_TCC3-1 nil 3722015950 ("" (subtype-tcc) nil nil) nil nil))("lt_vec_signed" lt_vec_signed lt_vec_signed_TCC1 0 (lt_vec_signed_TCC1-1 nil 3721582149 ("" (subtype-tcc) nil nil) nil nil))("gt_vec_signed" gt_vec_signed gt_vec_signed_TCC1 0 (gt_vec_signed_TCC1-1 nil 3721582597 ("" (subtype-tcc) nil nil) nil nil))("gteq_vec_signed" gteq_vec_signed gteq_vec_signed_TCC1 0 (gteq_vec_signed_TCC1-1 nil 3721584116 ("" (subtype-tcc) nil nil) nil nil))("signed" signed signed_TCC1 0 (signed_TCC1-1 nil 3721584640 ("" (subtype-tcc) nil nil) nil nil))("to_vec_inc" to_vec_inc to_vec_inc_TCC1 0 (to_vec_inc_TCC1-1 nil 3721586478 ("" (subtype-tcc) nil nil) nil nil))("to_vec_inc" to_vec_inc to_vec_inc_TCC1 0 (to_vec_inc_TCC1-1 nil 3721586478 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil))("modulo" modulo mod_vec_range_TCC2 0 (mod_vec_range_TCC2-1 nil 3722019275 ("" (subtype-tcc) nil nil) nil nil))("modulo" modulo mod_vec_TCC2 0 (mod_vec_TCC2-1 nil 3721589752 ("" (subtype-tcc) nil nil) nil nil))("quot" quot quot_vec_TCC2 0 (quot_vec_TCC2-1 nil 3722097818 ("" (subtype-tcc) nil nil) nil nil))("quot" quot quot_overflow_vec_TCC3 0 (quot_overflow_vec_TCC3-1 nil 3722108880 ("" (subtype-tcc) nil nil) nil nil))("modulo" modulo mod_vec_range_TCC3 0 (mod_vec_range_TCC3-1 nil 3722107761 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (N formal-const-decl "nat" modulo nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (nil application-judgement "below(m)" mod nil) (/= const-decl "boolean" notequal nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (nil application-judgement "above(n)" exp2 nil) (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil)) nil))("modulo" modulo mod_vec_TCC3 0 (mod_vec_TCC3-1 nil 3722107761 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (N formal-const-decl "nat" modulo nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (/= const-decl "boolean" notequal nil)) nil))("quot_signed" quot_signed quot_signed_TCC1 0 (quot_signed_TCC1-1 nil 3722123141 ("" (subtype-tcc) nil nil) nil nil))("quot_signed" quot_signed quot_vec_signed_TCC7 0 (quot_vec_signed_TCC7-1 nil 3722123648 ("" (subtype-tcc) nil nil) nil nil))("quot_signed" quot_signed quot_overflow_vec_signed_TCC5 0 (quot_overflow_vec_signed_TCC5-1 nil 3722123648 ("" (subtype-tcc) nil nil) nil nil))("quot_signed" quot_signed quot_overflow_vec_signed_TCC4 0 (quot_overflow_vec_signed_TCC4-1 nil 3722123648 ("" (subtype-tcc) nil nil) nil nil))("quot_signed" quot_signed quot_vec_signed_TCC6 0 (quot_vec_signed_TCC6-1 nil 3722123648 ("" (subtype-tcc) nil nil) nil nil))("quot_signed" quot_signed quot_vec_signed_TCC5 0 (quot_vec_signed_TCC5-1 nil 3722123648 ("" (subtype-tcc) nil nil) nil nil))("quot_signed" quot_signed div_sign 0 (div_sign-1 nil 3722129424 ("" (skeep :preds? t) (("" (grind-reals) (("" (expand "div") (("" (grind-reals) (("" (grind) (("" (div-by -2 "m") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (both_sides_div_pos_lt1 formula-decl nil real_props nil) (nzint nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (div const-decl "integer" div "bitvectors/") (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)) shostak))("quot_signed" quot_signed div_sign_TCC1 0 (div_sign_TCC1-1 nil 3722129422 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("common_lemmas" common_lemmas bv2nat_mult_scope 0 (bv2nat_mult_scope-1 nil 3722014856 ("" (skeep :preds? t) (("" (lemma "bv2nat_scope2") (("" (inst?) (("" (lemma "bv2nat_scope2") (("" (inst -1 "n" "bv2") (("" (grind-reals) (("" (mult-ineq -1 -2 (+ +)) (("" (grind-reals) (("" (lemma "exp2_sum") (("" (inst -1 "n" "n") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((bv2nat_scope2 formula-decl nil common_lemmas nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nonzero_times1 formula-decl nil real_props nil) (exp2_sum formula-decl nil exp2 nil) (lt_times_lt_pos2 formula-decl nil real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (lt_times_lt_any1 formula-decl nil extra_real_props nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) shostak))("common_lemmas" common_lemmas bv2nat_scope2 0 (bv2nat_scope2-1 nil 3721753845 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (bv2nat_rec def-decl "nat" bv_nat nil) (nat_induction formula-decl nil naturalnumbers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) shostak))("common_lemmas" common_lemmas bv2nat_scope1 0 (bv2nat_scope1-1 nil 3721753832 ("" (skeep :preds? T) (("" (grind) nil nil)) nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil)) shostak))("test_lemmas" test_lemmas testbvec1_TCC1 0 (testbvec1_TCC1-1 nil 3721762245 ("" (cond-coverage-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("test_lemmas" test_lemmas bitwise_not_bit_test 0 (bitwise_not_bit_test-1 nil 3722357101 ("" (propax) nil nil) nil shostak))("test_lemmas" test_lemmas bv2nat_test 0 (bv2nat_test-1 nil 3722456237 ("" (grind) (("" (postpone) nil nil)) nil) nil shostak))("test_lemmas" test_lemmas duplicate_bits_test1_TCC1 0 (duplicate_bits_test1_TCC1-1 nil 3722463502 ("" (subtype-tcc) nil nil) nil nil))("extz" extz extz_TCC6 0 (extz_TCC6-1 nil 3722465693 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) nil))("test_lemmas" test_lemmas bitwise_rotate_test3_TCC1 0 (bitwise_rotate_test3_TCC1-1 nil 3722462370 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas" test_lemmas length_test_TCC1 0 (length_test_TCC1-1 nil 3722468122 ("" (subtype-tcc) nil nil) nil nil))("unsigned" unsigned unsigned_rec_TCC1 0 (unsigned_rec_TCC1-1 nil 3722470590 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" unsigned nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))("unsigned" unsigned unsigned_rec_TCC2 0 (unsigned_rec_TCC2-1 nil 3722470590 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" unsigned nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))("unsigned" unsigned unsigned_rec_TCC3 0 (unsigned_rec_TCC3-1 nil 3722470590 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" unsigned nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))("unsigned" unsigned unsigned_rec_TCC4 0 (unsigned_rec_TCC4-1 nil 3722470590 ("" (termination-tcc) nil nil) nil nil))("unsigned" unsigned unsigned_rec_TCC5 0 (unsigned_rec_TCC5-1 nil 3722470590 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" unsigned nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (int_plus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (^ const-decl "bit" bv nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil)) nil))("unsigned" unsigned unsigned_TCC1 0 (unsigned_TCC1-1 nil 3722470590 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))("unsigned" unsigned unsigned_rec_inj 0 (unsigned_rec_inj-1 nil 3722472912 ("" (induct-and-simplify "n") (("1" (grind) (("1" (grind) (("1" (postpone) nil nil)) nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil)) nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil) ("5" (postpone) nil nil)) nil) nil shostak))("unsigned" unsigned unsigned_inj 0 (unsigned_inj-1 nil 3722471933 ("" (grind) (("" (postpone) nil nil)) nil) nil shostak))("unsigned" unsigned unsigned_bij 0 (unsigned_bij-1 nil 3722471841 ("" (grind) (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil) nil shostak))("unsigned" unsigned to_vec_unsigned_TCC1 0 (to_vec_unsigned_TCC1-1 nil 3722471211 ("" (existence-tcc) nil nil) nil nil))("to_vec_inc" to_vec_inc to_vec_inc_TCC8 0 (to_vec_inc_TCC8-1 nil 3722475866 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nil application-judgement "above(n)" exp2 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))("to_vec_inc" to_vec_inc to_vec_inc_TCC7 0 (to_vec_inc_TCC7-1 nil 3722475866 ("" (subtype-tcc) nil nil) nil nil))("to_vec_inc" to_vec_inc to_vec_inc_TCC6 0 (to_vec_inc_TCC6-1 nil 3722475866 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("to_vec_inc" to_vec_inc to_vec_inc_TCC5 0 (to_vec_inc_TCC5-1 nil 3722475866 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("to_vec_inc" to_vec_inc to_vec_inc_TCC4 0 (to_vec_inc_TCC4-1 nil 3722475866 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minint const-decl "int" bv_int_defs nil) (maxint const-decl "int" bv_int_defs nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("to_vec_inc" to_vec_inc to_vec_inc_TCC3 0 (to_vec_inc_TCC3-1 nil 3722475866 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("to_vec_inc" to_vec_inc to_vec_inc_TCC2 0 (to_vec_inc_TCC2-1 nil 3722475866 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minint const-decl "int" bv_int_defs nil) (maxint const-decl "int" bv_int_defs nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("test_lemmas" test_lemmas to_vec_inc_test1_TCC5 0 (to_vec_inc_test1_TCC5-1 nil 3722476602 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas" test_lemmas to_vec_inc_test1_TCC4 0 (to_vec_inc_test1_TCC4-1 nil 3722476602 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas" test_lemmas test1 0 (test1-1 nil 3722478244 ("" (grind) nil nil) ((nil application-judgement "below(m)" mod nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_even_is_even application-judgement "even_int" integers nil) (even_minus_even_is_even application-judgement "even_int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil)) shostak))("test_lemmas" test_lemmas to_vec_inc_test2_TCC5 0 (to_vec_inc_test2_TCC5-1 nil 3722480592 ("" (subtype-tcc) nil nil) nil nil))("lt_vec" lt_vec IMP_signed_TCC1 0 (IMP_signed_TCC1-1 nil 3722556142 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas" test_lemmas gt_range_test 0 (gt_range_test-1 nil 3722556830 ("" (grind) nil nil) ((real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) shostak))("test_lemmas" test_lemmas lt_range_test 0 (lt_range_test-1 nil 3722556545 ("" (grind) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) shostak))("lteq_vec" lteq_vec IMP_signed_TCC1 0 (IMP_signed_TCC1-1 nil 3722557107 ("" (subtype-tcc) nil nil) nil nil))("gteq_vec" gteq_vec IMP_signed_TCC1 0 (IMP_signed_TCC1-1 nil 3722557651 ("" (subtype-tcc) nil nil) nil nil))("to_vec_inc" to_vec_inc to_vec_inc_TCC1 0 (to_vec_inc_TCC1-1 nil 3721586478 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("to_vec_dec" to_vec_dec to_vec_dec_TCC1 0 (to_vec_dec_TCC1-1 nil 3722476416 ("" (subtype-tcc) nil nil) nil nil))("to_vec_dec" to_vec_dec to_vec_dec_TCC2 0 (to_vec_dec_TCC2-1 nil 3722476416 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minint const-decl "int" bv_int_defs nil) (maxint const-decl "int" bv_int_defs nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("to_vec_dec" to_vec_dec to_vec_dec_TCC3 0 (to_vec_dec_TCC3-1 nil 3722476416 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("add" add add_vec_TCC2 0 (add_vec_TCC2-1 nil 3722610955 ("" (subtype-tcc) nil nil) ((int_minus_int_is_int application-judgement "int" integers nil)) nil))("add" add add_overflow_vec_TCC1 0 (add_overflow_vec_TCC1-1 nil 3721762585 ("" (skeep :preds? T) (("" (split) (("1" (grind-reals) nil nil) ("2" (grind-reals) nil nil)) nil)) nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil)) nil))("add_signed" add_signed add_overflow_vec_signed_TCC1 0 (add_overflow_vec_signed_TCC1-1 nil 3722007599 ("" (skeep :preds? T) (("" (skeep) (("" (split) (("1" (grind-reals) nil nil) ("2" (grind-reals) nil nil)) nil)) nil)) nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))("add_signed" add_signed add_overflow_vec_bit_signed_TCC1 0 (add_overflow_vec_bit_signed_TCC1-1 nil 3722007599 ("" (skeep :preds? T) (("" (skeep :preds? T) (("" (skeep) (("" (split) (("1" (grind-reals) nil nil) ("2" (grind-reals) nil nil)) nil)) nil)) nil)) nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_plus_int_is_int application-judgement "int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) nil))("modulo" modulo mod_vec_range_TCC2 0 (mod_vec_range_TCC2-1 nil 3722107761 ("" (skeep :preds? t) (("" (grind-reals) (("1" (lemma "mod_pos") (("1" (inst -1 "bv2nat[N](bv)" "mod(m, exp2(N))") (("1" (grind-reals) nil nil)) nil)) nil) ("2" (lemma "mod_pos") (("2" (inst -1 "bv2nat[N](bv)" "mod(m, exp2(N))") (("2" (grind-reals) nil nil)) nil)) nil)) nil)) nil) ((TRUE const-decl "bool" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (N formal-const-decl "nat" modulo nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (/= const-decl "boolean" notequal nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (mod_pos formula-decl nil mod nil) (nil application-judgement "above(n)" exp2 nil) (nil application-judgement "below(m)" mod nil)) nil))("quot" quot quot_overflow_vec_TCC2 0 (quot_overflow_vec_TCC2-1 nil 3722097818 ("" (skeep :preds? t) (("" (skeep) (("" (grind-reals) (("1" (lemma "div_max") (("1" (inst -1 "bv2nat(bv2)" "bv2nat(bv1)") (("1" (expand "div") (("1" (grind-reals) nil nil)) nil)) nil)) nil) ("2" (lemma "div_max") (("2" (inst -1 "bv2nat(bv2)" "bv2nat(bv1)") (("2" (expand "div") (("2" (grind-reals) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((div_max formula-decl nil div "bitvectors/") (div const-decl "integer" div "bitvectors/") (N formal-const-decl "nat" quot nil) (/= const-decl "boolean" notequal nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (M formal-const-decl "nat" quot nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (div_mult_pos_le2 formula-decl nil real_props nil) (div_mult_pos_lt1 formula-decl nil real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (int_plus_int_is_int application-judgement "int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil)) nil))("quot" quot quot_overflow_vec_TCC1 0 (quot_overflow_vec_TCC1-1 nil 3722097818 ("" (skeep :preds? t) (("" (skeep) (("" (lemma "div_TCC1") (("" (inst -1 "bv2nat(bv2)" "bv2nat(bv1)") (("1" (grind-reals) (("1" (expand "div") (("1" (propax) nil nil)) nil)) nil) ("2" (grind-reals) nil nil)) nil)) nil)) nil)) nil) ((real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (bv2 skolem-const-decl "{bv: bvec[M] | bv2nat(bv) /= 0}" quot nil) (/= const-decl "boolean" notequal nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (M formal-const-decl "nat" quot nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (> const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (N formal-const-decl "nat" quot nil) (div const-decl "integer" div "bitvectors/") (div_mult_pos_le2 formula-decl nil real_props nil) (div_mult_pos_lt1 formula-decl nil real_props nil) (nil application-judgement "above(n)" exp2 nil) (int_plus_int_is_int application-judgement "int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "nat" div "bitvectors/") (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (TRUE const-decl "bool" booleans nil) (div_TCC1 judgement-tcc nil div "bitvectors/")) nil))("test_lemmas" test_lemmas to_vec_inc_test5_TCC5 0 (to_vec_inc_test5_TCC5-1 nil 3722481219 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas" test_lemmas to_vec_inc_test5_TCC4 0 (to_vec_inc_test5_TCC4-1 nil 3722478221 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas" test_lemmas to_vec_inc_test4_TCC4 0 (to_vec_inc_test4_TCC4-1 nil 3722478221 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas" test_lemmas to_vec_inc_test4_TCC3 0 (to_vec_inc_test4_TCC3-1 nil 3722478221 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas" test_lemmas to_vec_inc_test3_TCC4 0 (to_vec_inc_test3_TCC4-1 nil 3722480592 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas" test_lemmas to_vec_inc_test2_TCC4 0 (to_vec_inc_test2_TCC4-1 nil 3722478388 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas" test_lemmas to_vec_inc_test2_TCC3 0 (to_vec_inc_test2_TCC3-1 nil 3722478388 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas" test_lemmas to_vec_inc_test1_TCC4 0 (to_vec_inc_test1_TCC4-1 nil 3722480592 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas" test_lemmas to_vec_inc_test5_TCC3 0 (to_vec_inc_test5_TCC3-1 nil 3722478221 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas" test_lemmas to_vec_inc_test3_TCC3 0 (to_vec_inc_test3_TCC3-1 nil 3722478221 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas" test_lemmas to_vec_inc_test1_TCC3 0 (to_vec_inc_test1_TCC3-1 nil 3722476602 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas" test_lemmas add_vec_bit_test2_TCC5 0 (add_vec_bit_test2_TCC5-1 nil 3722625187 ("" (subtype-tcc) nil nil) ((bvec0 const-decl "bit" bv nil)) nil))("test_lemmas" test_lemmas add_vec_bit_test2_TCC4 0 (add_vec_bit_test2_TCC4-1 nil 3722625187 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas" test_lemmas add_vec_bit_test2_TCC3 0 (add_vec_bit_test2_TCC3-1 nil 3722622575 ("" (subtype-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (bvec1 const-decl "bit" bv nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("test_lemmas" test_lemmas add_vec_bit_test2_TCC2 0 (add_vec_bit_test2_TCC2-1 nil 3722622575 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas" test_lemmas add_vec_bit_test2_TCC1 0 (add_vec_bit_test2_TCC1-1 nil 3722622575 ("" (subtype-tcc) nil nil) ((bvec1 const-decl "bit" bv nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("test_lemmas" test_lemmas add_vec_bit_test1_TCC6 0 (add_vec_bit_test1_TCC6-1 nil 3722625187 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas" test_lemmas add_vec_bit_test1_TCC5 0 (add_vec_bit_test1_TCC5-1 nil 3722625187 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas" test_lemmas add_vec_bit_test1_TCC4 0 (add_vec_bit_test1_TCC4-1 nil 3722622575 ("" (subtype-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (bvec0 const-decl "bit" bv nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("test_lemmas" test_lemmas add_vec_bit_test1_TCC3 0 (add_vec_bit_test1_TCC3-1 nil 3722622575 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas" test_lemmas add_vec_bit_test1_TCC2 0 (add_vec_bit_test1_TCC2-1 nil 3722622575 ("" (subtype-tcc) nil nil) ((bvec0 const-decl "bit" bv nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("test_lemmas" test_lemmas add_vec_bit_test1_TCC1 0 (add_vec_bit_test1_TCC1-1 nil 3722622575 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas" test_lemmas slice_raw_test_TCC1 0 (slice_raw_test_TCC1-1 nil 3722628341 ("" (subtype-tcc) nil nil) nil nil))("unsigned" unsigned unsigned_reverse 0 (unsigned_reverse-1 nil 3722702975 ("" (skeep :preds? t) (("" (expand "unsigned") (("" (grind) (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil)) nil)) nil) nil shostak))("unsigned" unsigned unsigned_bij 0 (unsigned_bij-1 nil 3722704433 ("" (expand "bijective?") (("" (prop) (("1" (expand "injective?") (("1" (skosimp*) (("1" (rewrite "unsigned_inj") nil nil)) nil)) nil) ("2" (expand "surjective?") (("2" (skosimp*) (("2" (lemma "unsigned_surj" ("y" "y!1")) (("1" (propax) nil nil) ("2" (typepred "y!1") (("2" (hide 2) (("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("unsigned" unsigned unsigned_min 0 (unsigned_min-1 nil 3722705646 ("" (skeep) (("" (expand "unsigned") (("" (grind) nil nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (unsigned const-decl "nat" unsigned nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil)) shostak))("to_vec_inc" to_vec_inc to_vec_inc_surj 0 (to_vec_inc_surj-1 nil 3722707201 ("" (skeep :preds? t) (("" (expand "to_vec_inc") (("" (case "nat2bv[len](x) = nat2bv[len](y)") (("1" (hide -5) (("1" (case "bv2nat(nat2bv[len](x)) = bv2nat(nat2bv[len](y))") (("1" (case "bv2nat(nat2bv[len](x)) = x") (("1" (replaces -1) (("1" (case "bv2nat(nat2bv[len](y)) = y") (("1" (replaces -1) nil nil) ("2" (hide -1 -2 -3 -4 2) (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 -5 2) (("2" (assert) nil nil)) nil)) nil) ("2" (hide -2 -3 -4 2) (("2" (grind) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (use "reverse_inj" ("x" "nat2bv[len](x)" "y" "nat2bv[len](y)")) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ((nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (reverse_inj formula-decl nil unsigned nil) (TRUE const-decl "bool" booleans nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (= const-decl "[T, T -> boolean]" equalities nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil)) shostak))("signed" signed signed_TCC2 0 (signed_TCC2-1 nil 3722478388 ("" (subtype-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("eq_vec" eq_vec eq_range_vec_TCC1 0 (eq_range_vec_TCC1-1 nil 3722554604 ("" (subtype-tcc) nil nil) ((int_minus_int_is_int application-judgement "int" integers nil)) nil))("neq_vec" neq_vec neq_range_vec_TCC1 0 (neq_range_vec_TCC1-1 nil 3722555389 ("" (subtype-tcc) nil nil) ((int_minus_int_is_int application-judgement "int" integers nil)) nil))("lt_vec" lt_vec lt_vec_TCC2 0 (lt_vec_TCC2-1 nil 3722556142 ("" (subtype-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("gt_vec" gt_vec gt_vec_TCC2 0 (gt_vec_TCC2-1 nil 3722556635 ("" (subtype-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("lteq_vec" lteq_vec lteq_vec_TCC2 0 (lteq_vec_TCC2-1 nil 3722557107 ("" (subtype-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("gteq_vec" gteq_vec gteq_vec_TCC2 0 (gteq_vec_TCC2-1 nil 3722557486 ("" (subtype-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("add" add add_vec_TCC1 0 (add_vec_TCC1-1 nil 3722610892 ("" (subtype-tcc) nil nil) ((int_minus_int_is_int application-judgement "int" integers nil)) nil))("test_lemmas" test_lemmas add_overflow_vec_test2_TCC4 0 (add_overflow_vec_test2_TCC4-1 nil 3722625187 ("" (subtype-tcc) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (nil application-judgement "above(n)" exp2 nil)) nil))("test_lemmas" test_lemmas add_overflow_vec_test2_TCC3 0 (add_overflow_vec_test2_TCC3-1 nil 3722625187 ("" (subtype-tcc) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (nil application-judgement "above(n)" exp2 nil)) nil))("test_lemmas" test_lemmas add_overflow_vec_test2_TCC2 0 (add_overflow_vec_test2_TCC2-1 nil 3722625187 ("" (subtype-tcc) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil)) nil))("test_lemmas" test_lemmas add_overflow_vec_test2_TCC1 0 (add_overflow_vec_test2_TCC1-1 nil 3722625187 ("" (subtype-tcc) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil)) nil))("test_lemmas" test_lemmas add_overflow_vec_test1_TCC4 0 (add_overflow_vec_test1_TCC4-1 nil 3722625187 ("" (subtype-tcc) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (nil application-judgement "above(n)" exp2 nil)) nil))("test_lemmas" test_lemmas add_overflow_vec_test1_TCC3 0 (add_overflow_vec_test1_TCC3-1 nil 3722625187 ("" (subtype-tcc) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (nil application-judgement "above(n)" exp2 nil)) nil))("test_lemmas" test_lemmas add_overflow_vec_test1_TCC2 0 (add_overflow_vec_test1_TCC2-1 nil 3722625187 ("" (subtype-tcc) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil)) nil))("test_lemmas" test_lemmas add_overflow_vec_test1_TCC1 0 (add_overflow_vec_test1_TCC1-1 nil 3722625187 ("" (subtype-tcc) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil)) nil))("test_lemmas" test_lemmas add_vec_range_tes2_TCC4 0 (add_vec_range_tes2_TCC4-1 nil 3722625187 ("" (cond-disjoint-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("test_lemmas" test_lemmas add_vec_range_tes2_TCC3 0 (add_vec_range_tes2_TCC3-1 nil 3722625187 ("" (subtype-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (nil application-judgement "above(n)" exp2 nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("test_lemmas" test_lemmas add_vec_range_tes2_TCC2 0 (add_vec_range_tes2_TCC2-1 nil 3722622575 ("" (cond-disjoint-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("test_lemmas" test_lemmas add_vec_range_tes2_TCC1 0 (add_vec_range_tes2_TCC1-1 nil 3722622575 ("" (cond-disjoint-tcc) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("test_lemmas" test_lemmas add_vec_range_tes1_TCC4 0 (add_vec_range_tes1_TCC4-1 nil 3722625187 ("" (cond-disjoint-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("test_lemmas" test_lemmas add_vec_range_tes1_TCC3 0 (add_vec_range_tes1_TCC3-1 nil 3722625187 ("" (subtype-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (nil application-judgement "above(n)" exp2 nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("test_lemmas" test_lemmas add_vec_range_tes1_TCC2 0 (add_vec_range_tes1_TCC2-1 nil 3722622575 ("" (cond-disjoint-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("test_lemmas" test_lemmas add_vec_range_tes1_TCC1 0 (add_vec_range_tes1_TCC1-1 nil 3722622575 ("" (cond-disjoint-tcc) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("test_lemmas" test_lemmas add_vec_test2_TCC6 0 (add_vec_test2_TCC6-1 nil 3722625187 ("" (cond-disjoint-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("test_lemmas" test_lemmas add_vec_test2_TCC5 0 (add_vec_test2_TCC5-1 nil 3722625187 ("" (cond-disjoint-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("test_lemmas" test_lemmas add_vec_test2_TCC4 0 (add_vec_test2_TCC4-1 nil 3722622575 ("" (cond-disjoint-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (nil application-judgement "above(n)" exp2 nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("test_lemmas" test_lemmas add_vec_test2_TCC3 0 (add_vec_test2_TCC3-1 nil 3722622575 ("" (cond-disjoint-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("test_lemmas" test_lemmas add_vec_test2_TCC2 0 (add_vec_test2_TCC2-1 nil 3722622575 ("" (cond-disjoint-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("test_lemmas" test_lemmas add_vec_test2_TCC1 0 (add_vec_test2_TCC1-1 nil 3722622575 ("" (cond-disjoint-tcc) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("test_lemmas" test_lemmas add_vec_test1_TCC6 0 (add_vec_test1_TCC6-1 nil 3722625187 ("" (cond-disjoint-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("test_lemmas" test_lemmas add_vec_test1_TCC5 0 (add_vec_test1_TCC5-1 nil 3722625187 ("" (cond-disjoint-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("test_lemmas" test_lemmas add_vec_test1_TCC4 0 (add_vec_test1_TCC4-1 nil 3722622575 ("" (cond-disjoint-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (nil application-judgement "above(n)" exp2 nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("test_lemmas" test_lemmas add_vec_test1_TCC3 0 (add_vec_test1_TCC3-1 nil 3722622575 ("" (cond-disjoint-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("test_lemmas" test_lemmas add_vec_test1_TCC2 0 (add_vec_test1_TCC2-1 nil 3722622575 ("" (cond-disjoint-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("test_lemmas" test_lemmas add_vec_test1_TCC1 0 (add_vec_test1_TCC1-1 nil 3722622575 ("" (cond-disjoint-tcc) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("test_lemmas" test_lemmas to_vec_inc_test5_TCC2 0 (to_vec_inc_test5_TCC2-1 nil 3722478221 ("" (subtype-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("test_lemmas" test_lemmas to_vec_inc_test5_TCC1 0 (to_vec_inc_test5_TCC1-1 nil 3722478221 ("" (subtype-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("test_lemmas" test_lemmas to_vec_inc_test4_TCC2 0 (to_vec_inc_test4_TCC2-1 nil 3722478221 ("" (subtype-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (minus_even_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("test_lemmas" test_lemmas to_vec_inc_test4_TCC1 0 (to_vec_inc_test4_TCC1-1 nil 3722478221 ("" (subtype-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (minus_even_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("test_lemmas" test_lemmas to_vec_inc_test3_TCC2 0 (to_vec_inc_test3_TCC2-1 nil 3722478221 ("" (subtype-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("test_lemmas" test_lemmas to_vec_inc_test3_TCC1 0 (to_vec_inc_test3_TCC1-1 nil 3722478221 ("" (subtype-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("test_lemmas" test_lemmas to_vec_inc_test2_TCC2 0 (to_vec_inc_test2_TCC2-1 nil 3722478388 ("" (subtype-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (minus_even_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("test_lemmas" test_lemmas to_vec_inc_test2_TCC1 0 (to_vec_inc_test2_TCC1-1 nil 3722478221 ("" (subtype-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (minus_even_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("test_lemmas" test_lemmas to_vec_inc_test1_TCC2 0 (to_vec_inc_test1_TCC2-1 nil 3722476602 ("" (subtype-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("test_lemmas" test_lemmas to_vec_inc_test1_TCC1 0 (to_vec_inc_test1_TCC1-1 nil 3722476602 ("" (subtype-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("test_lemmas" test_lemmas unsigned_test4_TCC1 0 (unsigned_test4_TCC1-1 nil 3722474056 ("" (cond-disjoint-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("test_lemmas" test_lemmas unsigned_test3_TCC1 0 (unsigned_test3_TCC1-1 nil 3722474056 ("" (cond-disjoint-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("test_lemmas" test_lemmas unsigned_test2_TCC1 0 (unsigned_test2_TCC1-1 nil 3722474056 ("" (cond-disjoint-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("test_lemmas" test_lemmas unsigned_test1_TCC1 0 (unsigned_test1_TCC1-1 nil 3722474056 ("" (cond-disjoint-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("test_lemmas" test_lemmas add_overflow_vec_test 0 (add_overflow_vec_test-1 nil 3722713153 ("" (grind) (("" (rewrite "reverse_inj") (("" (hide 2) (("" (case "bv2nat(LAMBDA (i_1: below(8)): nat2bv[8](194)(i_1)) =
       bv2nat(LAMBDA (i_1: below(8)):
          COND 7 - i_1 = 0 -> TRUE,
               7 - i_1 = 1 -> TRUE,
               7 - i_1 = 2 -> FALSE,
               7 - i_1 = 3 -> FALSE,
               7 - i_1 = 4 -> FALSE,
               7 - i_1 = 5 -> FALSE,
               7 - i_1 = 6 -> TRUE,
               ELSE -> FALSE
          ENDCOND)") (("1" (rewrite "bv2nat_inj") nil nil) ("2" (hide 2) (("2" (case "(LAMBDA (i_1: below(8)): nat2bv[8](194)(i_1))  = nat2bv[8](194)") (("1" (replaces 1) (("1" (replaces -1) (("1" (rewrite "bv2nat_inv") (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (decompose-equality) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ((AND const-decl "[bool, bool -> bool]" booleans nil) (reverse_inj formula-decl nil unsigned nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (TRUE const-decl "bool" booleans nil) (FALSE const-decl "bool" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (bv2nat_inj formula-decl nil bv_nat nil) (even_plus_even_is_even application-judgement "even_int" integers nil) (bv2nat_inv formula-decl nil bv_nat nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (nil application-judgement "above(n)" exp2 nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (Vone const-decl "bit" test_lemmas nil) (Vzero const-decl "bit" test_lemmas nil) (exp2 def-decl "posnat" exp2 nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (bv2nat_rec def-decl "nat" bv_nat nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (to_vec_inc const-decl "bvec[len]" to_vec_inc nil)) shostak))("test_lemmas" test_lemmas vector1_TCC1 0 (vector1_TCC1-1 nil 3722713135 ("" (cond-coverage-tcc) nil nil) nil nil))("to_vec_inc" to_vec_inc unsigned_inv_all 0 (unsigned_inv_all-1 nil 3722712447 ("" (skeep :preds? t) (("" (expand "to_vec_inc") (("" (case "val >= 0 AND val < exp2(len)") (("1" (replace -1) (("1" (expand "unsigned") (("1" (case "(LAMBDA (i_1: below(len)): nat2bv[len](val)(i_1)) = nat2bv[len](val)") (("1" (replaces -1) (("1" (case "mod(val, exp2(len)) = val") (("1" (replaces -1) (("1" (rewrite "bv2nat_inv") nil nil)) nil) ("2" (hide 2) (("2" (rewrite "mod_lt_nat") nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (decompose-equality) (("2" (grind) nil nil)) nil)) nil) ("3" (propax) nil nil) ("4" (hide 2) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (replace 1) (("2" (expand "unsigned") (("2" (case "(LAMBDA (i_1: below(len)):
               nat2bv[len](mod(val, exp2(len)))(i_1)) = nat2bv[len](mod(val, exp2(len)))") (("1" (replaces -1) (("1" (rewrite "bv2nat_inv") nil nil)) nil) ("2" (decompose-equality) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (bvec type-eq-decl nil bv nil) (= const-decl "[T, T -> boolean]" equalities nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "below(m)" mod nil) (/= const-decl "boolean" notequal nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (bv2nat_inv formula-decl nil bv_nat nil) (mod_lt_nat formula-decl nil mod nil) (TRUE const-decl "bool" booleans nil) (len skolem-const-decl "nat" to_vec_inc nil) (val skolem-const-decl "int" to_vec_inc nil) (NOT const-decl "[bool -> bool]" booleans nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (unsigned const-decl "nat" unsigned nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (nil application-judgement "above(n)" exp2 nil)) shostak))("to_vec_inc" to_vec_inc to_vec_inc_surj 0 (to_vec_inc_surj-1 nil 3722711255 ("" (skeep :preds? t) (("" (inst 1 "unsigned[len](y)") (("1" (rewrite "to_vec_inv") nil nil) ("2" (rewrite "unsigned_upperbound") nil nil)) nil)) nil) ((nil application-judgement "above(n)" exp2 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (unsigned const-decl "nat" unsigned nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (to_vec_inv formula-decl nil to_vec_inc nil) (unsigned_upperbound formula-decl nil unsigned nil)) shostak))("to_vec_inc" to_vec_inc to_vec_inc_inj 0 (to_vec_inc_inj-1 nil 3722710260 ("" (skeep :preds? t) (("" (grind) (("" (case "nat2bv[len](x)=nat2bv[len](y)") (("1" (case "bv2nat(nat2bv[len](x)) = bv2nat(nat2bv[len](y))") (("1" (case "bv2nat(nat2bv[len](x))=x") (("1" (replaces -1) (("1" (case "bv2nat(nat2bv[len](y))=y") (("1" (replaces -1) nil nil) ("2" (hide -1 -2 -4 -6 2) (("2" (rewrite "bv2nat_inv") nil nil)) nil)) nil)) nil) ("2" (rewrite "bv2nat_inv") nil nil)) nil) ("2" (hide -2 -3 -4 -5 2) (("2" (grind) nil nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (case "(LAMBDA (i: below(len)): nat2bv[len](x)(i)) =
       (LAMBDA (i: below(len)): nat2bv[len](y)(i))") (("1" (hide -2) (("1" (decompose-equality) (("1" (apply-extensionality) nil nil)) nil)) nil) ("2" (hide 2) (("2" (rewrite "reverse_inj") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (reverse_inj formula-decl nil unsigned nil) (TRUE const-decl "bool" booleans nil) (bv2nat_inv formula-decl nil bv_nat nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (= const-decl "[T, T -> boolean]" equalities nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil)) shostak))("add_signed" add_signed add_vec_signed_TCC2 0 (add_vec_signed_TCC2-1 nil 3722612707 ("" (subtype-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("minus" minus minus_overflow_vec_bit_signed_TCC4 0 (minus_overflow_vec_bit_signed_TCC4-1 nil 3722615120 ("" (subtype-tcc) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (minint const-decl "int" bv_int_defs nil) (maxint const-decl "int" bv_int_defs nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil)) nil))("minus" minus minus_overflow_vec_bit_signed_TCC3 0 (minus_overflow_vec_bit_signed_TCC3-1 nil 3722615120 ("" (subtype-tcc) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (maxint const-decl "int" bv_int_defs nil) (minint const-decl "int" bv_int_defs nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("minus" minus minus_overflow_vec_bit_signed_TCC2 0 (minus_overflow_vec_bit_signed_TCC2-1 nil 3722615120 ("" (subtype-tcc) nil nil) ((int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (maxint const-decl "int" bv_int_defs nil) (minint const-decl "int" bv_int_defs nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil))("minus" minus minus_overflow_vec_bit_TCC4 0 (minus_overflow_vec_bit_TCC4-1 nil 3722615120 ("" (subtype-tcc) nil nil) ((minus_odd_is_odd application-judgement "odd_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil)) nil))("minus" minus minus_overflow_vec_bit_TCC3 0 (minus_overflow_vec_bit_TCC3-1 nil 3722615120 ("" (subtype-tcc) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("minus" minus minus_overflow_vec_bit_TCC2 0 (minus_overflow_vec_bit_TCC2-1 nil 3722011034 ("" (skeep :preds? T) (("" (split) (("1" (grind-reals) nil nil) ("2" (grind-reals) nil nil)) nil)) nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("minus" minus minus_overflow_vec_signed_TCC5 0 (minus_overflow_vec_signed_TCC5-1 nil 3722615120 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (minint const-decl "int" bv_int_defs nil) (maxint const-decl "int" bv_int_defs nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil)) nil))("minus" minus minus_overflow_vec_signed_TCC4 0 (minus_overflow_vec_signed_TCC4-1 nil 3722615120 ("" (subtype-tcc) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (maxint const-decl "int" bv_int_defs nil) (minint const-decl "int" bv_int_defs nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("minus" minus minus_overflow_vec_signed_TCC3 0 (minus_overflow_vec_signed_TCC3-1 nil 3722615120 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (maxint const-decl "int" bv_int_defs nil) (minint const-decl "int" bv_int_defs nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil))("minus" minus minus_overflow_vec_TCC4 0 (minus_overflow_vec_TCC4-1 nil 3722615120 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil)) nil))("minus" minus minus_overflow_vec_TCC3 0 (minus_overflow_vec_TCC3-1 nil 3722615120 ("" (subtype-tcc) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("minus" minus minus_overflow_vec_TCC2 0 (minus_overflow_vec_TCC2-1 nil 3722615120 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("minus" minus minus_vec_TCC1 0 (minus_vec_TCC1-1 nil 3722615120 ("" (subtype-tcc) nil nil) ((int_minus_int_is_int application-judgement "int" integers nil)) nil))("multiply" multiply multiply_vec_TCC1 0 (multiply_vec_TCC1-1 nil 3722616200 ("" (subtype-tcc) nil nil) ((int_minus_int_is_int application-judgement "int" integers nil)) nil))("multiply" multiply mult_overflow_vec_TCC1 0 (mult_overflow_vec_TCC1-1 nil 3721747425 ("" (subtype-tcc) nil nil) ((int_minus_int_is_int application-judgement "int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil)) nil))("multiply" multiply mult_overflow_vec_TCC2 0 (mult_overflow_vec_TCC2-1 nil 3721747425 ("" (skeep :preds? T) (("" (skeep) (("" (grind-reals) (("1" (lemma "bv2nat_mult_scope") (("1" (inst -1 "N" "bv1" "bv2") nil nil)) nil) ("2" (lemma "bv2nat_mult_scope") (("2" (inst?) nil nil)) nil)) nil)) nil)) nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil)) nil))("multiply" multiply mult_overflow_vec_TCC3 0 (mult_overflow_vec_TCC3-1 nil 3722616200 ("" (subtype-tcc) nil nil) ((int_minus_int_is_int application-judgement "int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil)) nil))("multiply" multiply mult_overflow_vec_TCC4 0 (mult_overflow_vec_TCC4-1 nil 3722616200 ("" (subtype-tcc) nil nil) ((int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil)) nil))("multiply" multiply mult_overflow_vec_TCC5 0 (mult_overflow_vec_TCC5-1 nil 3722616200 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil)) nil))("multiply" multiply mult_overflow_vec_TCC6 0 (mult_overflow_vec_TCC6-1 nil 3722616200 ("" (subtype-tcc) nil nil) ((int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil)) nil))("multiply_signed" multiply_signed mult_overflow_vec_signed_TCC6 0 (mult_overflow_vec_signed_TCC6-1 nil 3722616363 ("" (subtype-tcc) nil nil) ((int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (minint const-decl "int" bv_int_defs nil) (maxint const-decl "int" bv_int_defs nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil)) nil))("multiply_signed" multiply_signed mult_overflow_vec_signed_TCC5 0 (mult_overflow_vec_signed_TCC5-1 nil 3722616363 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" multiply_signed nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (exp2 def-decl "posnat" exp2 nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (divides const-decl "bool" divides nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (maxint const-decl "int" bv_int_defs nil) (minint const-decl "int" bv_int_defs nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil))("multiply_signed" multiply_signed mult_overflow_vec_signed_TCC4 0 (mult_overflow_vec_signed_TCC4-1 nil 3722616363 ("" (subtype-tcc) nil nil) ((int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (minint const-decl "int" bv_int_defs nil) (maxint const-decl "int" bv_int_defs nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil)) nil))("multiply_signed" multiply_signed mult_overflow_vec_signed_TCC3 0 (mult_overflow_vec_signed_TCC3-1 nil 3722616363 ("" (subtype-tcc) nil nil) ((int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (minint const-decl "int" bv_int_defs nil) (maxint const-decl "int" bv_int_defs nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil)) nil))("multiply_signed" multiply_signed mult_overflow_vec_signed_TCC2 0 (mult_overflow_vec_signed_TCC2-1 nil 3722015950 ("" (skeep :preds? t) (("" (skeep) (("" (split) (("1" (grind-reals) nil nil) ("2" (lemma "bv2nat_mult_scope") (("2" (inst?) (("2" (grind-reals) nil nil)) nil)) nil)) nil)) nil)) nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil))("multiply_signed" multiply_signed mult_overflow_vec_signed_TCC1 0 (mult_overflow_vec_signed_TCC1-1 nil 3722015950 ("" (subtype-tcc) nil nil) ((int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (minint const-decl "int" bv_int_defs nil) (maxint const-decl "int" bv_int_defs nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil)) nil))("multiply_signed" multiply_signed multiply_vec_signed_TCC2 0 (multiply_vec_signed_TCC2-1 nil 3722616363 ("" (subtype-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("modulo" modulo mod_vec_TCC2 0 (mod_vec_TCC2-1 nil 3722107761 ("" (skeep :preds? t) (("" (grind-reals) (("1" (lemma "mod_pos") (("1" (inst -1 "bv2nat[N](bv1)" "bv2nat(bv2)") (("1" (grind-reals) nil nil)) nil)) nil) ("2" (lemma "mod_pos") (("2" (inst -1 "bv2nat[N](bv1)" "bv2nat(bv2)") (("2" (grind-reals) nil nil)) nil)) nil)) nil)) nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (N formal-const-decl "nat" modulo nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (/= const-decl "boolean" notequal nil) (mod_pos formula-decl nil mod nil)) nil))("quot" quot quot_vec_signed_TCC7 0 (quot_vec_signed_TCC7-1 nil 3722619254 ("" (subtype-tcc) nil nil) ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (bool nonempty-type-eq-decl nil booleans nil) (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (M formal-const-decl "posnat" quot nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (exp2 def-decl "posnat" exp2 nil) (NOT const-decl "[bool -> bool]" booleans nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil))("quot" quot quot_vec_TCC3 0 (quot_vec_TCC3-1 nil 3722619254 ("" (subtype-tcc) nil nil) ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (M formal-const-decl "posnat" quot nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (exp2 def-decl "posnat" exp2 nil) (NOT const-decl "[bool -> bool]" booleans nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("quot" quot quot_vec_TCC2 0 (quot_vec_TCC2-1 nil 3722110282 ("" (skeep :preds? t) (("" (grind-reals) (("1" (lemma "div_max") (("1" (inst -1 "bv2nat[M](bv2)" "bv2nat[N](bv1)") (("1" (expand "div") (("1" (grind-reals) nil nil)) nil)) nil)) nil) ("2" (lemma "div_TCC1") (("2" (inst -1 "bv2nat[M](bv2)" "bv2nat[N](bv1)") (("2" (expand "div") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("minus" minus minus_overflow_vec_TCC1 0 (minus_overflow_vec_TCC1-1 nil 3722011034 ("" (skeep :preds? T) (("" (split) (("1" (grind-reals) nil nil) ("2" (grind-reals) nil nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil)) nil))("minus" minus minus_overflow_vec_bit_TCC1 0 (minus_overflow_vec_bit_TCC1-1 nil 3722011034 ("" (subtype-tcc) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("minus" minus minus_overflow_vec_signed_TCC2 0 (minus_overflow_vec_signed_TCC2-1 nil 3722615120 ("" (subtype-tcc) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (maxint const-decl "int" bv_int_defs nil) (minint const-decl "int" bv_int_defs nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("minus" minus minus_overflow_vec_bit_signed_TCC1 0 (minus_overflow_vec_bit_signed_TCC1-1 nil 3722615120 ("" (subtype-tcc) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (maxint const-decl "int" bv_int_defs nil) (minint const-decl "int" bv_int_defs nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("to_vec_inc" to_vec_inc unsigned_inv2_TCC2 0 (unsigned_inv2_TCC2-1 nil 3724594985 ("" (subtype-tcc) nil nil) nil nil))("minus" minus unariminus 0 (unariminus-1 nil 3723076661 ("" (skeep :preds? t) (("" (grind) (("1" (postpone) nil nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil) ("5" (postpone) nil nil) ("6" (postpone) nil nil) ("7" (postpone) nil nil) ("8" (postpone) nil nil) ("9" (postpone) nil nil) ("10" (postpone) nil nil) ("11" (postpone) nil nil) ("12" (postpone) nil nil) ("13" (postpone) nil nil) ("14" (postpone) nil nil) ("15" (postpone) nil nil) ("16" (postpone) nil nil) ("17" (postpone) nil nil) ("18" (postpone) nil nil) ("19" (postpone) nil nil) ("20" (postpone) nil nil) ("21" (postpone) nil nil) ("22" (postpone) nil nil) ("23" (postpone) nil nil) ("24" (postpone) nil nil) ("25" (postpone) nil nil) ("26" (postpone) nil nil) ("27" (postpone) nil nil) ("28" (postpone) nil nil) ("29" (postpone) nil nil) ("30" (postpone) nil nil)) nil)) nil) nil shostak))("test_lemmas" test_lemmas mod_vec_range_test2_TCC2 0 (mod_vec_range_test2_TCC2-1 nil 3724603757 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas" test_lemmas mod_vec_range_test1_TCC2 0 (mod_vec_range_test1_TCC2-1 nil 3724603757 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas" test_lemmas mod_vec_test2_TCC2 0 (mod_vec_test2_TCC2-1 nil 3724603757 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas" test_lemmas mod_vec_test1_TCC2 0 (mod_vec_test1_TCC2-1 nil 3724603757 ("" (subtype-tcc) nil nil) nil nil))("to_vec_inc" to_vec_inc unsigned_inv2_2 0 (unsigned_inv2_2-1 nil 3724610923 ("" (skeep :preds? t) (("" (rewrite "unsigned_inv2") (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil)) nil) nil shostak))("to_vec_inc" to_vec_inc unsigned_inv2_2_TCC2 0 (unsigned_inv2_2_TCC2-1 nil 3724610922 ("" (subtype-tcc) nil nil) nil nil))("to_vec_inc" to_vec_inc unsigned_inv2_2_TCC1 0 (unsigned_inv2_2_TCC1-1 nil 3724610922 ("" (subtype-tcc) nil nil) nil nil))("bitwise_and" bitwise_and bit_and_commu 0 (bit_and_commu-1 nil 3724685909 ("" (grind) nil nil) nil shostak))("bitwise_and" bitwise_and and_commu 0 (and_commu-1 nil 3724685844 ("" (skeep :preds? t) (("" (decompose-equality) (("" (grind) nil nil)) nil)) nil) ((AND const-decl "[bool, bool -> bool]" booleans nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bitwise_and nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) shostak))("bitwise_and" bitwise_and and_false 0 (and_false-1 nil 3724689190 ("" (skeep :preds? t) (("" (decompose-equality) (("" (grind) nil nil)) nil)) nil) ((AND const-decl "[bool, bool -> bool]" booleans nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (below type-eq-decl nil nat_types nil) (bvec0 const-decl "bit" bv nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bitwise_and nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) shostak))("bitwise_and" bitwise_and and_zeroreset 0 (and_zeroreset-1 nil 3724689326 ("" (skeep :preds? t) (("" (decompose-equality) (("" (grind) nil nil)) nil)) nil) ((AND const-decl "[bool, bool -> bool]" booleans nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (below type-eq-decl nil nat_types nil) (bvec0 const-decl "bit" bv nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bitwise_and nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) shostak))("bitwise_xor" bitwise_xor xor_def 0 (xor_def-1 nil 3724696118 ("" (grind) (("" (decompose-equality) (("" (grind) nil nil)) nil)) nil) ((NOT const-decl "[bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bitwise_xor nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (XOR const-decl "bool" xor_def nil) (/= const-decl "boolean" notequal nil)) shostak))("bitwise_shift" bitwise_shift bvec0_inv 0 (bvec0_inv-1 nil 3724707682 ("" (grind) (("" (replaces -3) (("" (expand "bvec0") (("" (decompose-equality) nil nil)) nil)) nil)) nil) ((TRUE const-decl "bool" booleans nil) (below type-eq-decl nil nat_types nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (FALSE const-decl "bool" booleans nil) (j!1 skolem-const-decl "nat" bitwise_shift nil) (i!1 skolem-const-decl "nat" bitwise_shift nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (bvec0 const-decl "bit" bv nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) shostak))("bitwise_shift" bitwise_shift bvec0_inv_TCC1 0 (bvec0_inv_TCC1-1 nil 3724707681 ("" (subtype-tcc) nil nil) nil nil))("additional_arithmetic" additional_arithmetic length_zero 0 (length_zero-1 nil 3724866158 ("" (postpone) nil nil) nil shostak))("add" add add_commutativity 0 (add_commutativity-1 nil 3724883643 ("" (grind) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (bv2nat_rec def-decl "nat" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (even_times_int_is_even application-judgement "even_int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("unsigned" unsigned nat2bv_inj 0 (nat2bv_inj-1 nil 3724890670 ("" (grind) (("" (postpone) nil nil)) nil) nil shostak))("unsigned" unsigned nat2bv_inj_TCC2 0 (nat2bv_inj_TCC2-1 nil 3724890666 ("" (subtype-tcc) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (member const-decl "bool" sets nil) (singleton_elt const-decl "T" sets nil)) nil))("unsigned" unsigned nat2bv_inj_TCC1 0 (nat2bv_inj_TCC1-1 nil 3724890666 ("" (subtype-tcc) nil nil) nil nil))("unsigned" unsigned reverse_reverse_TCC1 0 (reverse_reverse_TCC1-1 nil 3722702821 ("" (subtype-tcc) nil nil) nil nil))("minus" minus bat2nat_rec_ind1 0 (bat2nat_rec_ind1-1 nil 3725209109 ("" (induct "j") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (skeep) (("3" (prop) (("1" (postpone) nil nil) ("2" (case "j_1 = 0") (("1" (grind) (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil) nil shostak))("minus" minus bat2nat_rec_ind1_TCC5 0 (bat2nat_rec_ind1_TCC5-1 nil 3725209798 ("" (subtype-tcc) nil nil) nil nil))("minus" minus bat2nat_rec_ind1_TCC4 0 (bat2nat_rec_ind1_TCC4-1 nil 3725209798 ("" (subtype-tcc) nil nil) nil nil))("minus" minus bat2nat_rec_ind1_TCC3 0 (bat2nat_rec_ind1_TCC3-1 nil 3725209105 ("" (subtype-tcc) nil nil) nil nil))("minus" minus bat2nat_rec_ind1_TCC2 0 (bat2nat_rec_ind1_TCC2-1 nil 3725209105 ("" (subtype-tcc) nil nil) nil nil))("minus" minus bat2nat_rec_ind1_TCC1 0 (bat2nat_rec_ind1_TCC1-1 nil 3725209105 ("" (subtype-tcc) nil nil) nil nil))("minus" minus bat2nat_rec_ind 0 (bat2nat_rec_ind-1 nil 3725126845 ("" (induct "j") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (skeep) (("3" (prop) (("1" (skeep :preds? t) (("1" (skeep) (("1" (assert) (("1" (expand "bv2nat_rec" 1) (("1" (assert) (("1" (case "x ^ (1 + j_1 + k, 0) ^ j_1 = x(j_1)") (("1" (replaces -1) (("1" (case "x ^ (j_1 + k, 0) ^ j_1 = x(j_1)") (("1" (replaces -1) (("1" (assert) (("1" (inst -2 "i + 1" "x") (("1" (inst -2 "k + 1") (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "j_1 = 0") (("1" (replaces -1) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil) ("4" (grind) nil nil) ("5" (grind) nil nil)) nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (exp2 def-decl "posnat" exp2 nil) (b2n const-decl "nbit" bit nil) (even_plus_odd_is_odd application-judgement "odd_int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (TRUE const-decl "bool" booleans nil) (int_plus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (^ const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (nil application-judgement "above(n)" exp2 nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nat_induction formula-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (bv2nat_rec def-decl "nat" bv_nat nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (<= const-decl "bool" reals nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil)) shostak))("minus" minus bat2nat_rec_ind_TCC6 0 (bat2nat_rec_ind_TCC6-1 nil 3725139431 ("" (subtype-tcc) nil nil) nil nil))("minus" minus bat2nat_rec_ind_TCC5 0 (bat2nat_rec_ind_TCC5-1 nil 3725139431 ("" (subtype-tcc) nil nil) nil nil))("minus" minus bat2nat_rec_ind_TCC4 0 (bat2nat_rec_ind_TCC4-1 nil 3725126842 ("" (subtype-tcc) nil nil) nil nil))("minus" minus bat2nat_rec_ind_TCC3 0 (bat2nat_rec_ind_TCC3-1 nil 3725126842 ("" (subtype-tcc) nil nil) nil nil))("minus" minus bat2nat_rec_ind_TCC2 0 (bat2nat_rec_ind_TCC2-1 nil 3725126842 ("" (subtype-tcc) nil nil) nil nil))("minus" minus bat2nat_rec_ind_TCC1 0 (bat2nat_rec_ind_TCC1-1 nil 3725126842 ("" (subtype-tcc) nil nil) nil nil))("minus" minus unsigned_zero 0 (unsigned_zero-1 nil 3725214440 ("" (skeep) (("" (prop) (("1" (postpone) nil nil) ("2" (expand "unsigned") (("2" (case "(LAMBDA (i: below((N))): bv((N) - 1 - i)) = bvec0[N]") (("1" (replaces -1) (("1" (expand "bvec0") (("1" (grind) (("1" (grind) (("1" (postpone) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (decompose-equality) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("minus" minus bv2nat_rec_ind1 0 (bv2nat_rec_ind1-1 nil 3725210529 ("" (induct "j") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (skeep) (("3" (prop) (("1" (skeep :preds? t) (("1" (expand "bv2nat_rec" 1) (("1" (inst -2 "i" "x^(i+j_1, 0)" "y^(i+j_1-1,0)") (("1" (grind) (("1" (lemma "bv2nat_rec_ind" ("i" "i+2" "j" "j_1" "x" "x")) (("1" (inst -1 "i+1") (("1" (assert) (("1" (case "x ^ (1 + i + j_1, 0) = x") (("1" (replaces -1) (("1" (grind) nil nil)) nil) ("2" (grind) (("2" (expand "^") (("2" (decompose-equality) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil) ("2" (case "j_1 = 0") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil) ("4" (grind) nil nil) ("5" (grind) nil nil)) nil) ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (> const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (<= const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (= const-decl "[T, T -> boolean]" equalities nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (bv2nat_rec def-decl "nat" bv_nat nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (nat_induction formula-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (exp2 def-decl "posnat" exp2 nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (b2n const-decl "nbit" bit nil) (^ const-decl "bit" bv nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (TRUE const-decl "bool" booleans nil) (bv2nat_rec_ind formula-decl nil minus nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_plus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (odd_plus_even_is_odd application-judgement "odd_int" integers nil) (NOT const-decl "[bool -> bool]" booleans nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil)) shostak))("minus" minus bv2nat_rec_ind1_TCC4 0 (bv2nat_rec_ind1_TCC4-1 nil 3725210521 ("" (subtype-tcc) nil nil) nil nil))("minus" minus bv2nat_rec_ind1_TCC3 0 (bv2nat_rec_ind1_TCC3-1 nil 3725210521 ("" (subtype-tcc) nil nil) nil nil))("minus" minus bv2nat_rec_ind1_TCC2 0 (bv2nat_rec_ind1_TCC2-1 nil 3725210521 ("" (subtype-tcc) nil nil) nil nil))("minus" minus bv2nat_rec_ind1_TCC1 0 (bv2nat_rec_ind1_TCC1-1 nil 3725210521 ("" (subtype-tcc) nil nil) nil nil))("minus" minus bv2nat_rec_ind 0 (bv2nat_rec_ind-1 nil 3725209810 ("" (induct "j") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (skeep) (("3" (prop) (("1" (skeep :preds? t) (("1" (skeep) (("1" (assert) (("1" (expand "bv2nat_rec" 1) (("1" (assert) (("1" (case "x ^ (1 + j_1 + k, 0) ^ j_1 = x(j_1)") (("1" (replaces -1) (("1" (case "x ^ (j_1 + k, 0) ^ j_1 = x(j_1)") (("1" (replaces -1) (("1" (assert) (("1" (inst -2 "i + 1" "x") (("1" (inst -2 "k + 1") (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "j_1 = 0") (("1" (replaces -1) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil) ("4" (grind) nil nil) ("5" (grind) nil nil)) nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (exp2 def-decl "posnat" exp2 nil) (b2n const-decl "nbit" bit nil) (even_plus_odd_is_odd application-judgement "odd_int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (TRUE const-decl "bool" booleans nil) (int_plus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (^ const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (nil application-judgement "above(n)" exp2 nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nat_induction formula-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (bv2nat_rec def-decl "nat" bv_nat nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (<= const-decl "bool" reals nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil)) shostak))("minus" minus bv2nat_rec_ind_TCC6 0 (bv2nat_rec_ind_TCC6-1 nil 3725210521 ("" (subtype-tcc) nil nil) nil nil))("minus" minus bv2nat_rec_ind_TCC5 0 (bv2nat_rec_ind_TCC5-1 nil 3725210521 ("" (subtype-tcc) nil nil) nil nil))("minus" minus bv2nat_rec_ind_TCC4 0 (bv2nat_rec_ind_TCC4-1 nil 3725210521 ("" (subtype-tcc) nil nil) nil nil))("minus" minus bv2nat_rec_ind_TCC3 0 (bv2nat_rec_ind_TCC3-1 nil 3725210521 ("" (subtype-tcc) nil nil) nil nil))("minus" minus bv2nat_rec_ind_TCC2 0 (bv2nat_rec_ind_TCC2-1 nil 3725210521 ("" (subtype-tcc) nil nil) nil nil))("minus" minus bv2nat_rec_ind_TCC1 0 (bv2nat_rec_ind_TCC1-1 nil 3725210521 ("" (subtype-tcc) nil nil) nil nil))("unsigned" unsigned unsigned_rec 0 (unsigned_rec-1 nil 3725370276 ("" (induct "n") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (skeep) (("3" (prop) (("1" (skeep) (("1" (inst -1 "x^(j+1,1)") (("1" (grind) (("1" (lemma "bv2nat_rec_ind1" ("i" "1" "j" "j" "x" "reverse(x)" "y" "reverse(x)^(j,0)")) (("1" (prop) (("1" (case "(LAMBDA (i: below(2 + j)): x(2 + j - i - 1)) ^ (j, 0) = (LAMBDA (i: below(1 + j)): x(1 - i + j))") (("1" (replaces -1) (("1" (grind) (("1" (grind) (("1" (postpone) nil nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil) ("2" (postpone) nil nil)) nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil) ("5" (postpone) nil nil) ("6" (postpone) nil nil)) nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil) ("4" (postpone) nil nil) ("5" (postpone) nil nil) ("6" (postpone) nil nil)) nil) nil shostak))("unsigned" unsigned unsigned_rec_TCC5 0 (unsigned_rec_TCC5-1 nil 3725370275 ("" (subtype-tcc) nil nil) nil nil))("unsigned" unsigned unsigned_rec_TCC4 0 (unsigned_rec_TCC4-1 nil 3725370275 ("" (subtype-tcc) nil nil) nil nil))("unsigned" unsigned unsigned_rec_TCC3 0 (unsigned_rec_TCC3-1 nil 3725370275 ("" (subtype-tcc) nil nil) nil nil))("unsigned" unsigned unsigned_rec_TCC2 0 (unsigned_rec_TCC2-1 nil 3725370275 ("" (subtype-tcc) nil nil) nil nil))("unsigned" unsigned unsigned_rec_TCC1 0 (unsigned_rec_TCC1-1 nil 3725370275 ("" (subtype-tcc) nil nil) nil nil))("unsigned" unsigned unsigned_neg_sum 0 (unsigned_neg_sum-1 nil 3725371016 ("" (skeep) (("" (expand "unsigned") (("" (postpone) nil nil)) nil)) nil) nil shostak))("unsigned" unsigned unsigned_rec 0 (unsigned_rec-1 nil 3725371280 ("" (induct "n") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (skeep) (("3" (prop) (("1" (skeep) (("1" (inst -1 "x^(j+1,1)") (("1" (expand "unsigned") (("1" (postpone) nil nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil) ("4" (postpone) nil nil) ("5" (postpone) nil nil) ("6" (postpone) nil nil)) nil) nil shostak))("unsigned" unsigned unsigned_rec_TCC5 0 (unsigned_rec_TCC5-1 nil 3725371279 ("" (subtype-tcc) nil nil) nil nil))("unsigned" unsigned unsigned_rec_TCC4 0 (unsigned_rec_TCC4-1 nil 3725371279 ("" (subtype-tcc) nil nil) nil nil))("unsigned" unsigned unsigned_rec_TCC3 0 (unsigned_rec_TCC3-1 nil 3725371279 ("" (subtype-tcc) nil nil) nil nil))("unsigned" unsigned unsigned_rec_TCC2 0 (unsigned_rec_TCC2-1 nil 3725371279 ("" (subtype-tcc) nil nil) nil nil))("unsigned" unsigned unsigned_rec_TCC1 0 (unsigned_rec_TCC1-1 nil 3725371279 ("" (subtype-tcc) nil nil) nil nil))("minus" minus minus_plus_neg 0 (minus_plus_neg-1 nil 3725369785 ("" (skeep) (("" (rewrite "unsigned_inv") (("" (use "unsigned_neg_sum1" ("bv" "(LAMBDA (i: below(N)): NOT bv(i))")) (("" (case "(LAMBDA (i_1: below(N)): NOT NOT bv(i_1)) = bv") (("1" (replaces -1) (("1" (both-sides "-" "unsigned(bv)" -1) (("1" (assert) (("1" (replaces -1) (("1" (assert) (("1" (case "unsigned(bv) = 0") (("1" (replaces -1) (("1" (assert) (("1" (rewrite "mod_eq_arg") (("1" (case-insert-fname "unsigned") (("1" (rewrite "unsigned_inj") nil nil) ("2" (hide 2) (("2" (rewrite "unsigned_inv") (("2" (rewrite "mod_zero") (("2" (rewrite "unsigned_fill_F") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "mod_lt_nat") (("2" (assert) (("2" (case-insert-fname "unsigned[N]" 2) (("1" (rewrite "unsigned_inj") nil nil) ("2" (hide 3) (("2" (rewrite "unsigned_inv") (("2" (rewrite "mod_eq_arg") (("2" (rewrite "unsigned_fill_F") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (assert) (("2" (decompose-equality) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nil application-judgement "above(n)" exp2 nil) (unsigned_inv formula-decl nil to_vec_inc nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" minus nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (unsigned const-decl "nat" unsigned nil) (NOT const-decl "[bool -> bool]" booleans nil) (nil application-judgement "below(m)" mod nil) (= const-decl "[T, T -> boolean]" equalities nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (exp2 def-decl "posnat" exp2 nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (below type-eq-decl nil nat_types nil) (bvec0 const-decl "bit" bv nil) (unsigned_inj formula-decl nil unsigned nil) (unsigned_fill_F formula-decl nil minus nil) (mod_zero formula-decl nil mod nil) (mod_eq_arg formula-decl nil mod nil) (/= const-decl "boolean" notequal nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (mod_lt_nat formula-decl nil mod nil) (int_plus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (TRUE const-decl "bool" booleans nil) (unsigned_neg_sum1 formula-decl nil minus nil)) shostak))("multiply" multiply multiply_vec_associativity 0 (multiply_vec_associativity-1 nil 3725386845 ("" (skeep) (("" (postpone) nil nil)) nil) nil shostak))("multiply" multiply multiply_vec_associativity_TCC2 0 (multiply_vec_associativity_TCC2-1 nil 3725386844 ("" (subtype-tcc) nil nil) nil nil))("multiply" multiply multiply_vec_associativity_TCC1 0 (multiply_vec_associativity_TCC1-1 nil 3725386844 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_63_TCC2 0 (th_quot_vec_signed_63_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_63_TCC1 0 (th_quot_vec_signed_63_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_62_TCC2 0 (th_quot_vec_signed_62_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_62_TCC1 0 (th_quot_vec_signed_62_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_61_TCC2 0 (th_quot_vec_signed_61_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_61_TCC1 0 (th_quot_vec_signed_61_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_60_TCC2 0 (th_quot_vec_signed_60_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_60_TCC1 0 (th_quot_vec_signed_60_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_59_TCC2 0 (th_quot_vec_signed_59_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_59_TCC1 0 (th_quot_vec_signed_59_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_58_TCC2 0 (th_quot_vec_signed_58_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_58_TCC1 0 (th_quot_vec_signed_58_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_57_TCC2 0 (th_quot_vec_signed_57_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_57_TCC1 0 (th_quot_vec_signed_57_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_55_TCC2 0 (th_quot_vec_signed_55_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_55_TCC1 0 (th_quot_vec_signed_55_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_54_TCC2 0 (th_quot_vec_signed_54_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_54_TCC1 0 (th_quot_vec_signed_54_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_53_TCC2 0 (th_quot_vec_signed_53_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_53_TCC1 0 (th_quot_vec_signed_53_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_52_TCC2 0 (th_quot_vec_signed_52_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_52_TCC1 0 (th_quot_vec_signed_52_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_51_TCC2 0 (th_quot_vec_signed_51_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_51_TCC1 0 (th_quot_vec_signed_51_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_50_TCC2 0 (th_quot_vec_signed_50_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_50_TCC1 0 (th_quot_vec_signed_50_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_49_TCC2 0 (th_quot_vec_signed_49_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_49_TCC1 0 (th_quot_vec_signed_49_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_47_TCC2 0 (th_quot_vec_signed_47_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_47_TCC1 0 (th_quot_vec_signed_47_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_46_TCC2 0 (th_quot_vec_signed_46_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_46_TCC1 0 (th_quot_vec_signed_46_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_45_TCC2 0 (th_quot_vec_signed_45_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_45_TCC1 0 (th_quot_vec_signed_45_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_44_TCC2 0 (th_quot_vec_signed_44_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_44_TCC1 0 (th_quot_vec_signed_44_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_43_TCC2 0 (th_quot_vec_signed_43_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_43_TCC1 0 (th_quot_vec_signed_43_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_42_TCC2 0 (th_quot_vec_signed_42_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_42_TCC1 0 (th_quot_vec_signed_42_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_41_TCC2 0 (th_quot_vec_signed_41_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_41_TCC1 0 (th_quot_vec_signed_41_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_38_TCC2 0 (th_quot_vec_signed_38_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_38_TCC1 0 (th_quot_vec_signed_38_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_37_TCC2 0 (th_quot_vec_signed_37_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_37_TCC1 0 (th_quot_vec_signed_37_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_36_TCC2 0 (th_quot_vec_signed_36_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_36_TCC1 0 (th_quot_vec_signed_36_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_35_TCC2 0 (th_quot_vec_signed_35_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_35_TCC1 0 (th_quot_vec_signed_35_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_34_TCC2 0 (th_quot_vec_signed_34_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_34_TCC1 0 (th_quot_vec_signed_34_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_33_TCC2 0 (th_quot_vec_signed_33_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_33_TCC1 0 (th_quot_vec_signed_33_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_31_TCC2 0 (th_quot_vec_signed_31_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_31_TCC1 0 (th_quot_vec_signed_31_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_30_TCC2 0 (th_quot_vec_signed_30_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_30_TCC1 0 (th_quot_vec_signed_30_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_29_TCC2 0 (th_quot_vec_signed_29_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_29_TCC1 0 (th_quot_vec_signed_29_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_28_TCC2 0 (th_quot_vec_signed_28_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_28_TCC1 0 (th_quot_vec_signed_28_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_27_TCC2 0 (th_quot_vec_signed_27_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_27_TCC1 0 (th_quot_vec_signed_27_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_26_TCC2 0 (th_quot_vec_signed_26_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_26_TCC1 0 (th_quot_vec_signed_26_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_25_TCC2 0 (th_quot_vec_signed_25_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_25_TCC1 0 (th_quot_vec_signed_25_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_23_TCC2 0 (th_quot_vec_signed_23_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_23_TCC1 0 (th_quot_vec_signed_23_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_22_TCC2 0 (th_quot_vec_signed_22_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_22_TCC1 0 (th_quot_vec_signed_22_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_21_TCC2 0 (th_quot_vec_signed_21_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_21_TCC1 0 (th_quot_vec_signed_21_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_20_TCC2 0 (th_quot_vec_signed_20_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_20_TCC1 0 (th_quot_vec_signed_20_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_19_TCC2 0 (th_quot_vec_signed_19_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_19_TCC1 0 (th_quot_vec_signed_19_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_18_TCC2 0 (th_quot_vec_signed_18_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_18_TCC1 0 (th_quot_vec_signed_18_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_17_TCC2 0 (th_quot_vec_signed_17_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_17_TCC1 0 (th_quot_vec_signed_17_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_15_TCC2 0 (th_quot_vec_signed_15_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_15_TCC1 0 (th_quot_vec_signed_15_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_14_TCC2 0 (th_quot_vec_signed_14_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_14_TCC1 0 (th_quot_vec_signed_14_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_13_TCC2 0 (th_quot_vec_signed_13_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_13_TCC1 0 (th_quot_vec_signed_13_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_12_TCC2 0 (th_quot_vec_signed_12_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_12_TCC1 0 (th_quot_vec_signed_12_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_11_TCC2 0 (th_quot_vec_signed_11_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_11_TCC1 0 (th_quot_vec_signed_11_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_10_TCC2 0 (th_quot_vec_signed_10_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_10_TCC1 0 (th_quot_vec_signed_10_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_9_TCC2 0 (th_quot_vec_signed_9_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_9_TCC1 0 (th_quot_vec_signed_9_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_7_TCC2 0 (th_quot_vec_signed_7_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_7_TCC1 0 (th_quot_vec_signed_7_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_6_TCC2 0 (th_quot_vec_signed_6_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_6_TCC1 0 (th_quot_vec_signed_6_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_5_TCC2 0 (th_quot_vec_signed_5_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_5_TCC1 0 (th_quot_vec_signed_5_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_4_TCC2 0 (th_quot_vec_signed_4_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_4_TCC1 0 (th_quot_vec_signed_4_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_3_TCC2 0 (th_quot_vec_signed_3_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_3_TCC1 0 (th_quot_vec_signed_3_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_2_TCC2 0 (th_quot_vec_signed_2_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_2_TCC1 0 (th_quot_vec_signed_2_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_1_TCC2 0 (th_quot_vec_signed_1_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_quot_vec_signed_1_TCC1 0 (th_quot_vec_signed_1_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_mod_vec_7_TCC1 0 (th_mod_vec_7_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_mod_vec_6_TCC1 0 (th_mod_vec_6_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_mod_vec_5_TCC1 0 (th_mod_vec_5_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_mod_vec_4_TCC1 0 (th_mod_vec_4_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_mod_vec_3_TCC1 0 (th_mod_vec_3_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_mod_vec_2_TCC1 0 (th_mod_vec_2_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_mod_vec_1_TCC1 0 (th_mod_vec_1_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_signed_29_TCC2 0 (th_multiply_vec_signed_29_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_signed_29_TCC1 0 (th_multiply_vec_signed_29_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_signed_28_TCC2 0 (th_multiply_vec_signed_28_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_signed_28_TCC1 0 (th_multiply_vec_signed_28_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_signed_21_TCC2 0 (th_multiply_vec_signed_21_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_signed_21_TCC1 0 (th_multiply_vec_signed_21_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_signed_20_TCC2 0 (th_multiply_vec_signed_20_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_signed_20_TCC1 0 (th_multiply_vec_signed_20_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_signed_15_TCC2 0 (th_multiply_vec_signed_15_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_signed_15_TCC1 0 (th_multiply_vec_signed_15_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_signed_14_TCC2 0 (th_multiply_vec_signed_14_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_signed_14_TCC1 0 (th_multiply_vec_signed_14_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_signed_13_TCC2 0 (th_multiply_vec_signed_13_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_signed_13_TCC1 0 (th_multiply_vec_signed_13_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_signed_12_TCC2 0 (th_multiply_vec_signed_12_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_signed_12_TCC1 0 (th_multiply_vec_signed_12_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_63_TCC2 0 (th_multiply_vec_63_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_63_TCC1 0 (th_multiply_vec_63_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_55_TCC2 0 (th_multiply_vec_55_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_55_TCC1 0 (th_multiply_vec_55_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_54_TCC2 0 (th_multiply_vec_54_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_54_TCC1 0 (th_multiply_vec_54_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_47_TCC2 0 (th_multiply_vec_47_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_47_TCC1 0 (th_multiply_vec_47_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_46_TCC2 0 (th_multiply_vec_46_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_46_TCC1 0 (th_multiply_vec_46_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_45_TCC2 0 (th_multiply_vec_45_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_45_TCC1 0 (th_multiply_vec_45_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_39_TCC2 0 (th_multiply_vec_39_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_39_TCC1 0 (th_multiply_vec_39_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_38_TCC2 0 (th_multiply_vec_38_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_38_TCC1 0 (th_multiply_vec_38_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_37_TCC2 0 (th_multiply_vec_37_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_37_TCC1 0 (th_multiply_vec_37_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_36_TCC2 0 (th_multiply_vec_36_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_36_TCC1 0 (th_multiply_vec_36_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_31_TCC2 0 (th_multiply_vec_31_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_31_TCC1 0 (th_multiply_vec_31_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_30_TCC2 0 (th_multiply_vec_30_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_30_TCC1 0 (th_multiply_vec_30_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_29_TCC2 0 (th_multiply_vec_29_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_29_TCC1 0 (th_multiply_vec_29_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_27_TCC2 0 (th_multiply_vec_27_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_27_TCC1 0 (th_multiply_vec_27_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_23_TCC2 0 (th_multiply_vec_23_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_23_TCC1 0 (th_multiply_vec_23_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_22_TCC2 0 (th_multiply_vec_22_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_22_TCC1 0 (th_multiply_vec_22_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_21_TCC2 0 (th_multiply_vec_21_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_21_TCC1 0 (th_multiply_vec_21_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_20_TCC2 0 (th_multiply_vec_20_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_20_TCC1 0 (th_multiply_vec_20_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_15_TCC2 0 (th_multiply_vec_15_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_15_TCC1 0 (th_multiply_vec_15_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_14_TCC2 0 (th_multiply_vec_14_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_14_TCC1 0 (th_multiply_vec_14_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_13_TCC2 0 (th_multiply_vec_13_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_13_TCC1 0 (th_multiply_vec_13_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_12_TCC2 0 (th_multiply_vec_12_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_12_TCC1 0 (th_multiply_vec_12_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_11_TCC2 0 (th_multiply_vec_11_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_11_TCC1 0 (th_multiply_vec_11_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_10_TCC2 0 (th_multiply_vec_10_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_10_TCC1 0 (th_multiply_vec_10_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_9_TCC2 0 (th_multiply_vec_9_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_9_TCC1 0 (th_multiply_vec_9_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_0_TCC2 0 (th_multiply_vec_0_TCC2-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_multiply_vec_0_TCC1 0 (th_multiply_vec_0_TCC1-1 nil 3725650783 ("" (subtype-tcc) nil nil) nil nil))("bitwise_and" bitwise_and IMP_bitwise_not_TCC1 0 (IMP_bitwise_not_TCC1-1 nil 3724689323 ("" (subtype-tcc) nil nil) nil nil))("unsigned" unsigned IMP_bitwise_not_TCC1 0 (IMP_bitwise_not_TCC1-1 nil 3725371010 ("" (subtype-tcc) nil nil) nil nil))("signed" signed unsigned_rec 0 (unsigned_rec-1 nil 3725808154 ("" (induct "n") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (skeep) (("3" (prop) (("1" (skeep) (("1" (inst -1 "x^(j+1,1)") (("1" (grind) (("1" (postpone) nil nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil) ("4" (postpone) nil nil)) nil) nil shostak))("signed" signed unsigned_rec_TCC3 0 (unsigned_rec_TCC3-1 nil 3725808153 ("" (subtype-tcc) nil nil) nil nil))("signed" signed unsigned_rec_TCC2 0 (unsigned_rec_TCC2-1 nil 3725808153 ("" (subtype-tcc) nil nil) nil nil))("signed" signed unsigned_rec_TCC1 0 (unsigned_rec_TCC1-1 nil 3725808153 ("" (subtype-tcc) nil nil) nil nil))("minus" minus unsigned_rec 0 (unsigned_rec-1 nil 3725125686 ("" (induct "n") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (skeep) (("3" (prop) (("1" (skeep) (("1" (inst -1 "x^(j+1,1)") (("1" (grind) (("1" (lemma "bv2nat_rec_ind1" ("i" "1" "j" "j" "x" "reverse(x)" "y" "reverse(x)^(j,0)")) (("1" (prop) (("1" (case "(LAMBDA (i: below(2 + j)): x(2 + j - i - 1)) ^ (j, 0) = (LAMBDA (i: below(1 + j)): x(1 - i + j))") (("1" (replaces -1) (("1" (grind) nil nil)) nil) ("2" (hide 2) (("2" (grind) (("2" (expand "^") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil) ("2" (case "j = 0") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "j = 0") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (bv2nat_rec def-decl "nat" bv_nat nil) (^ const-decl "bit" bv nil) (int_plus_int_is_int application-judgement "int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (nil application-judgement "above(n)" exp2 nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (TRUE const-decl "bool" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nat_induction formula-decl nil naturalnumbers nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (b2n const-decl "nbit" bit nil) (nbit type-eq-decl nil bit nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (unsigned const-decl "nat" unsigned nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (> const-decl "bool" reals nil) (<= const-decl "bool" reals nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) shostak))("minus" minus unsigned_rec_TCC3 0 (unsigned_rec_TCC3-1 nil 3725125683 ("" (subtype-tcc) nil nil) nil nil))("minus" minus unsigned_rec_TCC2 0 (unsigned_rec_TCC2-1 nil 3725125683 ("" (subtype-tcc) nil nil) nil nil))("minus" minus unsigned_rec_TCC1 0 (unsigned_rec_TCC1-1 nil 3725125683 ("" (subtype-tcc) nil nil) nil nil))("minus" minus unsigned_neg_sum 0 (unsigned_neg_sum-1 nil 3725063874 ("" (induct "n") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (skeep) (("4" (skeep) (("4" (prop) (("1" (inst -1 "bc^(j,1)") (("1" (lemma "unsigned_rec" ("n" "j" "x" "bc")) (("1" (replaces -1) (("1" (lemma "unsigned_rec" ("n" "j" "x" "(LAMBDA (i: below(1 + j)): NOT bc(i))")) (("1" (replaces -1) (("1" (case "bc(0)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (replace 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "j = 0") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil) ("2" (case "j = 0") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil) ((unsigned_rec formula-decl nil minus nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (b2n const-decl "nbit" bit nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil) (bv2nat_rec def-decl "nat" bv_nat nil) (^ const-decl "bit" bv nil) (odd_plus_even_is_odd application-judgement "odd_int" integers nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nat_induction formula-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (NOT const-decl "[bool -> bool]" booleans nil) (unsigned const-decl "nat" unsigned nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (N formal-const-decl "posnat" minus nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (<= const-decl "bool" reals nil) (> const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) shostak))("minus" minus unsigned_neg_sum1 0 (unsigned_neg_sum1-1 nil 3725213484 ("" (skeep) (("" (use "unsigned_neg_sum" ("n" "N" "bc" "bv")) nil nil)) nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (unsigned_neg_sum formula-decl nil minus nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (<= const-decl "bool" reals nil) (N formal-const-decl "posnat" minus nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)) shostak))("minus" minus unsigned_fill_F 0 (unsigned_fill_F-1 nil 3725214739 ("" (skeep) (("" (expand "unsigned") (("" (case "(LAMBDA (i: below(N)): bv(N - 1 - i)) = fill[N](FALSE)") (("1" (replaces -1) (("1" (rewrite "bv2nat_fill_F[N]") nil nil)) nil) ("2" (decompose-equality) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (unsigned const-decl "nat" unsigned nil) (nil application-judgement "above(n)" exp2 nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (int_plus_int_is_int application-judgement "int" integers nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (bv2nat_rec def-decl "nat" bv_nat nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (bvec0 const-decl "bit" bv nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (TRUE const-decl "bool" booleans nil) (bv2nat_fill_F formula-decl nil bv_nat nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" minus nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil nat_types nil) (fill const-decl "bit" bv nil) (FALSE const-decl "bool" booleans nil)) shostak))("minus" minus unsigned_fill_T 0 (unsigned_fill_T-1 nil 3725302871 ("" (skeep) (("" (use "unsigned_neg_sum1") (("" (use "unsigned_fill_F") (("" (assert) (("" (prop) (("1" (grind) nil nil) ("2" (case "unsigned(LAMBDA (i: below(N)): NOT bv(i)) = 0") (("1" (replaces -1) (("1" (grind) nil nil)) nil) ("2" (hide 3) (("2" (expand "bvec1") (("2" (replaces -2) (("2" (assert) (("2" (rewrite "unsigned_fill_F[N]") (("2" (hide 2 3) (("2" (decompose-equality) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((unsigned_neg_sum1 formula-decl nil minus nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" minus nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (NOT const-decl "[bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (TRUE const-decl "bool" booleans nil) (bvec0 const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (FALSE const-decl "bool" booleans nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (int_plus_int_is_int application-judgement "int" integers nil) (exp2 def-decl "posnat" exp2 nil) (unsigned const-decl "nat" unsigned nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (bv2nat_rec def-decl "nat" bv_nat nil) (b2n const-decl "nbit" bit nil) (^ const-decl "bit" bv nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (bvec1 const-decl "bit" bv nil) (unsigned_fill_F formula-decl nil minus nil)) shostak))("minus" minus unsigned_eq0 0 (unsigned_eq0-1 nil 3725295659 ("" (skeep) (("" (expand "unsigned") (("" (rewrite "bv2nat_eq0[N]") (("1" (decompose-equality) (("1" (grind) nil nil)) nil) ("2" (lemma "bv2nat_eq0[N]") (("2" (inst -1 "reverse(bv)") (("2" (prop) (("1" (use "reverse_inj") (("1" (grind) (("1" (decompose-equality) nil nil) ("2" (decompose-equality) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((bv2nat_eq0 formula-decl nil bv_nat nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" minus nil) (below type-eq-decl nil nat_types nil) (fill const-decl "bit" bv nil) (FALSE const-decl "bool" booleans nil) (bvec0 const-decl "bit" bv nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (reverse_inj formula-decl nil unsigned nil) (nil application-judgement "above(n)" exp2 nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (int_plus_int_is_int application-judgement "int" integers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (bv2nat_rec def-decl "nat" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("minus" minus unsigned_eq_max 0 (unsigned_eq_max-1 nil 3725329243 ("" (skeep) (("" (expand "unsigned") (("" (rewrite "bv2nat_eq_max[N]") (("1" (decompose-equality) (("1" (grind) nil nil)) nil) ("2" (lemma "bv2nat_eq_max[N]") (("2" (inst -1 "(LAMBDA (i: below(N)): bv(N - 1 - i)) ") (("2" (assert) (("2" (case "bv = reverse(fill[N](TRUE))") (("1" (hide -2 -3 1) (("1" (decompose-equality) (("1" (grind) (("1" (grind) (("1" (decompose-equality) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2 3) (("2" (rewrite "reverse_inj") (("2" (replaces -1) (("2" (hide 2) (("2" (decompose-equality) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((bv2nat_eq_max formula-decl nil bv_nat nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" minus nil) (nil application-judgement "above(n)" exp2 nil) (below type-eq-decl nil nat_types nil) (fill const-decl "bit" bv nil) (TRUE const-decl "bool" booleans nil) (bvec1 const-decl "bit" bv nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (reverse_inj formula-decl nil unsigned nil) (unsigned const-decl "nat" unsigned nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("multiply" multiply multiply_add_distributive 0 (multiply_add_distributive-1 nil 3725641663 ("" (skeep) (("" (rewrite "unsigned_inv") (("" (postpone) nil nil)) nil)) nil) nil shostak))("signed" signed extz_unsigned 0 (extz_unsigned-1 nil 3725819433 ("" (skeep :preds? t) (("" (case "m = N") (("1" (replace -1) (("1" (assert) (("1" (expand "unsigned") (("1" (expand "bv2nat") (("1" (replace -1) (("1" (assert) (("1" (case "(LAMBDA (i: below(m)): bv(N - 1 - i)) = (LAMBDA (i: below(N)): bv(N - 1 - i))") (("1" (replaces -1) (("1" (assert) (("1" (grind) (("1" (grind) (("1" (postpone) nil nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil) nil shostak))("signed" signed extz_unsigned_TCC5 0 (extz_unsigned_TCC5-1 nil 3725819429 ("" (subtype-tcc) nil nil) nil nil))("signed" signed extz_unsigned_TCC4 0 (extz_unsigned_TCC4-1 nil 3725819429 ("" (subtype-tcc) nil nil) nil nil))("signed" signed extz_unsigned_TCC3 0 (extz_unsigned_TCC3-1 nil 3725819429 ("" (subtype-tcc) nil nil) nil nil))("signed" signed extz_unsigned_TCC2 0 (extz_unsigned_TCC2-1 nil 3725819429 ("" (subtype-tcc) nil nil) nil nil))("signed" signed extz_unsigned_TCC1 0 (extz_unsigned_TCC1-1 nil 3725819429 ("" (subtype-tcc) nil nil) nil nil))("multiply" multiply multiply_def 0 (multiply_def-1 nil 3725642156 ("" (skeep) (("" (rewrite "unsigned_inv") (("" (rewrite "mod_lt_nat") (("" (hide 2) (("" (use "unsigned_upperbound[N]") (("" (use "unsigned_upperbound[N]" ("bv" "bv2")) (("" (assert) (("" (mult-ineq -1 -2) (("" (hide -2 -3) (("" (assert) (("" (use "exp2_sum") (("" (swap-rel -1) (("" (replaces -1) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (nil application-judgement "above(n)" exp2 nil) (unsigned_inv formula-decl nil to_vec_inc nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (N formal-const-decl "nat" multiply nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (unsigned const-decl "nat" unsigned nil) (nil application-judgement "below(m)" mod nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (lt_times_lt_any1 formula-decl nil extra_real_props nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (TRUE const-decl "bool" booleans nil) (exp2_sum formula-decl nil exp2 nil) (unsigned_upperbound formula-decl nil unsigned nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (mod_lt_nat formula-decl nil mod nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil)) shostak))("multiply" multiply multiply_vec_commutativity 0 (multiply_vec_commutativity-1 nil 3725386561 ("" (skeep) (("" (rewrite "to_vec_inj_rev") nil nil)) nil) ((nil application-judgement "below(m)" mod nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (nil application-judgement "above(n)" exp2 nil) (to_vec_inj_rev formula-decl nil to_vec_inc nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (N formal-const-decl "nat" multiply nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (unsigned const-decl "nat" unsigned nil)) shostak))("multiply" multiply multiply_vec_commutativity_TCC2 0 (multiply_vec_commutativity_TCC2-1 nil 3725819202 ("" (subtype-tcc) nil nil) nil nil))("multiply" multiply multiply_vec_commutativity_TCC1 0 (multiply_vec_commutativity_TCC1-1 nil 3725819202 ("" (subtype-tcc) nil nil) nil nil))("multiply" multiply mult_vec_range_def 0 (mult_vec_range_def-1 nil 3725818025 ("" (skeep) (("" (rewrite "unsigned_inv") nil nil)) nil) ((nil application-judgement "above(n)" exp2 nil) (N formal-const-decl "nat" multiply nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (unsigned_inv formula-decl nil to_vec_inc nil) (nil application-judgement "below(m)" mod nil)) shostak))("multiply" multiply mult_range_vec_def 0 (mult_range_vec_def-1 nil 3725818573 ("" (skeep) (("" (rewrite "unsigned_inv") (("" (assert) nil nil)) nil)) nil) ((unsigned_inv formula-decl nil to_vec_inc nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" multiply nil) (nil application-judgement "below(m)" mod nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (nil application-judgement "above(n)" exp2 nil)) shostak))("multiply_signed" multiply_signed mult_range_vec_def_TCC1 0 (mult_range_vec_def_TCC1-1 nil 3725823369 ("" (subtype-tcc) nil nil) nil nil))("to_vec_inc" to_vec_inc extz_unsigned_TCC5 0 (extz_unsigned_TCC5-1 nil 3725824031 ("" (subtype-tcc) nil nil) nil nil))("to_vec_inc" to_vec_inc exts_signed_TCC3 0 (exts_signed_TCC3-1 nil 3725826421 ("" (subtype-tcc) nil nil) nil nil))("to_vec_inc" to_vec_inc exts_signed_TCC2 0 (exts_signed_TCC2-1 nil 3725826421 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_63 0 (th_add_vec_signed_63-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_62 0 (th_add_vec_signed_62-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_61 0 (th_add_vec_signed_61-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_60 0 (th_add_vec_signed_60-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_59 0 (th_add_vec_signed_59-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_58 0 (th_add_vec_signed_58-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_57 0 (th_add_vec_signed_57-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_56 0 (th_add_vec_signed_56-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_55 0 (th_add_vec_signed_55-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_54 0 (th_add_vec_signed_54-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_53 0 (th_add_vec_signed_53-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_52 0 (th_add_vec_signed_52-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_51 0 (th_add_vec_signed_51-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_50 0 (th_add_vec_signed_50-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_49 0 (th_add_vec_signed_49-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_48 0 (th_add_vec_signed_48-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_47 0 (th_add_vec_signed_47-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_46 0 (th_add_vec_signed_46-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_45 0 (th_add_vec_signed_45-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_44 0 (th_add_vec_signed_44-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_43 0 (th_add_vec_signed_43-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_42 0 (th_add_vec_signed_42-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_41 0 (th_add_vec_signed_41-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_40 0 (th_add_vec_signed_40-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_39 0 (th_add_vec_signed_39-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_38 0 (th_add_vec_signed_38-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_37 0 (th_add_vec_signed_37-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_36 0 (th_add_vec_signed_36-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_35 0 (th_add_vec_signed_35-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_34 0 (th_add_vec_signed_34-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_33 0 (th_add_vec_signed_33-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_32 0 (th_add_vec_signed_32-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_31 0 (th_add_vec_signed_31-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_30 0 (th_add_vec_signed_30-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_29 0 (th_add_vec_signed_29-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_28 0 (th_add_vec_signed_28-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_27 0 (th_add_vec_signed_27-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_26 0 (th_add_vec_signed_26-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_25 0 (th_add_vec_signed_25-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_24 0 (th_add_vec_signed_24-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_23 0 (th_add_vec_signed_23-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_22 0 (th_add_vec_signed_22-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_21 0 (th_add_vec_signed_21-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_20 0 (th_add_vec_signed_20-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_19 0 (th_add_vec_signed_19-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_18 0 (th_add_vec_signed_18-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_17 0 (th_add_vec_signed_17-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_16 0 (th_add_vec_signed_16-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_15 0 (th_add_vec_signed_15-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_14 0 (th_add_vec_signed_14-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_13 0 (th_add_vec_signed_13-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_12 0 (th_add_vec_signed_12-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_11 0 (th_add_vec_signed_11-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_10 0 (th_add_vec_signed_10-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_9 0 (th_add_vec_signed_9-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_8 0 (th_add_vec_signed_8-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_7 0 (th_add_vec_signed_7-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_6 0 (th_add_vec_signed_6-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_5 0 (th_add_vec_signed_5-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_4 0 (th_add_vec_signed_4-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_3 0 (th_add_vec_signed_3-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_2 0 (th_add_vec_signed_2-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_1 0 (th_add_vec_signed_1-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_signed_0 0 (th_add_vec_signed_0-1 nil 3725650857 ("" (arith-strat "unsigned") nil) nil shostak))("test_lemmas_arith_complete_3" test_lemmas_arith_complete_3 th_add_vec_0_TCC2 0 (th_add_vec_0_TCC2-1 nil 3725650121 ("" (arith-strat "unsigned") nil) nil nil))("test_lemmas_arith_complete_5" test_lemmas_arith_complete_5 th_add_vec_0_TCC2 0 (th_add_vec_0_TCC2-1 nil 3725666174 ("" (arith-strat "unsigned") nil) nil nil))("minus" minus add_vec_unsigned 0 (add_vec_unsigned-1 nil 3725812156 ("" (skeep) (("" (rewrite "unsigned_inv") (("" (case "unsigned[N](LAMBDA (i: below(N)): NOT bv(i)) < exp2(N) - 1") (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil)) nil)) nil) nil shostak))("modulo" modulo modulo_mod_diff1 0 (modulo_mod_diff1-1 nil 3725905583 ("" (skeep :preds? t) (("" (grind) (("1" (rewrite "ceiling_int") (("1" (grind) nil nil)) nil) ("2" (mult-by 3 "-1" -) (("2" (assert) (("2" (factor 3) (("2" (div-by 3 "m" -) (("2" (use "floor_ceiling_nonint") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((mod const-decl "{k | abs(k) < abs(j)}" mod nil) (integer? const-decl "bool" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (rat_times_rat_is_rat application-judgement "rat" rationals nil) (rat_minus_rat_is_rat application-judgement "rat" rationals nil) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (integer nonempty-type-from-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (ceiling_int formula-decl nil floor_ceil nil) (both_sides_div1 formula-decl nil real_props nil) (times_div_cancel1 formula-decl nil extra_real_props nil) (times_div_cancel2 formula-decl nil extra_real_props nil) (floor_ceiling_nonint formula-decl nil floor_ceil nil) (= const-decl "[T, T -> boolean]" equalities nil) (int_plus_int_is_int application-judgement "int" integers nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (both_sides_times1 formula-decl nil real_props nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)) shostak))("modulo" modulo extz_mod_rel_TCC7 0 (extz_mod_rel_TCC7-1 nil 3725908756 ("" (subtype-tcc) nil nil) nil nil))("to_vec_inc" to_vec_inc unsigned_ib_one 0 (unsigned_ib_one-1 nil 3725909568 ("" (skeep :preds? t) (("" (postpone) nil nil)) nil) nil shostak))("to_vec_inc" to_vec_inc unsigned_ib_one_TCC1 0 (unsigned_ib_one_TCC1-1 nil 3725909565 ("" (subtype-tcc) nil nil) nil nil))("modulo" modulo slice_mod_rel 0 (slice_mod_rel-1 nil 3725919288 ("" (skeep :preds? t) (("" (postpone) nil nil)) nil) nil shostak))("modulo" modulo slice_mod_rel_TCC2 0 (slice_mod_rel_TCC2-1 nil 3725919284 ("" (subtype-tcc) nil nil) nil nil))("modulo" modulo slice_mod_rel_TCC1 0 (slice_mod_rel_TCC1-1 nil 3725919284 ("" (subtype-tcc) nil nil) nil nil))("modulo" modulo mask_mod_rel_TCC2 0 (mask_mod_rel_TCC2-1 nil 3725925723 ("" (subtype-tcc) nil nil) nil nil))("modulo" modulo mask_mod_rel_TCC1 0 (mask_mod_rel_TCC1-1 nil 3725925723 ("" (subtype-tcc) nil nil) nil nil))("multiply_signed" multiply_signed multiply_signed_rel 0 (multiply_signed_rel-1 nil 3725842244 ("" (skeep) (("" (rewrite "to_vec_inj_rev") (("" (hide 2) (("" (case "unsigned(bv1) < exp2(N - 1)") (("1" (replace -1) (("1" (case "unsigned(bv2) < exp2(M-1)") (("1" (replace -1) (("1" (propax) nil nil)) nil) ("2" (replace 1) (("2" (assert) (("2" (rewrite "mod_lt_int") (("1" (postpone) nil nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil) nil shostak))("test_lemmas" test_lemmas extz_test4_TCC2 0 (extz_test4_TCC2-1 nil 3722554747 ("" (subtype-tcc) nil nil) ((real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("multiply" multiply multiply_vec_range_op_eq 0 (multiply_vec_range_op_eq-1 nil 3725992798 ("" (grind) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (bv2nat_rec def-decl "nat" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (even_minus_even_is_even application-judgement "even_int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("to_vec_inc" to_vec_inc exts_signed_TCC2 0 (exts_signed_TCC2-1 nil 3725991838 ("" (subtype-tcc) nil nil) ((nnint_plus_posint_is_posint application-judgement "posint" integers nil)) nil))("test_lemmas" test_lemmas exts_test4_TCC1 0 (exts_test4_TCC1-1 nil 3725987954 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas" test_lemmas exts_test3_TCC1 0 (exts_test3_TCC1-1 nil 3725987954 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas" test_lemmas exts_test1_TCC1 0 (exts_test1_TCC1-1 nil 3725987954 ("" (subtype-tcc) nil nil) nil nil))("bitwise_not" bitwise_not not_inv 0 (not_inv-1 nil 3724683391 ("" (skeep :preds? t) (("" (decompose-equality) (("" (inst -1 0) (("1" (grind) nil nil) ("2" (typepred "N") (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" bitwise_not nil) (below type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (NOT const-decl "[bool -> bool]" booleans nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) shostak))("bitwise_not" bitwise_not bitnot_inv 0 (bitnot_inv-1 nil 3724684984 ("" (grind) nil nil) nil shostak))("general_lemmas" general_lemmas not_inv 0 (not_inv-1 nil 3726329496 ("" (skeep) (("" (grind) (("" (decompose-equality) nil nil)) nil)) nil) ((bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil)) shostak))("bitwise_and" bitwise_and and_associativity 0 (and_associativity-1 nil 3724686291 ("" (skeep :preds? t) nil nil) nil shostak))("bitwise_and" bitwise_and and_commutativity 0 (and_commutativity-1 nil 3724686215 ("" (grind) (("" (decompose-equality) (("" (grind) nil nil)) nil)) nil) ((AND const-decl "[bool, bool -> bool]" booleans nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bitwise_and nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) shostak))("general_lemmas" general_lemmas bitwise_not_inv 0 (bitwise_not_inv-1 nil 3726329574 ("" (grind) (("" (decompose-equality) nil nil)) nil) ((below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) shostak))("bitwise_or" bitwise_or or_and_distributive 0 (or_and_distributive-1 nil 3724691175 ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil)) nil) ((OR const-decl "[bool, bool -> bool]" booleans nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bitwise_or nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) shostak))("bitwise_or" bitwise_or and_or_distributive 0 (and_or_distributive-1 nil 3724690989 ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil)) nil) ((AND const-decl "[bool, bool -> bool]" booleans nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bitwise_or nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) shostak))("bitwise_or" bitwise_or or_associativity 0 (or_associativity-1 nil 3724690191 ("" (skeep) nil nil) nil shostak))("bitwise_or" bitwise_or or_commutativity 0 (or_commutativity-1 nil 3724689941 ("" (skeep :preds? t) (("" (decompose-equality) (("" (grind) nil nil)) nil)) nil) ((OR const-decl "[bool, bool -> bool]" booleans nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bitwise_or nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) shostak))("bitwise_and" bitwise_and bitwise_and_op_eq 0 (bitwise_and_op_eq-1 nil 3725989456 ("" (grind) nil nil) nil shostak))("bitwise_and" bitwise_and not_and_zero 0 (not_and_zero-1 nil 3724689340 ("" (skeep :preds? t) (("" (decompose-equality) (("" (grind) nil nil)) nil)) nil) ((AND const-decl "[bool, bool -> bool]" booleans nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (NOT const-decl "[bool -> bool]" booleans nil) (below type-eq-decl nil nat_types nil) (bvec0 const-decl "bit" bv nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bitwise_and nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) shostak))("bitwise_or" bitwise_or and_or_demorgan 0 (and_or_demorgan-1 nil 3724692417 ("" (grind) (("" (decompose-equality) (("1" (grind) nil nil) ("2" (skeep :preds? t) (("2" (grind) nil nil)) nil)) nil)) nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (N formal-const-decl "nat" bitwise_or nil) (below type-eq-decl nil naturalnumbers nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (bv1!1 skolem-const-decl "bvec[N]" bitwise_or nil) (upfrom nonempty-type-eq-decl nil integers nil) (M formal-const-decl "upfrom(N)" bitwise_or nil)) shostak))("bitwise_or" bitwise_or and_or_demorgan_TCC1 0 (and_or_demorgan_TCC1-1 nil 3726331225 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bitwise_or nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("bitwise_or" bitwise_or not_or_one 0 (not_or_one-1 nil 3724691560 ("" (grind) (("" (decompose-equality) (("" (grind) nil nil)) nil)) nil) ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (N formal-const-decl "nat" bitwise_or nil) (below type-eq-decl nil naturalnumbers nil) (bvec1 const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "bvec[N]" bv_bitwise nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)) shostak))("bitwise_not" bitwise_not bitwise_not_op_eq 0 (bitwise_not_op_eq-1 nil 3725989411 ("" (grind) nil nil) nil shostak))("bitwise_or" bitwise_or bitwise_or_op_eq 0 (bitwise_or_op_eq-1 nil 3725989550 ("" (grind) nil nil) nil shostak))("bitwise_xor" bitwise_xor bitwise_or_op_eq 0 (bitwise_or_op_eq-1 nil 3725989604 ("" (grind) nil nil) ((/= const-decl "boolean" notequal nil) (XOR const-decl "bool" xor_def nil)) shostak))("bitwise_xor" bitwise_xor xor_def2 0 (xor_def2-1 nil 3724696215 ("" (grind) (("" (decompose-equality) (("" (grind) nil nil)) nil)) nil) ((NOT const-decl "[bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bitwise_xor nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (XOR const-decl "bool" xor_def nil) (/= const-decl "boolean" notequal nil)) shostak))("bitwise_xor" bitwise_xor xor_def 0 (xor_def-1 nil 3724696292 ("" (grind) (("" (decompose-equality) (("" (grind) nil nil)) nil)) nil) ((NOT const-decl "[bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bitwise_xor nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (XOR const-decl "bool" xor_def nil) (/= const-decl "boolean" notequal nil)) shostak))("bitwise_xor" bitwise_xor not_xor_one 0 (not_xor_one-1 nil 3724693900 ("" (grind) (("" (decompose-equality) (("" (grind) nil nil)) nil)) nil) ((NOT const-decl "[bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (below type-eq-decl nil nat_types nil) (bvec1 const-decl "bit" bv nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bitwise_xor nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (XOR const-decl "bool" xor_def nil) (/= const-decl "boolean" notequal nil)) shostak))("bitwise_xor" bitwise_xor xor_rev 0 (xor_rev-1 nil 3724693847 ("" (grind) nil nil) ((bvec1 const-decl "bit" bv nil) (/= const-decl "boolean" notequal nil) (XOR const-decl "bool" xor_def nil)) shostak))("bitwise_xor" bitwise_xor xor_associativity 0 (xor_associativity-1 nil 3724693545 ("" (grind) (("" (decompose-equality) (("" (grind) nil nil)) nil)) nil) ((NOT const-decl "[bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bitwise_xor nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (XOR const-decl "bool" xor_def nil) (/= const-decl "boolean" notequal nil)) shostak))("bitwise_xor" bitwise_xor xor_commutativity 0 (xor_commutativity-1 nil 3724693465 ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil)) nil) ((XOR const-decl "bool" xor_def nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bitwise_xor nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) shostak))("bitwise_shift" bitwise_shift bvec0_range_inv_TCC1 0 (bvec0_range_inv_TCC1-1 nil 3724707756 ("" (subtype-tcc) nil nil) ((bvec0 const-decl "bit" bv nil)) nil))("bitwise_shift" bitwise_shift right_shift_toomuch 0 (right_shift_toomuch-1 nil 3724708344 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) shostak))("bitwise_shift" bitwise_shift left_shift_toomuch 0 (left_shift_toomuch-1 nil 3724708299 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) shostak))("bitwise_shift" bitwise_shift bitwise_rightshift_op_eq 0 (bitwise_rightshift_op_eq-1 nil 3725989696 ("" (grind) nil nil) nil shostak))("bitwise_shift" bitwise_shift bitwise_leftshift_op_eq 0 (bitwise_leftshift_op_eq-1 nil 3725989668 ("" (grind) nil nil) nil shostak))("bitwise_rotate" bitwise_rotate bitwise_rotate_TCC7 0 (bitwise_rotate_TCC7-1 nil 3726335160 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (N formal-const-decl "nat" bitwise_rotate nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}" real_defs nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil)) nil))("additional_arithmetic" additional_arithmetic power_exp2_TCC1 0 (power_exp2_TCC1-1 nil 3724865964 ("" (subtype-tcc) nil nil) nil nil))("slice_raw" slice_raw mask_slice_rep 0 (mask_slice_rep-1 nil 3724876507 ("" (grind) (("" (decompose-equality) nil nil)) nil) ((below type-eq-decl nil naturalnumbers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (mask const-decl "bvec[m]" mask nil) (NEW_SIZE type-eq-decl nil mask nil) (slice_raw const-decl "bvec[j - i + 1]" slice_raw nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (<= const-decl "bool" reals nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" slice_raw nil) (below type-eq-decl nil nat_types nil)) shostak))("slice_raw" slice_raw mask_slice_rep_TCC2 0 (mask_slice_rep_TCC2-1 nil 3724876503 ("" (subtype-tcc) nil nil) nil nil))("slice_raw" slice_raw mask_slice_rep_TCC1 0 (mask_slice_rep_TCC1-1 nil 3724876503 ("" (subtype-tcc) nil nil) nil nil))("general_lemmas" general_lemmas slice_single 0 (slice_single-1 nil 3726338555 ("" (bvec-strat) nil nil) ((below type-eq-decl nil nat_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (> const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (slice_raw const-decl "bvec[j - i + 1]" slice_raw nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (below type-eq-decl nil naturalnumbers nil)) shostak))("general_lemmas" general_lemmas slice_single_TCC3 0 (slice_single_TCC3-1 nil 3726338553 ("" (subtype-tcc) nil nil) nil nil))("general_lemmas" general_lemmas slice_single_TCC2 0 (slice_single_TCC2-1 nil 3726338553 ("" (subtype-tcc) nil nil) nil nil))("general_lemmas" general_lemmas slice_single_TCC1 0 (slice_single_TCC1-1 nil 3726338553 ("" (subtype-tcc) nil nil) nil nil))("unsigned" unsigned bv2nat_rec_ind 0 (bv2nat_rec_ind-1 nil 3725369880 ("" (induct "j") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (skeep) (("3" (prop) (("1" (skeep :preds? t) (("1" (skeep) (("1" (assert) (("1" (expand "bv2nat_rec" 1) (("1" (assert) (("1" (case "x ^ (1 + j_1 + k, 0) ^ j_1 = x(j_1)") (("1" (replaces -1) (("1" (case "x ^ (j_1 + k, 0) ^ j_1 = x(j_1)") (("1" (replaces -1) (("1" (assert) (("1" (inst -2 "i + 1" "x") (("1" (inst -2 "k + 1") (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "j_1 = 0") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil) ("4" (grind) nil nil) ("5" (grind) nil nil)) nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (b2n const-decl "nbit" bit nil) (exp2 def-decl "posnat" exp2 nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (TRUE const-decl "bool" booleans nil) (int_plus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (^ const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (nil application-judgement "above(n)" exp2 nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nat_induction formula-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (bv2nat_rec def-decl "nat" bv_nat nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (<= const-decl "bool" reals nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil)) shostak))("unsigned" unsigned bv2nat_rec_ind_TCC6 0 (bv2nat_rec_ind_TCC6-1 nil 3725369878 ("" (subtype-tcc) nil nil) ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("unsigned" unsigned bv2nat_rec_ind_TCC5 0 (bv2nat_rec_ind_TCC5-1 nil 3725369878 ("" (subtype-tcc) nil nil) ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("unsigned" unsigned bv2nat_rec_ind_TCC4 0 (bv2nat_rec_ind_TCC4-1 nil 3725369878 ("" (subtype-tcc) nil nil) nil nil))("unsigned" unsigned bv2nat_rec_ind_TCC3 0 (bv2nat_rec_ind_TCC3-1 nil 3725369878 ("" (subtype-tcc) nil nil) nil nil))("unsigned" unsigned bv2nat_rec_ind_TCC2 0 (bv2nat_rec_ind_TCC2-1 nil 3725369878 ("" (subtype-tcc) nil nil) nil nil))("unsigned" unsigned bv2nat_rec_ind_TCC1 0 (bv2nat_rec_ind_TCC1-1 nil 3725369878 ("" (subtype-tcc) nil nil) ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("unsigned" unsigned bv2nat_rec_ind1 0 (bv2nat_rec_ind1-1 nil 3725370084 ("" (induct "j") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (skeep) (("3" (prop) (("1" (skeep :preds? t) (("1" (expand "bv2nat_rec" 1) (("1" (inst -2 "i" "x^(i+j_1, 0)" "y^(i+j_1-1,0)") (("1" (grind) (("1" (lemma "bv2nat_rec_ind" ("i" "i+2" "j" "j_1" "x" "x")) (("1" (inst -1 "i+1") (("1" (assert) (("1" (case "x ^ (1 + i + j_1, 0) = x") (("1" (replaces -1) (("1" (grind) nil nil)) nil) ("2" (expand "^") (("2" (decompose-equality) nil nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil) ("2" (case "j_1 = 0") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil) ("4" (grind) nil nil) ("5" (grind) nil nil)) nil) ((even_minus_odd_is_odd application-judgement "odd_int" integers nil) (NOT const-decl "[bool -> bool]" booleans nil) (odd_plus_even_is_odd application-judgement "odd_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_plus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (i skolem-const-decl "nat" unsigned nil) (j_1 skolem-const-decl "nat" unsigned nil) (bv2nat_rec_ind formula-decl nil unsigned nil) (TRUE const-decl "bool" booleans nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (exp2 def-decl "posnat" exp2 nil) (nil application-judgement "above(n)" exp2 nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat_induction formula-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (bv2nat_rec def-decl "nat" bv_nat nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (<= const-decl "bool" reals nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (> const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil)) shostak))("unsigned" unsigned bv2nat_rec_ind1_TCC4 0 (bv2nat_rec_ind1_TCC4-1 nil 3725370083 ("" (subtype-tcc) nil nil) ((nnint_plus_posint_is_posint application-judgement "posint" integers nil)) nil))("unsigned" unsigned bv2nat_rec_ind1_TCC3 0 (bv2nat_rec_ind1_TCC3-1 nil 3725370083 ("" (subtype-tcc) nil nil) ((nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("unsigned" unsigned bv2nat_rec_ind1_TCC2 0 (bv2nat_rec_ind1_TCC2-1 nil 3725370083 ("" (subtype-tcc) nil nil) ((nnint_plus_posint_is_posint application-judgement "posint" integers nil)) nil))("unsigned" unsigned bv2nat_rec_ind1_TCC1 0 (bv2nat_rec_ind1_TCC1-1 nil 3725370083 ("" (subtype-tcc) nil nil) ((nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("signed" signed unsigned_neg_sum1 0 (unsigned_neg_sum1-1 nil 3725809762 ("" (skeep) (("" (use "unsigned_neg_sum[N]" ("n" "N" "bc" "bv")) nil nil)) nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (unsigned_neg_sum formula-decl nil signed nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (<= const-decl "bool" reals nil) (N formal-const-decl "posnat" signed nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)) shostak))("signed" signed unsigned_rec 0 (unsigned_rec-1 nil 3725809199 ("" (induct "n") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (skeep) (("3" (prop) (("1" (skeep) (("1" (inst -1 "x^(j+1,1)") (("1" (grind) (("1" (use "bv2nat_rec_ind1[j+2]" ("i" "1" "j" "j" "x" "reverse(x)" "y" "reverse(x)^(j,0)")) (("1" (prop) (("1" (case "(LAMBDA (i: below(2 + j)): x(2 + j - i - 1)) ^ (j, 0) = (LAMBDA (i: below(1 + j)): x(1 - i + j))") (("1" (replaces -1) (("1" (grind) nil nil)) nil) ("2" (grind) (("2" (expand "^") (("2" (propax) nil nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil) ("2" (case "j = 0") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "j = 0") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (bv2nat_rec def-decl "nat" bv_nat nil) (^ const-decl "bit" bv nil) (int_plus_int_is_int application-judgement "int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (nil application-judgement "above(n)" exp2 nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (TRUE const-decl "bool" booleans nil) (bv2nat_rec_ind1 formula-decl nil unsigned nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nat_induction formula-decl nil naturalnumbers nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (b2n const-decl "nbit" bit nil) (nbit type-eq-decl nil bit nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (unsigned const-decl "nat" unsigned nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (> const-decl "bool" reals nil) (<= const-decl "bool" reals nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) shostak))("signed" signed unsigned_rec_TCC3 0 (unsigned_rec_TCC3-1 nil 3725809198 ("" (subtype-tcc) nil nil) nil nil))("signed" signed unsigned_rec_TCC2 0 (unsigned_rec_TCC2-1 nil 3725809198 ("" (subtype-tcc) nil nil) nil nil))("signed" signed unsigned_rec_TCC1 0 (unsigned_rec_TCC1-1 nil 3725809198 ("" (subtype-tcc) nil nil) nil nil))("signed" signed unsigned_neg_sum 0 (unsigned_neg_sum-1 nil 3725809559 ("" (induct "n") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (skeep) (("4" (skeep) (("4" (prop) (("1" (inst -1 "bc^(j,1)") (("1" (lemma "unsigned_rec[j]" ("n" "j" "x" "bc")) (("1" (replaces -1) (("1" (lemma "unsigned_rec[j]" ("n" "j" "x" "(LAMBDA (i: below(1 + j)): NOT bc(i))")) (("1" (replaces -1) (("1" (case "bc(0)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (replace 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "j = 0") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil) ("2" (case "j = 0") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil) ((unsigned_rec formula-decl nil signed nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (b2n const-decl "nbit" bit nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil) (bv2nat_rec def-decl "nat" bv_nat nil) (^ const-decl "bit" bv nil) (odd_plus_even_is_odd application-judgement "odd_int" integers nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (j skolem-const-decl "nat" signed nil) (int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nat_induction formula-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (NOT const-decl "[bool -> bool]" booleans nil) (unsigned const-decl "nat" unsigned nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (N formal-const-decl "posnat" signed nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (<= const-decl "bool" reals nil) (> const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) shostak))("signed" signed unsigned_fill_F 0 (unsigned_fill_F-1 nil 3725809843 ("" (skeep) (("" (expand "unsigned") (("" (case "(LAMBDA (i: below(N)): bv(N - 1 - i)) = fill[N](FALSE)") (("1" (replaces -1) (("1" (rewrite "bv2nat_fill_F[N]") nil nil)) nil) ("2" (decompose-equality) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (unsigned const-decl "nat" unsigned nil) (nil application-judgement "above(n)" exp2 nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (int_plus_int_is_int application-judgement "int" integers nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (bv2nat_rec def-decl "nat" bv_nat nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (bvec0 const-decl "bit" bv nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (TRUE const-decl "bool" booleans nil) (bv2nat_fill_F formula-decl nil bv_nat nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" signed nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil nat_types nil) (fill const-decl "bit" bv nil) (FALSE const-decl "bool" booleans nil)) shostak))("signed" signed unsigned_fill_T 0 (unsigned_fill_T-1 nil 3725809924 ("" (skeep) (("" (use "unsigned_neg_sum1[N]") (("" (use "unsigned_fill_F[N]") (("" (assert) (("" (prop) (("1" (grind) nil nil) ("2" (case "unsigned(LAMBDA (i: below(N)): NOT bv(i)) = 0") (("1" (replaces -1) (("1" (grind) nil nil)) nil) ("2" (expand "bvec1") (("2" (replaces -2) (("2" (assert) (("2" (rewrite "unsigned_fill_F[N]") (("2" (decompose-equality) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((unsigned_neg_sum1 formula-decl nil signed nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" signed nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (= const-decl "[T, T -> boolean]" equalities nil) (NOT const-decl "[bool -> bool]" booleans nil) (TRUE const-decl "bool" booleans nil) (FALSE const-decl "bool" booleans nil) (below type-eq-decl nil nat_types nil) (bvec0 const-decl "bit" bv nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (int_plus_int_is_int application-judgement "int" integers nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (bv2nat_rec def-decl "nat" bv_nat nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (exp2 def-decl "posnat" exp2 nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (bvec1 const-decl "bit" bv nil) (unsigned_fill_F formula-decl nil signed nil)) shostak))("unsigned" unsigned unsigned_eq_zero 0 (unsigned_eq_zero-1 nil 3726341690 ("" (skeep) (("" (expand "unsigned") (("" (postpone) nil nil)) nil)) nil) nil shostak))("signed" signed unsigned_eq0 0 (unsigned_eq0-1 nil 3725810070 ("" (skeep) (("" (expand "unsigned") (("" (rewrite "bv2nat_eq0[N]") (("1" (decompose-equality) (("1" (grind) nil nil)) nil) ("2" (lemma "bv2nat_eq0[N]") (("2" (inst -1 "reverse[N](bv)") (("2" (prop) (("1" (use "reverse_inj[N]") (("1" (prop) (("1" (grind) (("1" (decompose-equality) nil nil) ("2" (decompose-equality) nil nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (unsigned const-decl "nat" unsigned nil) (nil application-judgement "above(n)" exp2 nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (int_plus_int_is_int application-judgement "int" integers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (bv2nat_rec def-decl "nat" bv_nat nil) (reverse_inj formula-decl nil unsigned nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (bvec0 const-decl "bit" bv nil) (FALSE const-decl "bool" booleans nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (N formal-const-decl "posnat" signed nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (bv2nat_eq0 formula-decl nil bv_nat nil)) shostak))("signed" signed unsigned_eq_max 0 (unsigned_eq_max-1 nil 3725810179 ("" (skeep) (("" (expand "unsigned") (("" (rewrite "bv2nat_eq_max[N]") (("1" (decompose-equality) (("1" (grind) nil nil)) nil) ("2" (lemma "bv2nat_eq_max[N]") (("2" (inst -1 "(LAMBDA (i: below(N)): bv(N - 1 - i))") (("2" (assert) (("2" (case "bv = reverse(fill[N](TRUE))") (("1" (hide -2 -3 1) (("1" (decompose-equality) (("1" (decompose-equality) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -2 2 3) (("2" (rewrite "reverse_inj[N]") (("2" (replaces -1) (("2" (decompose-equality) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (unsigned const-decl "nat" unsigned nil) (reverse_inj formula-decl nil unsigned nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (bvec1 const-decl "bit" bv nil) (TRUE const-decl "bool" booleans nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (nil application-judgement "above(n)" exp2 nil) (N formal-const-decl "posnat" signed nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (bv2nat_eq_max formula-decl nil bv_nat nil)) shostak))("to_vec_inc" to_vec_inc nat2bv_inj 0 (nat2bv_inj-1 nil 3724891133 ("" (skeep :preds? t) (("" (grind) nil nil)) nil) ((nil application-judgement "above(n)" exp2 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) shostak))("to_vec_inc" to_vec_inc unsigned_inv 0 (unsigned_inv-1 nil 3722712172 ("" (skeep :preds? t) (("" (expand "to_vec_inc") (("" (expand "unsigned") (("" (case "val >= 0 AND val < exp2(len)") (("1" (replace -1) (("1" (case "(LAMBDA (i_1: below(len)): nat2bv[len](val)(i_1)) = nat2bv[len](val)") (("1" (replaces -1) (("1" (rewrite "bv2nat_inv") (("1" (rewrite "mod_lt_nat") nil nil)) nil)) nil) ("2" (hide 2) (("2" (decompose-equality) (("2" (grind) nil nil)) nil)) nil) ("3" (propax) nil nil) ("4" (hide 2) (("4" (grind) nil nil)) nil)) nil)) nil) ("2" (replace 1) (("2" (case "(LAMBDA (i_1: below(len)):
               nat2bv[len](mod(val, exp2(len)))(i_1)) = nat2bv[len](mod(val, exp2(len)))") (("1" (replaces -1) (("1" (rewrite "bv2nat_inv") nil nil)) nil) ("2" (hide 2 3) (("2" (decompose-equality) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (>= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (bvec type-eq-decl nil bv nil) (= const-decl "[T, T -> boolean]" equalities nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (bv2nat_inv formula-decl nil bv_nat nil) (nil application-judgement "below(m)" mod nil) (mod_lt_nat formula-decl nil mod nil) (TRUE const-decl "bool" booleans nil) (len skolem-const-decl "nat" to_vec_inc nil) (val skolem-const-decl "int" to_vec_inc nil) (NOT const-decl "[bool -> bool]" booleans nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (unsigned const-decl "nat" unsigned nil) (nil application-judgement "above(n)" exp2 nil)) shostak))("to_vec_inc" to_vec_inc unsigned_inv2 0 (unsigned_inv2-1 nil 3724594989 ("" (skeep :preds? t) (("" (case "(LAMBDA (i: below(len)): nat2bv[len](val)(len - 1 - i)) = (to_vec_inc(len, val))") (("1" (replaces -1) (("1" (rewrite "unsigned_inv") nil nil)) nil) ("2" (hide 2) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil)) nil)) nil) ((to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (bvec type-eq-decl nil bv nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (= const-decl "[T, T -> boolean]" equalities nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (unsigned_inv formula-decl nil to_vec_inc nil) (TRUE const-decl "bool" booleans nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_plus_int_is_int application-judgement "int" integers nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (NOT const-decl "[bool -> bool]" booleans nil) (nil application-judgement "above(n)" exp2 nil)) shostak))("to_vec_inc" to_vec_inc unsigned_inv2_TCC1 0 (unsigned_inv2_TCC1-1 nil 3724594985 ("" (subtype-tcc) nil nil) ((int_minus_int_is_int application-judgement "int" integers nil)) nil))("to_vec_inc" to_vec_inc to_vec_fill_F 0 (to_vec_fill_F-1 nil 3725385226 ("" (skeep) (("" (case-insert-fname "unsigned") (("1" (rewrite "unsigned_inj") nil nil) ("2" (rewrite "unsigned_inv") (("2" (replaces -1) (("2" (expand "unsigned") (("2" (case "(LAMBDA (i: below(n)): bvec0[n](-1 - i + n)) = fill[n](FALSE)") (("1" (replaces -1) (("1" (use "bv2nat_fill_F[n]") (("1" (assert) nil nil)) nil)) nil) ("2" (decompose-equality) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((bvec0 const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (unsigned const-decl "nat" unsigned nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (unsigned_inj formula-decl nil unsigned nil) (TRUE const-decl "bool" booleans nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (fill const-decl "bit" bv nil) (FALSE const-decl "bool" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bv2nat_fill_F formula-decl nil bv_nat nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "below(m)" mod nil) (unsigned_inv formula-decl nil to_vec_inc nil) (nil application-judgement "above(n)" exp2 nil)) shostak))("to_vec_inc" to_vec_inc to_vec_fill_T 0 (to_vec_fill_T-1 nil 3725385462 ("" (skeep) (("" (case-insert-fname "unsigned") (("1" (rewrite "unsigned_inj") nil nil) ("2" (rewrite "unsigned_inv") (("2" (replaces -1) (("2" (expand "unsigned") (("2" (case "(LAMBDA (i: below(n)): bvec1[n](-1 - i + n)) = fill[n](TRUE)") (("1" (replaces -1) (("1" (use "bv2nat_fill_T[n]") (("1" (grind) nil nil)) nil)) nil) ("2" (decompose-equality) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((bvec1 const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (unsigned const-decl "nat" unsigned nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (unsigned_inj formula-decl nil unsigned nil) (TRUE const-decl "bool" booleans nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (fill const-decl "bit" bv nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bv2nat_fill_T formula-decl nil bv_nat nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "below(m)" mod nil) (unsigned_inv formula-decl nil to_vec_inc nil) (nil application-judgement "above(n)" exp2 nil)) shostak))("to_vec_inc" to_vec_inc unsigned_mib_one 0 (unsigned_mib_one-1 nil 3725830449 ("" (induct "n") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (skeep) (("3" (prop) (("1" (skeep) (("1" (inst -1 "bv^(j, 1)") (("1" (assert) (("1" (prop) (("1" (use "unsigned_rec[j + 1]" ("n" "j" "x" "bv")) (("1" (replaces -1) (("1" (replaces -2) (("1" (assert) (("1" (case "b2n(bv(0)) = 1") (("1" (replaces -1) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (case "j = 0") (("1" (replace -1) (("1" (hide -2) (("1" (expand "unsigned") (("1" (expand "bv2nat") (("1" (replace -1) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("2" (expand "unsigned") (("2" (expand "bv2nat") (("2" (case "j = 0") (("1" (replace -1) (("1" (grind) nil nil)) nil) ("2" (expand "bv2nat_rec") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "j = 0") (("1" (replace -1) (("1" (expand "unsigned") (("1" (expand "bv2nat") (("1" (replace -1) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil) ("2" (case "j = 0") (("1" (skeep) (("1" (expand "unsigned") (("1" (expand "bv2nat") (("1" (replace -1) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil) ("4" (grind) nil nil) ("5" (grind) nil nil)) nil) ((int_times_even_is_even application-judgement "even_int" integers nil) (NOT const-decl "[bool -> bool]" booleans nil) (even_plus_odd_is_odd application-judgement "odd_int" integers nil) (nil application-judgement "above(n)" exp2 nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (unsigned_rec formula-decl nil signed nil) (= const-decl "[T, T -> boolean]" equalities nil) (nbit type-eq-decl nil bit nil) (b2n const-decl "nbit" bit nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (TRUE const-decl "bool" booleans nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (odd_plus_even_is_odd application-judgement "odd_int" integers nil) (bv2nat_rec def-decl "nat" bv_nat nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (j skolem-const-decl "nat" to_vec_inc nil) (<= const-decl "bool" reals nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nat_induction formula-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (unsigned const-decl "nat" unsigned nil) (pred type-eq-decl nil defined_types nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (below type-eq-decl nil nat_types nil) (^ const-decl "bit" bv nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (> const-decl "bool" reals nil) (< const-decl "bool" reals nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("to_vec_inc" to_vec_inc unsigned_mib_one_TCC2 0 (unsigned_mib_one_TCC2-1 nil 3725830446 ("" (subtype-tcc) nil nil) ((^ const-decl "bit" bv nil)) nil))("to_vec_inc" to_vec_inc unsigned_mib_one_TCC1 0 (unsigned_mib_one_TCC1-1 nil 3725830446 ("" (subtype-tcc) nil nil) nil nil))("to_vec_inc" to_vec_inc unsigned_one_mib 0 (unsigned_one_mib-1 nil 3725831466 ("" (skeep :preds? t) (("" (use "unsigned_rec[n]" ("n" "n - 1" "x" "bv")) (("1" (replaces -1) (("1" (use "unsigned_upperbound[n-1]" ("bv" "bv ^ (n - 1, 1)")) (("1" (sub-formulas -3 -1) (("1" (case "exp2(n - 1) * b2n(bv(0)) > 0") (("1" (grind) nil nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil) ("2" (case "n = 1") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil) ("2" (case "n = 1") (("1" (expand "unsigned") (("1" (expand "bv2nat") (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil) ((real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (unsigned_rec formula-decl nil signed nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (unsigned_upperbound formula-decl nil unsigned nil) (int_times_even_is_even application-judgement "even_int" integers nil) (^ const-decl "bit" bv nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (n skolem-const-decl "posnat" to_vec_inc nil) (unsigned const-decl "nat" unsigned nil) (exp2 def-decl "posnat" exp2 nil) (- const-decl "[numfield -> numfield]" number_fields nil) (negreal nonempty-type-eq-decl nil real_types nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (both_sides_times_neg_lt1 formula-decl nil real_props nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_neg formula-decl nil extra_tegies nil) (add_neg formula-decl nil extra_tegies nil) (b2n const-decl "nbit" bit nil) (nbit type-eq-decl nil bit nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (bijective? const-decl "bool" functions nil) (id const-decl "(bijective?[T, T])" identity nil) (NOT const-decl "[bool -> bool]" booleans nil) (int_plus_int_is_int application-judgement "int" integers nil) (bv2nat_rec def-decl "nat" bv_nat nil) (odd_minus_odd_is_even application-judgement "even_int" integers nil) (= const-decl "[T, T -> boolean]" equalities nil) (TRUE const-decl "bool" booleans nil)) shostak))("to_vec_inc" to_vec_inc unsigned_one_mib_TCC1 0 (unsigned_one_mib_TCC1-1 nil 3725831465 ("" (subtype-tcc) nil nil) nil nil))("to_vec_inc" to_vec_inc unsigned_ext_0 0 (unsigned_ext_0-1 nil 3725837481 ("" (induct "n") (("1" (skeep) (("1" (expand "unsigned") (("1" (expand "bv2nat") (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (skeep) (("2" (skeep) (("2" (inst -1 "j" "bv ^ (j_1, 1)") (("1" (prop) (("1" (use "unsigned_rec[1 + j + j_1]" ("n" "j_1 + j" "x" "bv")) (("1" (replaces -1) (("1" (replace -2) (("1" (assert) (("1" (use "unsigned_rec[1 + j_1]" ("n" "j_1" "x" "bv")) (("1" (replaces -1) (("1" (assert) (("1" (expand "unsigned") (("1" (expand "bv2nat") (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (case "j_1 = 0") (("1" (expand "unsigned") (("1" (expand "bv2nat") (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "j_1 = 0") (("1" (expand "unsigned") (("1" (expand "bv2nat") (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil) ("2" (case "j_1 = 0") (("1" (expand "unsigned") (("1" (expand "bv2nat") (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("3" (grind) nil nil)) nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (<= const-decl "bool" reals nil) (j_1 skolem-const-decl "nat" to_vec_inc nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (unsigned_rec formula-decl nil signed nil) (nil application-judgement "above(n)" exp2 nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (exp2 def-decl "posnat" exp2 nil) (b2n const-decl "nbit" bit nil) (^ const-decl "bit" bv nil) (TRUE const-decl "bool" booleans nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (odd_minus_odd_is_even application-judgement "even_int" integers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (bv2nat_rec def-decl "nat" bv_nat nil) (int_plus_int_is_int application-judgement "int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (nat_induction formula-decl nil naturalnumbers nil) (unsigned const-decl "nat" unsigned nil) (pred type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) shostak))("to_vec_inc" to_vec_inc unsigned_ext_0_TCC1 0 (unsigned_ext_0_TCC1-1 nil 3725837478 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))("to_vec_inc" to_vec_inc unsigned_mibs_zero 0 (unsigned_mibs_zero-1 nil 3725910104 ("" (induct "n") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (skeep) (("3" (skeep :preds? t) (("3" (prop) (("1" (inst -1 "m" "bv ^(j, 1)") (("1" (assert) (("1" (induct "k") (("1" (prop) (("1" (inst -1 "0") (("1" (use "unsigned_mib_one") (("1" (assert) (("1" (case "m = j") (("1" (replace -1) (("1" (assert) nil nil)) nil) ("2" (case "m < j") (("1" (use "exp2_lt") (("1" (assert) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil) ("2" (case "m = j") (("1" (replace -1) (("1" (assert) (("1" (use "unsigned_mib_one") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil) ("3" (use "unsigned_mib_one") (("3" (assert) (("3" (case "m = j") (("1" (replaces -1) (("1" (assert) nil nil)) nil) ("2" (case "m < j") (("1" (use "exp2_lt") (("1" (assert) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skeep) (("2" (assert) (("2" (prop) (("1" (inst -1 "jb") (("1" (case "bv ^ (j, 1) ^ jb = bv ^ (1 + jb)") (("1" (replaces 1) (("1" (assert) nil nil)) nil) ("2" (expand "^") (("2" (propax) nil nil)) nil)) nil)) nil) ("2" (use "unsigned_rec[1 + j]" ("n" "j" "x" "bv")) (("2" (replaces -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ((nil application-judgement "above(n)" exp2 nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (unsigned_rec formula-decl nil signed nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (b2n const-decl "nbit" bit nil) (bv2nat_rec def-decl "nat" bv_nat nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned_mib_one formula-decl nil to_vec_inc nil) (exp2_lt formula-decl nil exp2 nil) (m skolem-const-decl "posnat" to_vec_inc nil) (TRUE const-decl "bool" booleans nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (below_induction formula-decl nil bounded_nat_inductions nil) (int_plus_int_is_int application-judgement "int" integers nil) (NOT const-decl "[bool -> bool]" booleans nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (j skolem-const-decl "nat" to_vec_inc nil) (<= const-decl "bool" reals nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nat_induction formula-decl nil naturalnumbers nil) (FALSE const-decl "bool" booleans nil) (^ const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (exp2 def-decl "posnat" exp2 nil) (unsigned const-decl "nat" unsigned nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) shostak))("to_vec_inc" to_vec_inc unsigned_mibs_zero_TCC1 0 (unsigned_mibs_zero_TCC1-1 nil 3725910103 ("" (subtype-tcc) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("to_vec_inc" to_vec_inc extz_unsigned 0 (extz_unsigned-1 nil 3725824035 ("" (induct "m") (("1" (grind) nil nil) ("2" (skeep) (("2" (skeep) (("2" (inst -1 "n" "bv") (("2" (assert) (("2" (swap-rel -1) (("1" (replaces -1) (("1" (case "n < j + n") (("1" (replace -1) (("1" (use "unsigned_rec[n + j + 1]" ("n" "n + j" "x" "(bv o fill[1 + j](FALSE))")) (("1" (replaces -1) (("1" (case "(bv o fill[1 + j](FALSE))(0) = FALSE") (("1" (replaces -1) (("1" (case "(bv o fill[1 + j](FALSE)) ^ (n + j, 1) = (bv o fill[j](FALSE))") (("1" (replaces -1) (("1" (assert) (("1" (grind) nil nil)) nil)) nil) ("2" (expand "o") (("2" (grind) (("2" (hide 2) (("2" (expand "^") (("2" (grind) (("2" (decompose-equality) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil) ("2" (expand "o") (("2" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (case "j = 0") (("1" (assert) (("1" (replace -1) (("1" (use "unsigned_rec[n + j + 1]" ("n" "n + j" "x" "(bv o fill[1 + j](FALSE))")) (("1" (replaces -1) (("1" (assert) (("1" (case "(bv o fill[1 + j](FALSE))(0) = FALSE") (("1" (replace -1) (("1" (assert) (("1" (replace -1) (("1" (assert) (("1" (case "(bv o fill[1 + j](FALSE)) ^ (n, 1) = bv") (("1" (replaces -1) (("1" (grind) nil nil)) nil) ("2" (expand "o") (("2" (decompose-equality) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "o") (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil)) nil) ((real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (unsigned_rec formula-decl nil signed nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (b2n const-decl "nbit" bit nil) (exp2 def-decl "posnat" exp2 nil) (bv2nat_rec def-decl "nat" bv_nat nil) (^ const-decl "bit" bv nil) (j skolem-const-decl "nat" to_vec_inc nil) (n skolem-const-decl "nat" to_vec_inc nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (TRUE const-decl "bool" booleans nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (nat_induction formula-decl nil naturalnumbers nil) (empty_bv const-decl "[below[0] -> bool]" empty_bv nil) (extend const-decl "R" extend nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (fill const-decl "bit" bv nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (unsigned const-decl "nat" unsigned nil) (pred type-eq-decl nil defined_types nil) (FALSE const-decl "bool" booleans nil) (below type-eq-decl nil nat_types nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (<= const-decl "bool" reals nil) (> const-decl "bool" reals nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (NOT const-decl "[bool -> bool]" booleans nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) shostak))("to_vec_inc" to_vec_inc extz_unsigned_TCC4 0 (extz_unsigned_TCC4-1 nil 3725824031 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) nil))("to_vec_inc" to_vec_inc extz_unsigned_TCC3 0 (extz_unsigned_TCC3-1 nil 3725824031 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))("to_vec_inc" to_vec_inc extz_unsigned_TCC2 0 (extz_unsigned_TCC2-1 nil 3725824031 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))("to_vec_inc" to_vec_inc extz_unsigned_TCC1 0 (extz_unsigned_TCC1-1 nil 3725824031 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))("to_vec_inc" to_vec_inc exts_signed 0 (exts_signed-1 nil 3725826422 ("" (induct "m") (("1" (grind) nil nil) ("2" (skeep) (("2" (skeep :preds? t) (("2" (inst -2 "n" "bv") (("2" (assert) (("2" (case "n < j + n") (("1" (replace -1) (("1" (case "unsigned(bv) < exp2(n - 1)") (("1" (replace -1) (("1" (use "unsigned_mib_one") (("1" (assert) (("1" (use "unsigned_rec[n + j + 1]" ("n" "n + j" "x" "bv o fill[1 + j](FALSE)")) (("1" (replaces -1) (("1" (case "b2n((bv o fill[1 + j](FALSE))(0)) = 0") (("1" (replaces -1) (("1" (assert) (("1" (case "(bv o fill[1 + j](FALSE)) ^ (j + n, 1) = bv o fill[j](FALSE)") (("1" (replaces -1) (("1" (case "unsigned(bv o fill[j](FALSE)) < exp2(j - 1 + n)") (("1" (replace -1) (("1" (case "unsigned[j + n](bv o fill[j](FALSE)) < exp2(j + n)") (("1" (replace -1) (("1" (propax) nil nil)) nil) ("2" (hide 3) (("2" (use "unsigned_upperbound" ("bv" "bv o fill[j](FALSE)")) nil nil)) nil)) nil)) nil) ("2" (replace 1) (("2" (use "unsigned_upperbound" ("bv" "bv o fill[j](FALSE)")) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 3) (("2" (expand "o") (("2" (expand "^") (("2" (decompose-equality) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 3) (("2" (expand "o") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace 1) (("2" (use "unsigned_one_mib") (("2" (assert) (("2" (case "unsigned(bv o fill[j](TRUE)) < exp2(j - 1 + n)") (("1" (replace -1) (("1" (use "unsigned_upperbound" ("bv" "bv")) (("1" (both-sides "-" "exp2(n)" -1) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (replace 1) (("2" (use "unsigned_rec[n + j + 1]" ("n" "n + j" "x" "bv o fill[1 + j](TRUE)")) (("2" (replaces -1) (("2" (case "b2n((bv o fill[1 + j](TRUE))(0)) = 1") (("1" (replaces -1) (("1" (case "(bv o fill[1 + j](TRUE)) ^ (n + j, 1) = bv o fill[j](TRUE)") (("1" (replaces -1) (("1" (assert) (("1" (use "exp2_n" ("n" "j + n")) (("1" (replaces -1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 4) (("2" (expand "o") (("2" (expand "^") (("2" (decompose-equality) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 4) (("2" (expand "o") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "j = 0") (("1" (replace -1) (("1" (assert) (("1" (case "unsigned(bv) < exp2(n-1)") (("1" (replace -1) (("1" (use "unsigned_mib_one") (("1" (assert) (("1" (use "unsigned_rec[n + j + 1]" ("n" "n + j" "x" "bv o fill[1 + j](FALSE)")) (("1" (replace -1) (("1" (case "(bv o fill[1 + j](FALSE)) ^ (n + j, 1) = bv") (("1" (replace -1) (("1" (case "b2n((bv o fill[1 + j](FALSE))(0)) = 0") (("1" (replace -1) (("1" (assert) (("1" (use "exp2_n" ("n" "n - 1")) (("1" (replaces -1) (("1" (assert) (("1" (case "unsigned[j + n](bv) = unsigned(bv)") (("1" (replaces -1) (("1" (assert) nil nil)) nil) ("2" (hide 4) (("2" (rewrite "unsigned_ext_0") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "o") (("2" (grind) nil nil)) nil)) nil)) nil) ("2" (expand "o") (("2" (expand "^") (("2" (decompose-equality) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace 1) (("2" (use "unsigned_one_mib") (("2" (assert) (("2" (use "unsigned_rec[n + j + 1]" ("n" "n + j" "x" "bv o fill[1 + j](TRUE)")) (("2" (replace -1) (("2" (case "(bv o fill[1 + j](TRUE)) ^ (n + j, 1) = bv") (("1" (replace -1) (("1" (case "b2n((bv o fill[1 + j](TRUE))(0)) = 1") (("1" (replaces -1) (("1" (assert) (("1" (case "unsigned[j + n](bv) = unsigned(bv)") (("1" (replaces -1) (("1" (assert) (("1" (replace -4) (("1" (assert) (("1" (use "exp2_sum") (("1" (replaces -1) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "unsigned_ext_0") nil nil)) nil)) nil)) nil) ("2" (hide 4) (("2" (expand "o") (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 4) (("2" (expand "o") (("2" (expand "^") (("2" (decompose-equality) nil nil)) nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil)) nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (unsigned_mib_one formula-decl nil to_vec_inc nil) (unsigned_rec formula-decl nil signed nil) (nbit type-eq-decl nil bit nil) (int_times_even_is_even application-judgement "even_int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (n skolem-const-decl "posnat" to_vec_inc nil) (j skolem-const-decl "nat" to_vec_inc nil) (unsigned_upperbound formula-decl nil unsigned nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (TRUE const-decl "bool" booleans nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (unsigned_one_mib formula-decl nil to_vec_inc nil) (both_sides_minus_lt1 formula-decl nil real_props nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (odd_minus_odd_is_even application-judgement "even_int" integers nil) (exp2_n formula-decl nil exp2 nil) (odd_plus_odd_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_even_is_even application-judgement "even_int" integers nil) (unsigned_ext_0 formula-decl nil to_vec_inc nil) (exp2_sum formula-decl nil exp2 nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (int_plus_int_is_int application-judgement "int" integers nil) (b2n const-decl "nbit" bit nil) (bv2nat_rec def-decl "nat" bv_nat nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (nat_induction formula-decl nil naturalnumbers nil) (empty_bv const-decl "[below[0] -> bool]" empty_bv nil) (extend const-decl "R" extend nil) (FALSE const-decl "bool" booleans nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (unsigned const-decl "nat" unsigned nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (below type-eq-decl nil nat_types nil) (fill const-decl "bit" bv nil) (^ const-decl "bit" bv nil) (exp2 def-decl "posnat" exp2 nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (NOT const-decl "[bool -> bool]" booleans nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil)) shostak))("to_vec_inc" to_vec_inc exts_signed_TCC1 0 (exts_signed_TCC1-1 nil 3725826421 ("" (subtype-tcc) nil nil) nil nil))("to_vec_inc" to_vec_inc to_vec_inj_ext 0 (to_vec_inj_ext-1 nil 3724885989 ("" (skeep :preds? t) (("" (case "x >= 0 AND x < exp2(len)") (("1" (case "y >= 0 AND y < exp2(len)") (("1" (rewrite "mod_lt_nat") (("1" (rewrite "mod_lt_nat") (("1" (use "to_vec_inj") (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (expand "to_vec_inc") (("2" (replace -1) (("2" (replace 1) (("2" (case "nat2bv[len](x) =  nat2bv[len](mod(y, exp2(len)))") (("1" (use "nat2bv_inj") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (decompose-equality) (("2" (decompose-equality) (("2" (assert) (("2" (typepred "x!1") (("2" (inst -2 "len - 1 - x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "y >= 0 AND y < exp2(len)") (("1" (expand "to_vec_inc") (("1" (replace -1) (("1" (replace 1) (("1" (case " nat2bv[len](mod(x, exp2(len))) = nat2bv[len](y)") (("1" (use "nat2bv_inj") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (decompose-equality) (("2" (decompose-equality) (("2" (inst -1 "len - 1 - x!1") (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (expand "to_vec_inc") (("2" (replace 1) (("2" (replace 2) (("2" (case " nat2bv[len](mod(x, exp2(len))) =  nat2bv[len](mod(y, exp2(len)))") (("1" (use "nat2bv_inj") (("1" (grind) nil nil)) nil) ("2" (decompose-equality) (("2" (decompose-equality) (("2" (inst -1 "len - 1 - x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (>= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (int_minus_int_is_int application-judgement "int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (NOT const-decl "[bool -> bool]" booleans nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (even_times_int_is_even application-judgement "even_int" integers nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (= const-decl "[T, T -> boolean]" equalities nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil) (/= const-decl "boolean" notequal nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (mod_lt_nat formula-decl nil mod nil) (nil application-judgement "below(m)" mod nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (to_vec_inj formula-decl nil to_vec_inc nil) (below type-eq-decl nil naturalnumbers nil) (nil application-judgement "above(n)" exp2 nil)) shostak))("eq_vec" eq_vec eq_range_vec_range_eq 0 (eq_range_vec_range_eq-1 nil 3725990195 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("eq_vec" eq_vec eq_vec_unsigned 0 (eq_vec_unsigned-1 nil 3724879405 ("" (skeep :preds? t) (("" (assert) (("" (case "bv1 = bv2") (("1" (grind) nil nil) ("2" (hide 2) (("2" (decompose-equality) nil nil)) nil)) nil)) nil)) nil) nil shostak))("neq_vec" neq_vec new_vec_unsigned 0 (new_vec_unsigned-1 nil 3724879763 ("" (skeep) (("" (case "bv1 = bv2") (("1" (grind) nil nil) ("2" (rewrite "unsigned_inj[N]") nil nil)) nil)) nil) nil shostak))("compare" compare eq_range_vec_op_eq 0 (eq_range_vec_op_eq-1 nil 3726353675 ("" (grind) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("compare" compare eq_vec_range_op_eq 0 (eq_vec_range_op_eq-1 nil 3726353681 ("" (grind) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("compare" compare eq_range_op_eq 0 (eq_range_op_eq-1 nil 3726353687 ("" (grind) nil nil) nil shostak))("compare" compare eq_bit_op_eq 0 (eq_bit_op_eq-1 nil 3726353694 ("" (grind) nil nil) nil shostak))("compare" compare eq_range_vec_range 0 (eq_range_vec_range-1 nil 3726353700 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("compare_unsigned" compare neq_range_vec_range_eq 0 (neq_range_vec_range_eq-1 nil 3726353933 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("eq_vec" eq_vec eq_range_vec_range 0 (eq_range_vec_range-1 nil 3726352117 ("" (skeep) (("" (assert) (("" (grind) nil nil)) nil)) nil) ((nil application-judgement "above(n)" exp2 nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (int_plus_int_is_int application-judgement "int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (bv2nat_rec def-decl "nat" bv_nat nil) (b2n const-decl "nbit" bit nil) (^ const-decl "bit" bv nil) (unsigned const-decl "nat" unsigned nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil)) shostak))("eq_vec" eq_vec eq_vec_range_op_eq 0 (eq_vec_range_op_eq-1 nil 3725990048 ("" (grind) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("eq_vec" eq_vec eq_range_vec_op_eq 0 (eq_range_vec_op_eq-1 nil 3725990012 ("" (grind) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("eq_vec" eq_vec eq_bit_op_eq 0 (eq_bit_op_eq-1 nil 3725990153 ("" (grind) nil nil) nil shostak))("eq_vec" eq_vec eq_range_op_eq 0 (eq_range_op_eq-1 nil 3725990080 ("" (grind) nil nil) nil shostak))("neq_vec" neq_vec neq_range_vec_range_eq 0 (neq_range_vec_range_eq-1 nil 3725990390 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("neq_vec" neq_vec new_vec_signed 0 (new_vec_signed-1 nil 3726352322 ("" (grind) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) shostak))("eq_vec" eq_vec eq_vec_signed 0 (eq_vec_signed-1 nil 3726352082 ("" (skeep) nil nil) nil shostak))("lteq_vec" lteq_vec lteq_vec_TCC1 0 (lteq_vec_TCC1-1 nil 3722557107 ("" (subtype-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("lteq_vec" lteq_vec lteq_vec_op_eq 0 (lteq_vec_op_eq-1 nil 3725990825 ("" (grind) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("lteq_vec" lteq_vec lteq_range_vec_op_eq 0 (lteq_range_vec_op_eq-1 nil 3725990868 ("" (grind) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("lteq_vec" lteq_vec lteq_vec_range_op_eq 0 (lteq_vec_range_op_eq-1 nil 3725990895 ("" (grind) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("lteq_vec" lteq_vec lteq_vec_signed_def 0 (lteq_vec_signed_def-1 nil 3725991372 ("" (grind) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("gt_vec" gt_vec gt_vec_range_lteq_rel 0 (gt_vec_range_lteq_rel-1 nil 3725991253 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) shostak))("gt_vec" gt_vec gt_range_vec_lteq_rel 0 (gt_range_vec_lteq_rel-1 nil 3725991231 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) shostak))("gt_vec" gt_vec gt_vec_lteq_rel 0 (gt_vec_lteq_rel-1 nil 3725991191 ("" (grind) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_times_even_is_even application-judgement "even_int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (even_times_int_is_even application-judgement "even_int" integers nil) (exp2 def-decl "posnat" exp2 nil) (bv2nat_rec def-decl "nat" bv_nat nil) (b2n const-decl "nbit" bit nil) (^ const-decl "bit" bv nil) (int_plus_int_is_int application-judgement "int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) shostak))("gteq_vec" gteq_vec gteq_vec_range_lt_rel 0 (gteq_vec_range_lt_rel-1 nil 3725991755 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) shostak))("gteq_vec" gteq_vec gteq_range_vec_lt_rel 0 (gteq_range_vec_lt_rel-1 nil 3725991729 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) shostak))("gteq_vec" gteq_vec gteq_vec_lt_rel 0 (gteq_vec_lt_rel-1 nil 3725991702 ("" (grind) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_even_is_even application-judgement "even_int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_times_even_is_even application-judgement "even_int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (exp2 def-decl "posnat" exp2 nil) (bv2nat_rec def-decl "nat" bv_nat nil) (b2n const-decl "nbit" bit nil) (^ const-decl "bit" bv nil) (int_plus_int_is_int application-judgement "int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) shostak))("general_lemmas" general_lemmas gteq_vec_lt_rel_TCC4 0 (gteq_vec_lt_rel_TCC4-1 nil 3726357469 ("" (subtype-tcc) nil nil) nil nil))("general_lemmas" general_lemmas gteq_vec_lt_rel_TCC3 0 (gteq_vec_lt_rel_TCC3-1 nil 3726357469 ("" (subtype-tcc) nil nil) nil nil))("general_lemmas" general_lemmas gteq_vec_lt_rel_TCC2 0 (gteq_vec_lt_rel_TCC2-1 nil 3726357469 ("" (subtype-tcc) nil nil) nil nil))("general_lemmas" general_lemmas gteq_vec_lt_rel_TCC1 0 (gteq_vec_lt_rel_TCC1-1 nil 3726357469 ("" (subtype-tcc) nil nil) nil nil))("general_lemmas" general_lemmas gt_vec_lteq_rel_TCC4 0 (gt_vec_lteq_rel_TCC4-1 nil 3726357424 ("" (subtype-tcc) nil nil) nil nil))("general_lemmas" general_lemmas gt_vec_lteq_rel_TCC3 0 (gt_vec_lteq_rel_TCC3-1 nil 3726357424 ("" (subtype-tcc) nil nil) nil nil))("general_lemmas" general_lemmas gt_vec_lteq_rel_TCC2 0 (gt_vec_lteq_rel_TCC2-1 nil 3726357424 ("" (subtype-tcc) nil nil) nil nil))("general_lemmas" general_lemmas gt_vec_lteq_rel_TCC1 0 (gt_vec_lteq_rel_TCC1-1 nil 3726357424 ("" (subtype-tcc) nil nil) nil nil))("add" add add_vec_commutativity 0 (add_vec_commutativity-1 nil 3724883675 ("" (grind) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (bv2nat_rec def-decl "nat" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (even_times_int_is_even application-judgement "even_int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("add" add add_vec_def 0 (add_vec_def-1 nil 3725803608 ("" (skeep) (("" (rewrite "unsigned_inv") nil nil)) nil) ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) nil (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" add nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (unsigned const-decl "nat" unsigned nil) (nil application-judgement "above(n)" exp2 nil)) shostak))("add" add add_overflow_rel 0 (add_overflow_rel-1 nil 3725063060 ("" (skeep :preds? t) (("" (case "unsigned[N](bv1) + unsigned[N](bv2) < exp2(N)") (("1" (replace -1) (("1" (assert) nil nil)) nil) ("2" (replace 1) (("2" (assert) (("2" (rewrite "to_vec_inj_rev") (("2" (hide 3) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (unsigned const-decl "nat" unsigned nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" add nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nil application-judgement "above(n)" exp2 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil) (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (nil application-judgement "below(m)" mod nil) (to_vec_inj_rev formula-decl nil to_vec_inc nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil)) shostak))("add" add add_vec_associativity 0 (add_vec_associativity-1 nil 3724884330 ("" (skeep :preds? t) (("" (rewrite "unsigned_inv") (("" (rewrite "unsigned_inv") (("" (rewrite "to_vec_inj_rev") (("" (hide 2) (("" (rewrite "mod_sum_nat") (("1" (rewrite "mod_sum_nat") (("1" (rewrite "mod_sum_nat") (("1" (rewrite "mod_sum_nat") (("1" (case "unsigned[N](bv1) + unsigned[N](bv2) < exp2(N)") (("1" (replace -1) (("1" (case "unsigned[N](bv1) + unsigned[N](bv) < exp2(N)") (("1" (replace -1) (("1" (case "unsigned[N](bv) + (unsigned[N](bv1) + unsigned[N](bv2)) < exp2(N)") (("1" (replace -1) (("1" (grind) nil nil)) nil) ("2" (replace 1) (("2" (grind) nil nil)) nil)) nil)) nil) ("2" (replace 1) (("2" (case "unsigned[N](bv) + (unsigned[N](bv1) + unsigned[N](bv2)) < exp2(N)") (("1" (replace -1) (("1" (case "unsigned[N](bv2) + (unsigned[N](bv1) + unsigned[N](bv) - exp2(N))
           < exp2(N)") (("1" (replace -1) (("1" (grind) nil nil)) nil) ("2" (replace 1) (("2" (grind) nil nil)) nil)) nil)) nil) ("2" (replace 1) (("2" (case "unsigned[N](bv2) + (unsigned[N](bv1) + unsigned[N](bv) - exp2(N))
           < exp2(N)") (("1" (replace -1) (("1" (grind) nil nil)) nil) ("2" (replace 1) (("2" (both-sides "+" "unsigned[N](bv)" -1) (("2" (lemma "unsigned_upperbound" ("bv" "bv")) (("2" (hide 2 3 4) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace 1) (("2" (case "unsigned[N](bv1) + unsigned[N](bv) < exp2(N)") (("1" (replace -1) (("1" (case "unsigned[N](bv) + (unsigned[N](bv1) + unsigned[N](bv2) - exp2(N))
          < exp2(N)") (("1" (replace -1) (("1" (case "unsigned[N](bv2) + (unsigned[N](bv1) + unsigned[N](bv)) < exp2(N)") (("1" (replace -1) (("1" (grind) nil nil)) nil) ("2" (replace 1) (("2" (grind) nil nil)) nil)) nil)) nil) ("2" (replace 1) (("2" (case "unsigned[N](bv2) + (unsigned[N](bv1) + unsigned[N](bv)) < exp2(N)") (("1" (replace -1) (("1" (grind) nil nil)) nil) ("2" (replace 1) (("2" (both-sides "+" "unsigned[N](bv2)" -1) (("2" (lemma "unsigned_upperbound" ("bv" "bv2")) (("2" (hide 1 3 4) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace 1) (("2" (case "unsigned[N](bv) + (unsigned[N](bv1) + unsigned[N](bv2) - exp2(N))
          < exp2(N)") (("1" (replace -1) (("1" (grind) nil nil)) nil) ("2" (replace 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (prop) (("1" (assert) nil nil) ("2" (both-sides "+" "exp2(N)" 1) (("2" (assert) (("2" (use "unsigned_upperbound" ("bv" "bv1")) (("2" (use "unsigned_upperbound" ("bv" "bv")) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (use "unsigned_upperbound" ("bv" "bv2")) nil nil)) nil) ("2" (use "unsigned_upperbound" ("bv" "bv")) nil nil) ("3" (use "unsigned_upperbound" ("bv" "bv1")) nil nil)) nil) ("2" (grind) nil nil) ("3" (use "unsigned_upperbound" ("bv" "bv")) nil nil)) nil) ("2" (use "unsigned_upperbound" ("bv" "bv2")) nil nil) ("3" (use "unsigned_upperbound" ("bv" "bv1")) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nil application-judgement "above(n)" exp2 nil) nil (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" add nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (unsigned const-decl "nat" unsigned nil) (nil application-judgement "below(m)" mod nil) (to_vec_inj_rev formula-decl nil to_vec_inc nil) (/= const-decl "boolean" notequal nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (mod_sum_nat formula-decl nil mod nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil) (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (= const-decl "[T, T -> boolean]" equalities nil) (both_sides_plus_lt1 formula-decl nil real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (unsigned_upperbound formula-decl nil unsigned nil) (int_plus_int_is_int application-judgement "int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)) shostak))("add_signed" add_signed add_vec_range_vec_range_signed_rel 0 (add_vec_range_vec_range_signed_rel-1 nil 3725992166 ("" (grind) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("add_signed" add_signed add_vec_bit_signed_unsigned 0 (add_vec_bit_signed_unsigned-1 nil 3722799192 ("" (skeep :preds? t) (("" (case "b") (("1" (assert) (("1" (case "unsigned(bv) < exp2(N - 1)") (("1" (replace -1) (("1" (decompose-equality) nil nil)) nil) ("2" (replace 1) (("2" (lemma "to_vec_inv_extension" ("len" "N" "i" "unsigned(bv) + 1" "j" "-1")) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (replace 1) (("2" (case "unsigned(bv) <exp2(N - 1)") (("1" (replace -1) (("1" (assert) (("1" (rewrite "to_vec_inv") nil nil)) nil)) nil) ("2" (replace 1) (("2" (assert) (("2" (lemma "to_vec_inv_ext" ("len" "N" "i" "-1" "bv" "bv")) (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (hide 3) (("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ((bit type-eq-decl nil bit nil) (boolean nonempty-type-decl nil booleans nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (exp2 def-decl "posnat" exp2 nil) (unsigned const-decl "nat" unsigned nil) (bvec type-eq-decl nil bv nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" add_signed nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (to_vec_inv_extension formula-decl nil to_vec_inc nil) (- const-decl "[numfield -> numfield]" number_fields nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (int_plus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (to_vec_inv formula-decl nil to_vec_inc nil) (to_vec_inv_ext formula-decl nil to_vec_inc nil)) shostak))("add_signed" add_signed add_range_vec_signed_unsigned 0 (add_range_vec_signed_unsigned-1 nil 3722798661 ("" (skeep) (("" (case-insert-fname "unsigned[N]") (("1" (rewrite "unsigned_inj[N]") nil nil) ("2" (hide 2) (("2" (rewrite "unsigned_inv") (("2" (rewrite "unsigned_inv") (("2" (case "unsigned(bv) < exp2(N - 1)") (("1" (replaces -1) nil nil) ("2" (replaces 1) (("2" (use "mod_sum" ("i" "unsigned[N](bv) + m" "k" "-1" "j" "exp2(N)")) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil) ((- const-decl "[numfield, numfield -> numfield]" number_fields nil) (exp2 def-decl "posnat" exp2 nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (unsigned const-decl "nat" unsigned nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" add_signed nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (int_plus_int_is_int application-judgement "int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (unsigned_inj formula-decl nil unsigned nil) (unsigned_inv formula-decl nil to_vec_inc nil) (nil application-judgement "above(n)" exp2 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "below(m)" mod nil) (- const-decl "[numfield -> numfield]" number_fields nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (mod_sum formula-decl nil mod nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (TRUE const-decl "bool" booleans nil)) shostak))("add_signed" add_signed add_vec_range_signed_unsigned 0 (add_vec_range_signed_unsigned-1 nil 3722798437 ("" (skeep) (("" (case-insert-fname "unsigned[N]") (("1" (rewrite "unsigned_inj[N]") nil nil) ("2" (hide 2) (("2" (rewrite "unsigned_inv") (("2" (rewrite "unsigned_inv") (("2" (case "unsigned(bv) < exp2(N - 1)") (("1" (replaces -1) nil nil) ("2" (replaces 1) (("2" (use "mod_sum" ("i" "unsigned[N](bv) + m" "k" "-1" "j" "exp2(N)")) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil) ((- const-decl "[numfield, numfield -> numfield]" number_fields nil) (exp2 def-decl "posnat" exp2 nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (unsigned const-decl "nat" unsigned nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" add_signed nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (int_plus_int_is_int application-judgement "int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (unsigned_inj formula-decl nil unsigned nil) (unsigned_inv formula-decl nil to_vec_inc nil) (nil application-judgement "above(n)" exp2 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "below(m)" mod nil) (- const-decl "[numfield -> numfield]" number_fields nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (mod_sum formula-decl nil mod nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (TRUE const-decl "bool" booleans nil)) shostak))("add_signed" add_signed add_vec_signed_unsigned 0 (add_vec_signed_unsigned-1 nil 3722797872 ("" (skeep) (("" (case-insert-fname "unsigned[N]") (("1" (rewrite "unsigned_inj[N]") nil nil) ("2" (hide 2) (("2" (rewrite "unsigned_inv") (("2" (rewrite "unsigned_inv") (("2" (case "unsigned(bv1) < exp2(N - 1)") (("1" (replaces -1) (("1" (case "unsigned(bv2) < exp2(N - 1)") (("1" (replaces -1) nil nil) ("2" (replace 1) (("2" (use "mod_sum" ("i" "unsigned[N](bv1) + unsigned[N](bv2)" "k" "-1" "j" "exp2(N)")) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (replace 1) (("2" (case "unsigned(bv2) < exp2(N - 1)") (("1" (replaces -1) (("1" (use "mod_sum" ("i" "unsigned[N](bv1) + unsigned[N](bv2)" "k" "-1" "j" "exp2(N)")) (("1" (assert) nil nil)) nil)) nil) ("2" (replaces 1) (("2" (replaces 1) (("2" (use "mod_sum" ("i" "unsigned[N](bv1) + unsigned[N](bv2)" "k" "-2" "j" "exp2(N)")) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil) ((- const-decl "[numfield, numfield -> numfield]" number_fields nil) (exp2 def-decl "posnat" exp2 nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (unsigned const-decl "nat" unsigned nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" add_signed nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (unsigned_inj formula-decl nil unsigned nil) (unsigned_inv formula-decl nil to_vec_inc nil) (nil application-judgement "above(n)" exp2 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "below(m)" mod nil) (- const-decl "[numfield -> numfield]" number_fields nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (mod_sum formula-decl nil mod nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (TRUE const-decl "bool" booleans nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_even_is_even application-judgement "even_int" integers nil)) shostak))("add_signed" add_signed add_overflow_vec_signed_TCC1 0 (add_overflow_vec_signed_TCC1-1 nil 3726419496 ("" (subtype-tcc) nil nil) nil nil))("general_lemmas" general_lemmas extz_empty_TCC3 0 (extz_empty_TCC3-1 nil 3726418162 ("" (subtype-tcc) nil nil) nil nil))("general_lemmas" general_lemmas to_vec_inv_signed_TCC1 0 (to_vec_inv_signed_TCC1-1 nil 3726421743 ("" (subtype-tcc) nil nil) nil nil))("minus" minus minus_overflow_vec_signed_TCC1 0 (minus_overflow_vec_signed_TCC1-1 nil 3722615120 ("" (subtype-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("minus" minus unary_minus 0 (unary_minus-1 nil 3725063656 ("" (skeep) (("" (rewrite "to_vec_inj_rev") (("1" (hide 2) (("1" (case "unsigned(bv) < exp2(N - 1)") (("1" (replaces -1) (("1" (case "unsigned(bv) = minint[N]") (("1" (grind) nil nil) ("2" (replaces 1) (("2" (use "unsigned_neg_sum1[N]") (("2" (both-sides "-" "unsigned(LAMBDA (i_1: below(N)): NOT NOT bv(i_1))" -1) (("1" (assert) (("1" (replaces -1) (("1" (assert) (("1" (case "(LAMBDA (i_1: below(N)): bv(i_1)) = bv") (("1" (replaces -1) (("1" (use "mod_sum" ("i" "-unsigned(bv)" "k" "1" "j" "exp2(N)")) (("1" (assert) nil nil)) nil)) nil) ("2" (decompose-equality) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (replaces 1) (("2" (case "unsigned(bv) - exp2(N) = minint[N]") (("1" (replace -1) (("1" (use "unsigned_neg_sum1[N]") (("1" (both-sides "-" "unsigned(bv)" -1) (("1" (assert) (("1" (replaces -1) (("1" (assert) (("1" (expand "minint[N]") (("1" (mult-by -1 "-1") (("1" (assert) (("1" (replaces -1) (("1" (case "mod(-exp2(N - 1) * -1, exp2(N)) = exp2(N-1)") (("1" (replaces -1) (("1" (case "mod(-exp2(N - 1), exp2(N)) = exp2(N-1)") (("1" (replaces -1) nil nil) ("2" (rewrite "mod_lt") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil) ("2" (rewrite "mod_lt") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replaces 1) (("2" (use "unsigned_neg_sum1[N]" ("bv" "bv")) (("2" (both-sides "-" "unsigned(bv)" -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ((IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (to_vec_inj_rev formula-decl nil to_vec_inc nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" minus nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (unsigned const-decl "nat" unsigned nil) (NOT const-decl "[bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (= const-decl "[T, T -> boolean]" equalities nil) (exp2 def-decl "posnat" exp2 nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (minint const-decl "int" bv_int_defs nil) (- const-decl "[numfield -> numfield]" number_fields nil) (nil application-judgement "below(m)" mod nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (bv2nat_rec def-decl "nat" bv_nat nil) (b2n const-decl "nbit" bit nil) (^ const-decl "bit" bv nil) (int_plus_int_is_int application-judgement "int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (unsigned_neg_sum1 formula-decl nil signed nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (mod_sum formula-decl nil mod nil) (/= const-decl "boolean" notequal nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (TRUE const-decl "bool" booleans nil) (both_sides_times1_imp formula-decl nil extra_real_props nil) (mod_lt formula-decl nil mod nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}" real_defs nil) (sgn const-decl "int" real_defs nil) (minus_even_is_even application-judgement "even_int" integers nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) shostak))("minus" minus add_plus_neg 0 (add_plus_neg-1 nil 3725386157 ("" (skeep) (("" (rewrite "unsigned_inv") (("" (use "unsigned_neg_sum1" ("bv" "(LAMBDA (i: below(N)): NOT bv(i))")) (("" (case "(LAMBDA (i_1: below(N)): NOT NOT bv(i_1)) = bv") (("1" (replaces -1) (("1" (both-sides "-" "unsigned(bv)" -1) (("1" (assert) (("1" (replaces -1) (("1" (assert) (("1" (case "unsigned(bv) = 0") (("1" (replaces -1) (("1" (assert) (("1" (rewrite "mod_eq_arg") (("1" (rewrite "to_vec_fill_F") (("1" (rewrite "mod_zero") nil nil)) nil)) nil)) nil)) nil) ("2" (rewrite "mod_lt_nat") (("2" (assert) (("2" (rewrite "to_vec_fill_F") (("2" (rewrite "mod_eq_arg") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("2" (decompose-equality) nil nil)) nil)) nil)) nil)) nil) ((nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nil application-judgement "above(n)" exp2 nil) nil (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "nat" minus nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (unsigned const-decl "nat" unsigned nil) (NOT const-decl "[bool -> bool]" booleans nil) (nil application-judgement "below(m)" mod nil) (= const-decl "[T, T -> boolean]" equalities nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (exp2 def-decl "posnat" exp2 nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) nil (mod_zero formula-decl nil mod nil) (mod_eq_arg formula-decl nil mod nil) (/= const-decl "boolean" notequal nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (mod_lt_nat formula-decl nil mod nil) (int_plus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (bv2nat_rec def-decl "nat" bv_nat nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (TRUE const-decl "bool" booleans nil) nil) shostak))("minus" minus minus_eq_plus_neg 0 (minus_eq_plus_neg-1 nil 3725330750 ("" (skeep) (("" (rewrite "to_vec_inj_rev") (("" (hide 2) (("" (rewrite "unsigned_inv") (("" (rewrite "mod_sum_nat") (("1" (case "1 + unsigned[N](LAMBDA (i: below(N)): NOT bv2(i)) < exp2(N)") (("1" (replace -1) (("1" (use "unsigned_neg_sum1[N]" ("bv" "bv2")) (("1" (both-sides "-" "unsigned(bv2)" -1) (("1" (assert) (("1" (replaces -1) (("1" (assert) (("1" (use "mod_sum" ("i" "unsigned[N](bv1) - unsigned[N](bv2)" "k" "1" "j" "exp2(N)")) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replaces 1) (("2" (use "unsigned_neg_sum1[N]" ("bv" "bv2")) (("2" (both-sides "-" "unsigned(bv2)" -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (use "unsigned_upperbound[N]") nil nil)) nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nil application-judgement "above(n)" exp2 nil) (to_vec_inj_rev formula-decl nil to_vec_inc nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "nat" minus nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (unsigned const-decl "nat" unsigned nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (NOT const-decl "[bool -> bool]" booleans nil) (nil application-judgement "below(m)" mod nil) nil (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (unsigned_upperbound formula-decl nil unsigned nil) nil (int_plus_int_is_int application-judgement "int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (mod_sum formula-decl nil mod nil) (/= const-decl "boolean" notequal nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (TRUE const-decl "bool" booleans nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (= const-decl "[T, T -> boolean]" equalities nil) (mod_sum_nat formula-decl nil mod nil) (exp2 def-decl "posnat" exp2 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) shostak))("minus" minus minus_eq_plus_neg_TCC1 0 (minus_eq_plus_neg_TCC1-1 nil 3726423083 ("" (subtype-tcc) nil nil) nil nil))("general_lemmas" general_lemmas unary_minus 0 (unary_minus-1 nil 3726422988 ("" (skeep) (("" (grind) (("1" (postpone) nil nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil) ("5" (postpone) nil nil) ("6" (postpone) nil nil) ("7" (postpone) nil nil) ("8" (postpone) nil nil)) nil)) nil) nil shostak))("general_lemmas" general_lemmas add_plus_neg_TCC1 0 (add_plus_neg_TCC1-1 nil 3726423297 ("" (subtype-tcc) nil nil) nil nil))("multiply_signed" multiply_signed mult_range_vec_def 0 (mult_range_vec_def-1 nil 3725823373 ("" (skeep) (("" (rewrite "to_vec_inj_rev") (("" (hide 2) (("" (rewrite "unsigned_inv") (("" (assert) nil nil)) nil)) nil)) nil)) nil) ((nil application-judgement "above(n)" exp2 nil) (unsigned_inv formula-decl nil to_vec_inc nil) (nil application-judgement "below(m)" mod nil) (to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (- const-decl "[numfield -> numfield]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (unsigned const-decl "nat" unsigned nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (to_vec_inj_rev formula-decl nil to_vec_inc nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil)) shostak))("multiply_signed" multiply_signed mult_vec_range_def 0 (mult_vec_range_def-1 nil 3725823211 ("" (skeep) (("" (rewrite "to_vec_inj_rev") (("" (hide 2) (("" (rewrite "unsigned_inv") nil nil)) nil)) nil)) nil) ((nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (to_vec_inj_rev formula-decl nil to_vec_inc nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (unsigned const-decl "nat" unsigned nil) (/= const-decl "boolean" notequal nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (nil application-judgement "below(m)" mod nil) (unsigned_inv formula-decl nil to_vec_inc nil) (nil application-judgement "above(n)" exp2 nil)) shostak))("multiply_signed" multiply_signed multiply_def 0 (multiply_def-1 nil 3725821646 ("" (skeep :preds? t) (("" (rewrite "unsigned_inv") (("" (rewrite "mod_lt_nat") (("" (case "unsigned[n](bv1) < exp2(n)") (("1" (case "unsigned[m](bv2) < exp2(n)") (("1" (mult-ineq -1 -2) (("1" (use "exp2_sum" ("n" "n" "m" "n")) (("1" (replaces -1) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (use "unsigned_upperbound[m]") (("2" (assert) nil nil)) nil)) nil) ("2" (use "unsigned_upperbound[n]") nil nil)) nil)) nil)) nil)) nil) ((exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (mod_lt_nat formula-decl nil mod nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (exp2_sum formula-decl nil exp2 nil) (TRUE const-decl "bool" booleans nil) (lt_times_lt_any1 formula-decl nil extra_real_props nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (unsigned_upperbound formula-decl nil unsigned nil) (nil application-judgement "below(m)" mod nil) (unsigned const-decl "nat" unsigned nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (unsigned_inv formula-decl nil to_vec_inc nil) (nil application-judgement "above(n)" exp2 nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil)) shostak))("multiply_signed" multiply_signed multiply_vec_commutativity 0 (multiply_vec_commutativity-1 nil 3725821957 ("" (skeep) (("" (replace -1) (("" (use "to_vec_inj_rev") (("" (use "to_vec_inj_rev" ("len" "2 * m" "x" " unsigned[n](bv1) * unsigned[m](bv2)" "y" "unsigned[m](bv2) * unsigned[n](bv1)")) (("" (prop) (("" (hide 2) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((nil application-judgement "below(m)" mod nil) (nil application-judgement "above(n)" exp2 nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (unsigned const-decl "nat" unsigned nil) (to_vec_inj_rev formula-decl nil to_vec_inc nil)) shostak))("multiply_signed" multiply_signed multiply_vec_commutativity_TCC1 0 (multiply_vec_commutativity_TCC1-1 nil 3725821947 ("" (subtype-tcc) nil nil) nil nil))("quot" quot quot_overflow_vec_signed_TCC1 0 (quot_overflow_vec_signed_TCC1-1 nil 3722619254 ("" (subtype-tcc) nil nil) ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (bool nonempty-type-eq-decl nil booleans nil) (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (M formal-const-decl "posnat" quot nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (exp2 def-decl "posnat" exp2 nil) (NOT const-decl "[bool -> bool]" booleans nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_int_is_int application-judgement "int" integers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (maxint const-decl "int" bv_int_defs nil) (minint const-decl "int" bv_int_defs nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil))("quot" quot quot_vec_signed_TCC6 0 (quot_vec_signed_TCC6-1 nil 3722619254 ("" (subtype-tcc) nil nil) ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (bool nonempty-type-eq-decl nil booleans nil) (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (M formal-const-decl "posnat" quot nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (exp2 def-decl "posnat" exp2 nil) (NOT const-decl "[bool -> bool]" booleans nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil))("quot" quot quot_vec_signed_TCC5 0 (quot_vec_signed_TCC5-1 nil 3722619254 ("" (subtype-tcc) nil nil) ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (bool nonempty-type-eq-decl nil booleans nil) (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (M formal-const-decl "posnat" quot nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (exp2 def-decl "posnat" exp2 nil) (NOT const-decl "[bool -> bool]" booleans nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil))("quot" quot quot_vec_signed_TCC4 0 (quot_vec_signed_TCC4-1 nil 3722619254 ("" (subtype-tcc) nil nil) ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (bool nonempty-type-eq-decl nil booleans nil) (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (M formal-const-decl "posnat" quot nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (exp2 def-decl "posnat" exp2 nil) (NOT const-decl "[bool -> bool]" booleans nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil))("quot" quot quot_vec_signed_TCC3 0 (quot_vec_signed_TCC3-1 nil 3722619254 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (bool nonempty-type-eq-decl nil booleans nil) (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (M formal-const-decl "posnat" quot nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (exp2 def-decl "posnat" exp2 nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (NOT const-decl "[bool -> bool]" booleans nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))("quot" quot quot_vec_signed_TCC2 0 (quot_vec_signed_TCC2-1 nil 3722619254 ("" (subtype-tcc) nil nil) ((int_minus_int_is_int application-judgement "int" integers nil)) nil))("quot" quot quot_vec_signed_TCC1 0 (quot_vec_signed_TCC1-1 nil 3722619254 ("" (subtype-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("quot" quot quot_zero 0 (quot_zero-1 nil 3725928718 ("" (skeep :preds? t) (("" (grind) (("1" (div-by -2 "m") (("1" (assert) (("1" (div-by -3 "m") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (div-by -2 "m" -) (("2" (div-by -3 "m" -) (("2" (assert) nil nil)) nil)) nil) ("3" (div-by -2 "m" -) (("3" (div-by -3 "m" -) (("3" (assert) nil nil)) nil)) nil) ("4" (div-by -2 "m") (("4" (div-by 2 "m") (("4" (assert) nil nil)) nil)) nil)) nil)) nil) ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}" real_defs nil) (minus_int_is_int application-judgement "int" integers nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (div_simp formula-decl nil real_props nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (nzint nonempty-type-eq-decl nil integers nil) (both_sides_div_pos_lt1 formula-decl nil real_props nil) (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (<= const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (both_sides_div_neg_lt1 formula-decl nil real_props nil) (both_sides_div_neg_gt1 formula-decl nil real_props nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)) shostak))("quot" quot quot_eq_div 0 (quot_eq_div-1 nil 3725929207 ("" (skeep :preds? t) (("" (grind) (("1" (rewrite "ceiling_int") nil nil) ("2" (rewrite "ceiling_int") nil nil) ("3" (rewrite "floor_int") nil nil) ("4" (rewrite "floor_int") nil nil)) nil)) nil) ((integer? const-decl "bool" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (integer nonempty-type-from-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (ceiling_int formula-decl nil floor_ceil nil) (floor_int formula-decl nil floor_ceil nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)) shostak))("quot_signed" quot_signed quot_zero 0 (quot_zero-1 nil 3726428470 ("" (skeep :preds? t) (("" (grind) (("1" (div-by -2 "m") (("1" (assert) (("1" (div-by -3 "m") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (div-by -2 "m" -) (("2" (div-by -3 "m" -) (("2" (assert) nil nil)) nil)) nil) ("3" (div-by -2 "m" -) (("3" (div-by -3 "m" -) (("3" (assert) nil nil)) nil)) nil) ("4" (div-by -2 "m") (("4" (div-by 2 "m") (("4" (assert) nil nil)) nil)) nil)) nil)) nil) ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}" real_defs nil) (minus_int_is_int application-judgement "int" integers nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (div_simp formula-decl nil real_props nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (nzint nonempty-type-eq-decl nil integers nil) (both_sides_div_pos_lt1 formula-decl nil real_props nil) (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (<= const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (both_sides_div_neg_lt1 formula-decl nil real_props nil) (both_sides_div_neg_gt1 formula-decl nil real_props nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)) shostak))("quot" quot quot_abs_less 0 (quot_abs_less-1 nil 3725929036 ("" (skeep :preds? t) (("" (grind) (("1" (div-by -4 "m" -) (("1" (assert) (("1" (div-by -2 "m" -) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (div-by 3 "m" -) (("2" (assert) nil nil)) nil) ("3" (div-by 2 "-1" -) (("3" (assert) (("3" (div-by 2 "m" +) (("3" (assert) nil nil)) nil)) nil)) nil) ("4" (div-by 2 "m") (("4" (div-by -2 "m") (("4" (assert) nil nil)) nil)) nil) ("5" (div-by 4 "-1" -) (("5" (assert) (("5" (div-by 4 "m") (("5" (assert) (("5" (div-by 3 "m") (("5" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("6" (div-by 5 "m") (("6" (div-by 3 "m") (("6" (assert) nil nil)) nil)) nil) ("7" (div-by 4 "-1" -) (("7" (assert) (("7" (div-by 4 "m" -) (("7" (assert) nil nil)) nil)) nil)) nil) ("8" (div-by 4 "m" -) (("8" (div-by 2 "m" -) (("8" (assert) nil nil)) nil)) nil)) nil)) nil) ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}" real_defs nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_int_is_int application-judgement "int" integers nil) (both_sides_div_neg_gt1 formula-decl nil real_props nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (times_div_cancel1 formula-decl nil extra_real_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (<= const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (nzint nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (integer nonempty-type-from-decl nil integers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (both_sides_div_neg_lt1 formula-decl nil real_props nil) (both_sides_div_neg_le1 formula-decl nil real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (both_sides_div_pos_le1 formula-decl nil real_props nil) (- const-decl "[numfield -> numfield]" number_fields nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (both_sides_div_pos_lt1 formula-decl nil real_props nil) (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)) shostak))("modulo" modulo extz_rep_fill_F 0 (extz_rep_fill_F-1 nil 3725915523 ("" (skeep :preds? t) (("" (expand "o") (("" (expand "^") (("" (decompose-equality) (("" (grind) nil nil)) nil)) nil)) nil)) nil) ((int_plus_int_is_int application-judgement "int" integers nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (below type-eq-decl nil nat_types nil) (fill const-decl "bit" bv nil) (FALSE const-decl "bool" booleans nil) (below type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (^ const-decl "bit" bv nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("modulo" modulo extz_rep_fill_F_TCC4 0 (extz_rep_fill_F_TCC4-1 nil 3725915522 ("" (subtype-tcc) nil nil) nil nil))("modulo" modulo extz_rep_fill_F_TCC3 0 (extz_rep_fill_F_TCC3-1 nil 3725915522 ("" (subtype-tcc) nil nil) nil nil))("modulo" modulo extz_rep_fill_F_TCC2 0 (extz_rep_fill_F_TCC2-1 nil 3725915522 ("" (subtype-tcc) nil nil) nil nil))("modulo" modulo extz_rep_fill_F_TCC1 0 (extz_rep_fill_F_TCC1-1 nil 3725915522 ("" (subtype-tcc) nil nil) nil nil))("modulo" modulo subvec_mod_rel 0 (subvec_mod_rel-1 nil 3725923239 ("" (induct "n") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (skeep) (("3" (prop) (("1" (assert) (("1" (skeep) (("1" (inst -1 "m" "bv ^ (j, 1)") (("1" (assert) (("1" (prop) (("1" (case "bv ^ (j, 1) ^ (j - 1, j - m) = bv ^ (j, 1 - m + j)") (("1" (replaces -1) (("1" (use "unsigned_rec[1 + j]" ("n" "j" "x" "bv")) (("1" (replaces -1) (("1" (case "mod(exp2(j) * b2n(bv(0)) + unsigned[j](bv ^ (j, 1)), exp2(m)) = mod(unsigned[j](bv ^ (j, 1)), exp2(m))") (("1" (replace -1) (("1" (propax) nil nil)) nil) ("2" (hide 2) (("2" (use "exp2_minus" ("n" "j" "k" "m")) (("2" (mult-by -1 "exp2(m)") (("2" (swap-rel -1) (("2" (replace -1) (("2" (use "mod_sum" ("i" "unsigned[j](bv ^ (j, 1))" "k" "exp2(j - m) * b2n(bv(0))" "j" "exp2(m)")) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "^") (("2" (propax) nil nil)) nil)) nil) ("2" (case "m = j") (("1" (replace -1) (("1" (assert) (("1" (use "unsigned_rec[1 + j]" ("n" "j" "x" "bv")) (("1" (replaces -1) (("1" (use "mod_sum" ("i" "unsigned[j](bv ^ (j, 1))" "k" "b2n(bv(0))" "j" "exp2(j)")) (("1" (assert) (("1" (replace -1) (("1" (hide -1) (("1" (rewrite "mod_lt_nat") (("1" (use "extz_unsigned" ("n" "m" "m" "j - m" "bv" "bv ^ (j, 1)")) (("1" (assert) nil nil)) nil) ("2" (use "unsigned_upperbound[j]" ("bv" "bv ^ (j, 1)")) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil) ("2" (case "j = 0") (("1" (replace -1) (("1" (case "m = 0") (("1" (replace -1) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (case "j = 0") (("1" (skeep) (("1" (replace -1) (("1" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("4" (grind) nil nil) ("5" (grind) nil nil)) nil) ((even_times_int_is_even application-judgement "even_int" integers nil) (^ const-decl "bit" bv nil) (bv2nat_rec def-decl "nat" bv_nat nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (NOT const-decl "[bool -> bool]" booleans nil) (even_plus_odd_is_odd application-judgement "odd_int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (TRUE const-decl "bool" booleans nil) (both_sides_times1_imp formula-decl nil extra_real_props nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (div_cancel2 formula-decl nil real_props nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (mod_sum formula-decl nil mod nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (exp2_minus formula-decl nil exp2 nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (nbit type-eq-decl nil bit nil) (b2n const-decl "nbit" bit nil) (unsigned_rec formula-decl nil signed nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (mod_lt_nat formula-decl nil mod nil) (extz_unsigned formula-decl nil to_vec_inc nil) (unsigned_upperbound formula-decl nil unsigned nil) (int_plus_int_is_int application-judgement "int" integers nil) (nil application-judgement "below(m)" mod nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (odd_plus_even_is_odd application-judgement "odd_int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nat_induction formula-decl nil naturalnumbers nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil) (exp2 def-decl "posnat" exp2 nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (- const-decl "[numfield -> numfield]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (unsigned const-decl "nat" unsigned nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil)) shostak))("modulo" modulo subvec_mod_rel_TCC2 0 (subvec_mod_rel_TCC2-1 nil 3725923238 ("" (subtype-tcc) nil nil) nil nil))("modulo" modulo subvec_mod_rel_TCC1 0 (subvec_mod_rel_TCC1-1 nil 3725923238 ("" (subtype-tcc) nil nil) nil nil))("modulo" modulo extz_mod_rel 0 (extz_mod_rel-1 nil 3725908757 ("" (skeep :preds? t) (("" (assert) (("" (use "exp2_lt") (("" (rewrite "mod_lt_nat") (("" (case "unsigned[N](bv) < exp2(len)") (("1" (rewrite "mod_lt_nat") (("1" (rewrite "to_vec_inv") (("1" (use "unsigned_mibs_zero") (("1" (assert) (("1" (use "extz_unsigned" ("n" "len" "m" "N - len" "bv" "bv ^ (N - 1, N - len)")) (("1" (assert) (("1" (use "extz_rep_fill_F") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (rewrite "unsigned_inv") (("2" (case "mod(mod(unsigned[N](bv), exp2(len)), exp2(N)) = mod(unsigned[N](bv), exp2(len))") (("1" (replaces -1) (("1" (use "subvec_mod_rel" ("n" "N" "m" "len" "bv" "bv")) (("1" (assert) nil nil)) nil)) nil) ("2" (use "mod_lt_nat" ("n" "mod(unsigned[N](bv), exp2(len))" "m" "exp2(N)")) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((nil application-judgement "below(m)" mod nil) (nil application-judgement "above(n)" exp2 nil) (exp2_lt formula-decl nil exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (N formal-const-decl "nat" modulo nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (unsigned const-decl "nat" unsigned nil) (to_vec_inv formula-decl nil to_vec_inc nil) (int_plus_int_is_int application-judgement "int" integers nil) (extz_rep_fill_F formula-decl nil modulo nil) (extz_unsigned formula-decl nil to_vec_inc nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (unsigned_mibs_zero formula-decl nil to_vec_inc nil) (unsigned_inv formula-decl nil to_vec_inc nil) (/= const-decl "boolean" notequal nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (TRUE const-decl "bool" booleans nil) (subvec_mod_rel formula-decl nil modulo nil) (= const-decl "[T, T -> boolean]" equalities nil) (mod_lt_nat formula-decl nil mod nil) (exp2 def-decl "posnat" exp2 nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("modulo" modulo extz_mod_rel_TCC6 0 (extz_mod_rel_TCC6-1 nil 3725908756 ("" (subtype-tcc) nil nil) nil nil))("modulo" modulo extz_mod_rel_TCC5 0 (extz_mod_rel_TCC5-1 nil 3725908756 ("" (subtype-tcc) nil nil) nil nil))("modulo" modulo extz_mod_rel_TCC4 0 (extz_mod_rel_TCC4-1 nil 3725908756 ("" (subtype-tcc) nil nil) nil nil))("modulo" modulo extz_mod_rel_TCC3 0 (extz_mod_rel_TCC3-1 nil 3725908756 ("" (subtype-tcc) nil nil) nil nil))("modulo" modulo extz_mod_rel_TCC2 0 (extz_mod_rel_TCC2-1 nil 3725908756 ("" (subtype-tcc) nil nil) nil nil))("modulo" modulo extz_mod_rel_TCC1 0 (extz_mod_rel_TCC1-1 nil 3725908756 ("" (subtype-tcc) nil nil) nil nil))("modulo" modulo exts_mod_rel 0 (exts_mod_rel-1 nil 3725925492 ("" (skeep) (("" (assert) (("" (use "extz_mod_rel") (("" (assert) nil nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (N formal-const-decl "nat" modulo nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (extz_mod_rel formula-decl nil modulo nil) (nil application-judgement "above(n)" exp2 nil) (nil application-judgement "below(m)" mod nil)) shostak))("modulo" modulo exts_mod_rel_TCC1 0 (exts_mod_rel_TCC1-1 nil 3725925491 ("" (subtype-tcc) nil nil) nil nil))("general_lemmas" general_lemmas extz_mod_rel_TCC6 0 (extz_mod_rel_TCC6-1 nil 3726429982 ("" (subtype-tcc) nil nil) nil nil))("general_lemmas" general_lemmas extz_mod_rel_TCC5 0 (extz_mod_rel_TCC5-1 nil 3726429982 ("" (subtype-tcc) nil nil) nil nil))("modulo" modulo mask_mod_rel 0 (mask_mod_rel-1 nil 3725925726 ("" (skeep :preds? t) (("" (expand "mask") (("" (case "m = n") (("1" (replace -1) (("1" (assert) (("1" (rewrite "mod_lt_nat") (("1" (use "extz_unsigned" ("n" "m" "m" "n - m" "bv" "bv")) (("1" (assert) (("1" (replace -1) (("1" (case "(LAMBDA (i: below[m]): bv(i)) = bv") (("1" (replace -1) (("1" (propax) nil nil)) nil) ("2" (decompose-equality) nil nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil) ("2" (use "unsigned_upperbound[n]") nil nil)) nil)) nil)) nil) ("2" (case "m < n") (("1" (use "subvec_mod_rel" ("n" "n" "m" "m" "bv" "bv")) (("1" (assert) (("1" (case "(LAMBDA (i: below[m]): bv(i - m + n)) = bv ^ (n - 1, n - m)") (("1" (replace -1) (("1" (propax) nil nil)) nil) ("2" (expand "^") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ((nil application-judgement "above(n)" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nil application-judgement "below(m)" mod nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (unsigned_upperbound formula-decl nil unsigned nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (extz_unsigned formula-decl nil to_vec_inc nil) (below type-eq-decl nil nat_types nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (bv2nat_rec def-decl "nat" bv_nat nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (unsigned const-decl "nat" unsigned nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (exp2 def-decl "posnat" exp2 nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (mod_lt_nat formula-decl nil mod nil) (subvec_mod_rel formula-decl nil modulo nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (mask const-decl "bvec[m]" mask nil) (int_plus_int_is_int application-judgement "int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("general_lemmas" general_lemmas extz_rep_fill_F 0 (extz_rep_fill_F-1 nil 3726429303 ("" (skeep :preds? t) (("" (expand "o") (("" (expand "^") (("" (decompose-equality) (("" (grind) nil nil)) nil)) nil)) nil)) nil) ((int_plus_int_is_int application-judgement "int" integers nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (below type-eq-decl nil nat_types nil) (fill const-decl "bit" bv nil) (FALSE const-decl "bool" booleans nil) (below type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (^ const-decl "bit" bv nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("general_lemmas" general_lemmas extz_rep_fill_F_TCC4 0 (extz_rep_fill_F_TCC4-1 nil 3726429285 ("" (subtype-tcc) nil nil) nil nil))("general_lemmas" general_lemmas extz_rep_fill_F_TCC3 0 (extz_rep_fill_F_TCC3-1 nil 3726429285 ("" (subtype-tcc) nil nil) nil nil))("general_lemmas" general_lemmas extz_rep_fill_F_TCC2 0 (extz_rep_fill_F_TCC2-1 nil 3726429285 ("" (subtype-tcc) nil nil) nil nil))("general_lemmas" general_lemmas extz_rep_fill_F_TCC1 0 (extz_rep_fill_F_TCC1-1 nil 3726429285 ("" (subtype-tcc) nil nil) nil nil))("general_lemmas" general_lemmas exts_mod_rel_TCC7 0 (exts_mod_rel_TCC7-1 nil 3726437334 ("" (subtype-tcc) nil nil) nil nil))("general_lemmas" general_lemmas extz_mod_rel_TCC4 0 (extz_mod_rel_TCC4-1 nil 3726429982 ("" (subtype-tcc) nil nil) nil nil))("general_lemmas" general_lemmas unsigned_inv 0 (unsigned_inv-1 nil 3726344413 ("" (skeep) (("" (expand "to_vec_inc") (("" (expand "unsigned") (("" (case "val >= 0 AND val < exp2(len)") (("1" (replace -1) (("1" (case "(LAMBDA (i_1: below(len)): nat2bv[len](val)(i_1)) = nat2bv[len](val)") (("1" (replaces -1) (("1" (rewrite "bv2nat_inv") (("1" (rewrite "mod_lt_nat") nil nil)) nil)) nil) ("2" (decompose-equality) (("2" (grind) nil nil)) nil) ("3" (propax) nil nil) ("4" (grind) nil nil)) nil)) nil) ("2" (replace 1) (("2" (case "(LAMBDA (i_1: below(len)): nat2bv[len](mod(val, exp2(len)))(i_1)) = nat2bv[len](mod(val, exp2(len)))") (("1" (replaces -1) (("1" (rewrite "bv2nat_inv") nil nil)) nil) ("2" (decompose-equality) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (>= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (bvec type-eq-decl nil bv nil) (= const-decl "[T, T -> boolean]" equalities nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (bv2nat_inv formula-decl nil bv_nat nil) (nil application-judgement "below(m)" mod nil) (mod_lt_nat formula-decl nil mod nil) (TRUE const-decl "bool" booleans nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (val skolem-const-decl "int" general_lemmas nil) (len skolem-const-decl "nat" general_lemmas nil) (even_times_int_is_even application-judgement "even_int" integers nil) (NOT const-decl "[bool -> bool]" booleans nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (unsigned const-decl "nat" unsigned nil) (nil application-judgement "above(n)" exp2 nil)) shostak))("general_lemmas" general_lemmas unsigned_inv_ext 0 (unsigned_inv_ext-1 nil 3726344731 ("" (skeep) (("" (case "(LAMBDA (i: below(len)): nat2bv[len](val)(len - 1 - i)) = (to_vec_inc(len, val))") (("1" (replaces -1) (("1" (rewrite "unsigned_inv") nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil) ((to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (bvec type-eq-decl nil bv nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (= const-decl "[T, T -> boolean]" equalities nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (unsigned_inv formula-decl nil general_lemmas nil) (TRUE const-decl "bool" booleans nil) (unsigned const-decl "nat" unsigned nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (int_plus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (nil application-judgement "below(m)" mod nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (NOT const-decl "[bool -> bool]" booleans nil) (nil application-judgement "above(n)" exp2 nil)) shostak))("general_lemmas" general_lemmas unsigned_inv_ext_TCC1 0 (unsigned_inv_ext_TCC1-1 nil 3726344729 ("" (subtype-tcc) nil nil) ((int_minus_int_is_int application-judgement "int" integers nil)) nil))("general_lemmas" general_lemmas mod_signed_to_vec_eq_TCC2 0 (mod_signed_to_vec_eq_TCC2-1 nil 3726507949 ("" (subtype-tcc) nil nil) nil nil))("general_lemmas" general_lemmas mod_signed_to_vec_eq_TCC1 0 (mod_signed_to_vec_eq_TCC1-1 nil 3726507949 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas" test_lemmas quot_overflow_vec_signed_test2_TCC1 0 (quot_overflow_vec_signed_test2_TCC1-1 nil 3722797248 ("" (subtype-tcc) nil nil) nil nil))("test_lemmas" test_lemmas quot_overflow_vec_signed_test1_TCC1 0 (quot_overflow_vec_signed_test1_TCC1-1 nil 3722797248 ("" (subtype-tcc) nil nil) nil nil))("general_lemmas" general_lemmas mod_eq_mib_to_vec 0 (mod_eq_mib_to_vec-1 nil 3726605719 ("" (skeep) (("" (expand "most_significant") (("" (expand "b2n") (("" (case "to_vec_inc(1 + len, val)(0)") (("1" (replace -1) (("1" (postpone) nil nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil) nil shostak))("general_lemmas" general_lemmas calc_c_out_eq_mib_vec 0 (calc_c_out_eq_mib_vec-1 nil 3726606227 ("" (skeep :preds? t) (("" (assert) (("" (expand "most_significant") (("" (case "to_vec_inc(1 + len, val)(0)") (("1" (assert) (("1" (use "odd_mod") (("1" (assert) (("1" (prop) (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil) nil shostak))("general_lemmas" general_lemmas unsigned_left_shift_TCC3 0 (unsigned_left_shift_TCC3-1 nil 3726611864 ("" (subtype-tcc) nil nil) nil nil))("general_lemmas" general_lemmas unsigned_left_shift_TCC2 0 (unsigned_left_shift_TCC2-1 nil 3726611864 ("" (subtype-tcc) nil nil) nil nil))("general_lemmas" general_lemmas unsigned_left_shift_TCC1 0 (unsigned_left_shift_TCC1-1 nil 3726611864 ("" (subtype-tcc) nil nil) nil nil))("general_lemmas" general_lemmas unsigned_left_shift_limited_TCC3 0 (unsigned_left_shift_limited_TCC3-1 nil 3726612621 ("" (subtype-tcc) nil nil) nil nil))("general_lemmas" general_lemmas unsigned_left_shift_limited_TCC2 0 (unsigned_left_shift_limited_TCC2-1 nil 3726612621 ("" (subtype-tcc) nil nil) nil nil))("general_lemmas" general_lemmas unsigned_left_shift_limited_TCC1 0 (unsigned_left_shift_limited_TCC1-1 nil 3726612621 ("" (subtype-tcc) nil nil) nil nil))("bitwise_not" bitwise_not bit_not_inv 0 (bit_not_inv-1 nil 3726329568 ("" (grind) nil nil) nil shostak))("bitwise_and" bitwise_and bit_and_associativity 0 (bit_and_associativity-1 nil 3724686227 ("" (grind) nil nil) nil shostak))("bitwise_and" bitwise_and bit_and_commutativity 0 (bit_and_commutativity-1 nil 3724686209 ("" (grind) nil nil) nil shostak))("bitwise_or" bitwise_or bit_or_associativity 0 (bit_or_associativity-1 nil 3724690065 ("" (grind) nil nil) nil shostak))("bitwise_or" bitwise_or bit_or_commutativity 0 (bit_or_commutativity-1 nil 3724689773 ("" (grind) nil nil) nil shostak))("bitwise_xor" bitwise_xor bit_xor_associativity 0 (bit_xor_associativity-1 nil 3724693519 ("" (grind) nil nil) ((/= const-decl "boolean" notequal nil) (XOR const-decl "bool" xor_def nil)) shostak))("bitwise_xor" bitwise_xor bit_xor_commutativity 0 (bit_xor_commutativity-1 nil 3724693435 ("" (skeep) (("" (grind) nil nil)) nil) ((/= const-decl "boolean" notequal nil) (XOR const-decl "bool" xor_def nil)) shostak))("duplicate" duplicate duplicate_bits_op_eq 0 (duplicate_bits_op_eq-1 nil 3725989874 ("" (grind) nil nil) nil shostak))("duplicate" duplicate duplicate_inv 0 (duplicate_inv-1 nil 3724784956 ("" (grind) (("" (expand "extend") (("" (decompose-equality) (("" (grind) nil nil)) nil)) nil)) nil) ((extend const-decl "R" extend nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (N formal-const-decl "nat" duplicate nil) (below type-eq-decl nil naturalnumbers nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (FALSE const-decl "bool" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (bv!1 skolem-const-decl "bvec[N]" duplicate nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (duplicate_bits def-decl "bvec[N * m]" duplicate nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) shostak))("duplicate" duplicate duplicate_inv_TCC1 0 (duplicate_inv_TCC1-1 nil 3724784955 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))("duplicate" duplicate duplicate_empty 0 (duplicate_empty-1 nil 3724784878 ("" (grind) (("" (grind) (("" (expand "extend") (("" (decompose-equality) nil nil)) nil)) nil)) nil) ((FALSE const-decl "bool" booleans nil) (below type-eq-decl nil naturalnumbers nil) (empty_bv const-decl "[below[0] -> bool]" empty_bv nil) (below type-eq-decl nil nat_types nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (N formal-const-decl "nat" duplicate nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (extend const-decl "R" extend nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (duplicate_bits def-decl "bvec[N * m]" duplicate nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) shostak))("duplicate" duplicate duplicate_bits_TCC5 0 (duplicate_bits_TCC5-1 nil 3722462559 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil)) nil))("duplicate" duplicate duplicate_bits_TCC4 0 (duplicate_bits_TCC4-1 nil 3722462559 ("" (termination-tcc) nil nil) nil nil))("duplicate" duplicate duplicate_bits_TCC3 0 (duplicate_bits_TCC3-1 nil 3722462559 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))("duplicate" duplicate duplicate_bits_TCC2 0 (duplicate_bits_TCC2-1 nil 3722462559 ("" (skeep :preds? t) (("" (grind-reals) (("" (div-by 2 "N") (("" (grind-reals) nil nil)) nil)) nil)) nil) ((TRUE const-decl "bool" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" duplicate nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (both_sides_div_pos_ge1 formula-decl nil real_props nil)) nil))("duplicate" duplicate duplicate_bits_TCC1 0 (duplicate_bits_TCC1-1 nil 3722462559 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) nil))("eq_vec_unsigned" eq_vec_unsigned eq_bit_op_eq 0 (eq_bit_op_eq-1 nil 3726355326 ("" (grind) nil nil) nil shostak))("eq_vec_unsigned" eq_vec_unsigned eq_range_op_eq 0 (eq_range_op_eq-1 nil 3726355321 ("" (grind) nil nil) nil shostak))("lt_vec" lt_vec lt_range_vec_op_eq 0 (lt_range_vec_op_eq-1 nil 3725990617 ("" (grind) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("lt_vec" lt_vec lt_vec_range_op_eq 0 (lt_vec_range_op_eq-1 nil 3725990641 ("" (grind) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("gt_vec" gt_vec gt_range_vec_op_eq 0 (gt_range_vec_op_eq-1 nil 3725991101 ("" (grind) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("gt_vec" gt_vec gt_vec_range_op_eq 0 (gt_vec_range_op_eq-1 nil 3725991123 ("" (grind) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("gteq_vec" gteq_vec gteq_range_vec_op_eq 0 (gteq_range_vec_op_eq-1 nil 3725991592 ("" (grind) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("gteq_vec" gteq_vec gteq_vec_range_op_eq 0 (gteq_vec_range_op_eq-1 nil 3725991622 ("" (grind) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("add" add add_vec_range_commutativity 0 (add_vec_range_commutativity-1 nil 3724883986 ("" (grind) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (bv2nat_rec def-decl "nat" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (even_times_int_is_even application-judgement "even_int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("add" add add_vec_op_eq 0 (add_vec_op_eq-1 nil 3725991840 ("" (grind) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (bv2nat_rec def-decl "nat" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (even_times_int_is_even application-judgement "even_int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("add" add add_vec_range_op_eq 0 (add_vec_range_op_eq-1 nil 3725991869 ("" (grind) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (bv2nat_rec def-decl "nat" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (even_times_int_is_even application-judgement "even_int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("add" add add_range_vec_op_eq 0 (add_range_vec_op_eq-1 nil 3725991891 ("" (grind) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (bv2nat_rec def-decl "nat" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (even_times_int_is_even application-judgement "even_int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("add" add add_vec_bit_op_eq 0 (add_vec_bit_op_eq-1 nil 3725991949 ("" (grind) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (bv2nat_rec def-decl "nat" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (even_times_int_is_even application-judgement "even_int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("add" add add_vec_range_vec_range_rel 0 (add_vec_range_vec_range_rel-1 nil 3725991999 ("" (grind) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("minus" minus minus_vec_op_eq 0 (minus_vec_op_eq-1 nil 3725992507 ("" (grind) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (bv2nat_rec def-decl "nat" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (even_times_int_is_even application-judgement "even_int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("minus" minus minus_vec_range_op_eq 0 (minus_vec_range_op_eq-1 nil 3725992652 ("" (grind) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (bv2nat_rec def-decl "nat" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (even_times_int_is_even application-judgement "even_int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("minus" minus minus_range_vec_op_eq 0 (minus_range_vec_op_eq-1 nil 3725992675 ("" (grind) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (bv2nat_rec def-decl "nat" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("multiply" multiply multiply_upperbound 0 (multiply_upperbound-1 nil 3725806144 ("" (skeep) (("" (use "unsigned_upperbound[N]") (("" (use "unsigned_upperbound[M]") (("" (mult-ineq -1 -2) (("" (use "exp2_sum") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ((unsigned_upperbound formula-decl nil unsigned nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" multiply nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (unsigned const-decl "nat" unsigned nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nil application-judgement "above(n)" exp2 nil) (lt_times_lt_any1 formula-decl nil extra_real_props nil) (exp2_sum formula-decl nil exp2 nil) (M formal-const-decl "nat" multiply nil)) shostak))("multiply" multiply mult_overflow_firstelem 0 (mult_overflow_firstelem-1 nil 3725818732 ("" (skeep) (("" (case "unsigned[N](bv1) * unsigned[M](bv2) < exp2(2 * N)") (("1" (replaces -1) (("1" (grind) nil nil)) nil) ("2" (replaces 1) (("2" (assert) (("2" (rewrite "to_vec_inj_rev") (("2" (hide 2) (("2" (use "mod_sum" ("i" "unsigned[N](bv1) * unsigned[M](bv2)" "k" "-1" "j" "exp2(2 * N)")) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (M formal-const-decl "nat" multiply nil) (unsigned const-decl "nat" unsigned nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" multiply nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (bv2nat_rec def-decl "nat" bv_nat nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (int_plus_int_is_int application-judgement "int" integers nil) (even_minus_even_is_even application-judgement "even_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil) (TRUE const-decl "bool" booleans nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (mod_sum formula-decl nil mod nil) (/= const-decl "boolean" notequal nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield -> numfield]" number_fields nil) (nil application-judgement "below(m)" mod nil) (to_vec_inj_rev formula-decl nil to_vec_inc nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil)) shostak))("multiply" multiply multiply_vec_op_eq 0 (multiply_vec_op_eq-1 nil 3725992773 ("" (grind) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (bv2nat_rec def-decl "nat" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (int_plus_int_is_int application-judgement "int" integers nil) (even_minus_even_is_even application-judgement "even_int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("multiply" multiply mult_vec_range_op_eq 0 (mult_vec_range_op_eq-1 nil 3725992840 ("" (grind) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (bv2nat_rec def-decl "nat" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (even_minus_even_is_even application-judgement "even_int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("multiply" multiply mult_range_vec_op_eq 0 (mult_range_vec_op_eq-1 nil 3725992833 ("" (grind) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (bv2nat_rec def-decl "nat" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (even_minus_even_is_even application-judgement "even_int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("multiply" multiply mult_range_vec_range_rel 0 (mult_range_vec_range_rel-1 nil 3725992868 ("" (grind) nil nil) ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (unsigned const-decl "nat" unsigned nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (bv2nat_rec def-decl "nat" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (to_vec_inc const-decl "bvec[len]" to_vec_inc nil) (even_minus_even_is_even application-judgement "even_int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("modulo" modulo mod_vec_range_TCC1 0 (mod_vec_range_TCC1-1 nil 3721589752 ("" (skeep :preds? t) (("" (grind-reals) (("1" (lemma "mod_pos") (("1" (inst -1 "bv2nat[N](bv)" "mod(m, exp2(N))") (("1" (grind-reals) nil nil)) nil)) nil) ("2" (lemma "mod_pos") (("2" (inst -1 "bv2nat[N](bv)" "mod(m, exp2(N))") (("2" (grind-reals) nil nil)) nil)) nil)) nil)) nil) ((nil application-judgement "above(n)" exp2 nil)) nil))("modulo" modulo mod_vec_TCC1 0 (mod_vec_TCC1-1 nil 3721589752 ("" (skeep :preds? t) (("" (grind-reals) (("1" (lemma "mod_pos") (("1" (inst -1 "bv2nat[N](bv1)" "bv2nat(bv2)") (("1" (grind-reals) nil nil)) nil)) nil) ("2" (lemma "mod_pos") (("2" (inst -1 "bv2nat[N](bv1)" "bv2nat(bv2)") (("2" (grind-reals) nil nil)) nil)) nil)) nil)) nil) nil nil))