(bitwise_or
 (bitwise_or_TCC1 0
  (bitwise_or_TCC1-1 nil 3726331225 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" bitwise_or nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (or_inv 0
  (or_inv-1 nil 3724691419
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (OR const-decl "bvec[N]" bv_bitwise nil)
    (below type-eq-decl nil nat_types nil)
    (bvec0 const-decl "bit" bv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" bitwise_or nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (or_one 0
  (or_one-1 nil 3724691469
   ("" (grind) (("" (decompose-equality) nil nil)) nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" bitwise_or nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bvec1 const-decl "bit" bv nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "bvec[N]" bv_bitwise nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil))
   shostak))
 (or_op_eq 0
  (or_op_eq-1 nil 3726333329 ("" (grind) nil nil) nil shostak)))

