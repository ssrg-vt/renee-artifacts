(general_lemmas
 (bvec0_range_inv_TCC1 0
  (bvec0_range_inv_TCC1-1 nil 3726334875 ("" (subtype-tcc) nil nil)
   ((bvec0 const-decl "bit" bv nil)) nil))
 (bvec0_range_inv 0
  (bvec0_range_inv-1 nil 3726334909 ("" (bvec-strat) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (bvec0 const-decl "bit" bv nil) (bit type-eq-decl nil bit nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil))
   shostak))
 (bv2nat_rec_resize_eq_TCC1 0
  (bv2nat_rec_resize_eq_TCC1-1 nil 3726339058
   ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (bv2nat_rec_resize_eq_TCC2 0
  (bv2nat_rec_resize_eq_TCC2-1 nil 3726339058
   ("" (subtype-tcc) nil nil) nil nil))
 (bv2nat_rec_resize_eq_TCC3 0
  (bv2nat_rec_resize_eq_TCC3-1 nil 3726339058
   ("" (subtype-tcc) nil nil) nil nil))
 (bv2nat_rec_resize_eq_TCC4 0
  (bv2nat_rec_resize_eq_TCC4-1 nil 3726339058
   ("" (subtype-tcc) nil nil) nil nil))
 (bv2nat_rec_resize_eq_TCC5 0
  (bv2nat_rec_resize_eq_TCC5-1 nil 3726339058
   ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (bv2nat_rec_resize_eq_TCC6 0
  (bv2nat_rec_resize_eq_TCC6-1 nil 3726339058
   ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (bv2nat_rec_resize_eq 0
  (bv2nat_rec_resize_eq-1 nil 3726339071
   ("" (induct "j")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skeep)
      (("3" (prop)
        (("1" (skeep :preds? t)
          (("1" (skeep)
            (("1" (expand "bv2nat_rec" 1)
              (("1" (case "x ^ (1 + j_1 + k, 0) ^ j_1 = x(j_1)")
                (("1" (replaces -1)
                  (("1" (inst -2 "i + 1" "x")
                    (("1" (inst -2 "k + 1") (("1" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (TRUE const-decl "bool" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (b2n const-decl "nbit" bit nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (^ const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (<= const-decl "bool" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (bv2nat_rec_res_eq_TCC1 0
  (bv2nat_rec_res_eq_TCC1-1 nil 3726339298 ("" (subtype-tcc) nil nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (bv2nat_rec_res_eq_TCC2 0
  (bv2nat_rec_res_eq_TCC2-1 nil 3726339298 ("" (subtype-tcc) nil nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (bv2nat_rec_res_eq_TCC3 0
  (bv2nat_rec_res_eq_TCC3-1 nil 3726339298 ("" (subtype-tcc) nil nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (bv2nat_rec_res_eq_TCC4 0
  (bv2nat_rec_res_eq_TCC4-1 nil 3726339298 ("" (subtype-tcc) nil nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (bv2nat_rec_res_eq 0
  (bv2nat_rec_res_eq-1 nil 3726339299
   ("" (induct "j")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skeep)
      (("3" (prop)
        (("1" (skeep :preds? t)
          (("1" (expand "bv2nat_rec" 1)
            (("1" (inst -2 "i" "x^(i+j_1, 0)" "y^(i+j_1-1,0)")
              (("1" (grind)
                (("1"
                  (lemma "bv2nat_rec_resize_eq"
                   ("i" "i+2" "j" "j_1" "x" "x"))
                  (("1" (inst -1 "i+1")
                    (("1" (assert)
                      (("1" (case "x ^ (1 + i + j_1, 0) = x")
                        (("1" (replaces -1) (("1" (grind) nil nil))
                          nil)
                         ("2" (expand "^")
                          (("2" (decompose-equality) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil)
               ("2" (grind) nil nil) ("3" (grind) nil nil))
              nil))
            nil))
          nil)
         ("2" (case "j_1 = 0")
          (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
        nil))
      nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil))
    nil)
   ((even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (i skolem-const-decl "nat" general_lemmas nil)
    (j_1 skolem-const-decl "nat" general_lemmas nil)
    (bv2nat_rec_resize_eq formula-decl nil general_lemmas nil)
    (TRUE const-decl "bool" booleans nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (<= const-decl "bool" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (nat2bv_inj 0
  (nat2bv_inj-1 nil 3726342059
   ("" (skeep :preds? t) (("" (grind) nil nil)) nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (bv_is_empty_TCC1 0
  (bv_is_empty_TCC1-1 nil 3726612621 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil))
 (bv_is_empty 0
  (bv_is_empty-1 nil 3726612625
   ("" (grind)
    (("" (grind) (("" (decompose-equality) (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (empty_bv const-decl "[below[0] -> bool]" empty_bv nil)
    (extend const-decl "R" extend nil) (bvec type-eq-decl nil bv nil)
    (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil nat_types nil)
    (FALSE const-decl "bool" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (not_inv 0
  (not_inv-1 nil 3726330543
   ("" (grind) (("" (decompose-equality) nil nil)) nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (bvec type-eq-decl nil bv nil)
    (bit type-eq-decl nil bit nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (not_empty 0
  (not_empty-1 nil 3726334952
   ("" (grind) (("" (bvec-strat) nil nil)) nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (empty_bv const-decl "[below[0] -> bool]" empty_bv nil))
   shostak))
 (and_commutativity_TCC1 0
  (and_commutativity_TCC1-1 nil 3726330538 ("" (subtype-tcc) nil nil)
   nil nil))
 (and_commutativity_TCC2 0
  (and_commutativity_TCC2-1 nil 3726330538 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil))
   nil))
 (and_commutativity_TCC3 0
  (and_commutativity_TCC3-1 nil 3726330538 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (and_commutativity 0
  (and_commutativity-1 nil 3726330592
   ("" (skeep :preds? t)
    (("" (decompose-equality)
      (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bv2 skolem-const-decl "bvec[m]" general_lemmas nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (m skolem-const-decl "upfrom(n)" general_lemmas nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (n skolem-const-decl "nat" general_lemmas nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (and_associativity_TCC1 0
  (and_associativity_TCC1-1 nil 3726330696 ("" (subtype-tcc) nil nil)
   nil nil))
 (and_associativity_TCC2 0
  (and_associativity_TCC2-1 nil 3726330696 ("" (subtype-tcc) nil nil)
   nil nil))
 (and_associativity 0
  (and_associativity-1 nil 3726330700 ("" (skeep :preds? t) nil nil)
   nil shostak))
 (and_empty_any_TCC1 0
  (and_empty_any_TCC1-1 nil 3726330920 ("" (subtype-tcc) nil nil)
   ((empty_bv const-decl "[below[0] -> bool]" empty_bv nil)) nil))
 (and_empty_any 0
  (and_empty_any-1 nil 3726330924
   ("" (grind) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((< const-decl "bool" reals nil)
    (n!1 skolem-const-decl "nat" general_lemmas nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil nat_types nil)
    (FALSE const-decl "bool" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (empty_bv const-decl "[below[0] -> bool]" empty_bv nil))
   shostak))
 (and_empty_empty 0
  (and_empty_empty-1 nil 3726330993
   ("" (grind) (("" (decompose-equality) nil nil)) nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (TRUE const-decl "bool" booleans nil)
    (empty_bv const-decl "[below[0] -> bool]" empty_bv nil))
   shostak))
 (not_and_zero 0
  (not_and_zero-1 nil 3726333394
   ("" (skeep :preds? t)
    (("" (grind) (("" (decompose-equality) (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bvec0 const-decl "bit" bv nil)
    (below type-eq-decl nil nat_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (or_commutativity_TCC1 0
  (or_commutativity_TCC1-1 nil 3726331454 ("" (subtype-tcc) nil nil)
   nil nil))
 (or_commutativity_TCC2 0
  (or_commutativity_TCC2-1 nil 3726331454 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil))
   nil))
 (or_commutativity_TCC3 0
  (or_commutativity_TCC3-1 nil 3726331454 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (or_commutativity 0
  (or_commutativity-1 nil 3726331459
   ("" (skeep :preds? t)
    (("" (decompose-equality)
      (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bv2 skolem-const-decl "bvec[m]" general_lemmas nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (m skolem-const-decl "upfrom(n)" general_lemmas nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (n skolem-const-decl "nat" general_lemmas nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (or_associativity_TCC1 0
  (or_associativity_TCC1-1 nil 3726331454 ("" (subtype-tcc) nil nil)
   nil nil))
 (or_associativity_TCC2 0
  (or_associativity_TCC2-1 nil 3726331454 ("" (subtype-tcc) nil nil)
   nil nil))
 (or_associativity 0
  (or_associativity-1 nil 3726331743 ("" (skeep :preds? t) nil nil) nil
   shostak))
 (and_or_distributive_TCC1 0
  (and_or_distributive_TCC1-1 nil 3726331454 ("" (subtype-tcc) nil nil)
   nil nil))
 (and_or_distributive_TCC2 0
  (and_or_distributive_TCC2-1 nil 3726331454 ("" (subtype-tcc) nil nil)
   nil nil))
 (and_or_distributive 0
  (and_or_distributive-1 nil 3726331752
   ("" (skeep :preds? t)
    (("" (decompose-equality) (("" (grind) nil nil)) nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (or_and_distributive_TCC1 0
  (or_and_distributive_TCC1-1 nil 3726331454 ("" (subtype-tcc) nil nil)
   nil nil))
 (or_and_distributive_TCC2 0
  (or_and_distributive_TCC2-1 nil 3726331454 ("" (subtype-tcc) nil nil)
   nil nil))
 (or_and_distributive 0
  (or_and_distributive-1 nil 3726331766
   ("" (skeep :preds? t)
    (("" (decompose-equality) (("" (grind) nil nil)) nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (not_or_one 0
  (not_or_one-1 nil 3726333414
   ("" (skeep :preds? t)
    (("" (decompose-equality) (("" (grind) nil nil)) nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (bvec1 const-decl "bit" bv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (and_or_demorgan 0
  (and_or_demorgan-1 nil 3726333434
   ("" (skeep :preds? t)
    (("" (decompose-equality) (("" (grind) nil nil)) nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (or_empty_any_TCC1 0
  (or_empty_any_TCC1-1 nil 3726334285 ("" (subtype-tcc) nil nil)
   ((empty_bv const-decl "[below[0] -> bool]" empty_bv nil)) nil))
 (or_empty_any 0
  (or_empty_any-1 nil 3726334288
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((n skolem-const-decl "nat" general_lemmas nil)
    (< const-decl "bool" reals nil)
    (empty_bv const-decl "[below[0] -> bool]" empty_bv nil)
    (below type-eq-decl nil nat_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (or_empty_empty 0
  (or_empty_empty-1 nil 3726334333 ("" (bvec-strat) nil nil)
   ((empty_bv const-decl "[below[0] -> bool]" empty_bv nil)
    (TRUE const-decl "bool" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (below type-eq-decl nil naturalnumbers nil))
   shostak))
 (xor_commutativity_TCC1 0
  (xor_commutativity_TCC1-1 nil 3726333945 ("" (subtype-tcc) nil nil)
   nil nil))
 (xor_commutativity_TCC2 0
  (xor_commutativity_TCC2-1 nil 3726333945 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil))
   nil))
 (xor_commutativity 0
  (xor_commutativity-1 nil 3726333946
   ("" (grind)
    (("" (decompose-equality)
      (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
    nil)
   ((IFF const-decl "[bool, bool -> bool]" booleans nil)
    (n!1 skolem-const-decl "nat" general_lemmas nil)
    (m!1 skolem-const-decl "upfrom(n!1)" general_lemmas nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (XOR const-decl "bool" xor_def nil)
    (/= const-decl "boolean" notequal nil))
   shostak))
 (xor_associativity_TCC1 0
  (xor_associativity_TCC1-1 nil 3726333945 ("" (subtype-tcc) nil nil)
   nil nil))
 (xor_associativity_TCC2 0
  (xor_associativity_TCC2-1 nil 3726333945 ("" (subtype-tcc) nil nil)
   nil nil))
 (xor_associativity 0
  (xor_associativity-1 nil 3726333964
   ("" (skeep :preds? t)
    (("" (decompose-equality) (("" (grind) nil nil)) nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (XOR const-decl "bool" xor_def nil) (bit type-eq-decl nil bit nil)
    (bvec type-eq-decl nil bv nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil))
   shostak))
 (not_xor_one 0
  (not_xor_one-1 nil 3726333978
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((XOR const-decl "bool" xor_def nil) (bit type-eq-decl nil bit nil)
    (bvec type-eq-decl nil bv nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (bvec1 const-decl "bit" bv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil))
   shostak))
 (xor_rev 0
  (xor_rev-1 nil 3726333992
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((XOR const-decl "bool" xor_def nil) (bit type-eq-decl nil bit nil)
    (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil nat_types nil)
    (bvec1 const-decl "bit" bv nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil))
   shostak))
 (xor_inv 0
  (xor_inv-1 nil 3726334004
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((XOR const-decl "bool" xor_def nil) (bit type-eq-decl nil bit nil)
    (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil nat_types nil)
    (bvec0 const-decl "bit" bv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil))
   shostak))
 (xor_def 0
  (xor_def-1 nil 3726334090
   ("" (bitwise-basic-strat)
    (("" (decompose-equality) (("" (grind) nil nil)) nil)) nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (XOR const-decl "bool" xor_def nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (xor_def2 0
  (xor_def2-1 nil 3726334113
   ("" (grind) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (XOR const-decl "bool" xor_def nil)
    (/= const-decl "boolean" notequal nil))
   shostak))
 (xor_empty_any_TCC1 0
  (xor_empty_any_TCC1-1 nil 3726334369 ("" (subtype-tcc) nil nil) nil
   nil))
 (xor_empty_any 0
  (xor_empty_any-1 nil 3726334370 ("" (bvec-strat) nil nil)
   ((empty_bv const-decl "[below[0] -> bool]" empty_bv nil)
    (/= const-decl "boolean" notequal nil)
    (XOR const-decl "bool" xor_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (n!1 skolem-const-decl "nat" general_lemmas nil)
    (< const-decl "bool" reals nil))
   shostak))
 (xor_empty_empty 0
  (xor_empty_empty-1 nil 3726334392 ("" (bvec-strat) nil nil)
   ((empty_bv const-decl "[below[0] -> bool]" empty_bv nil)
    (XOR const-decl "bool" xor_def nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (below type-eq-decl nil naturalnumbers nil))
   shostak))
 (left_shift_toomuch_TCC1 0
  (left_shift_toomuch_TCC1-1 nil 3726334875 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (left_shift_toomuch_TCC2 0
  (left_shift_toomuch_TCC2-1 nil 3726334875 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (left_shift_toomuch_TCC3 0
  (left_shift_toomuch_TCC3-1 nil 3726334875 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (left_shift_toomuch 0
  (left_shift_toomuch-1 nil 3726334880
   ("" (skeep) (("" (grind) (("" (decompose-equality) nil nil)) nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil nat_types nil)
    (bvec0 const-decl "bit" bv nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (right_shift_toomuch_TCC1 0
  (right_shift_toomuch_TCC1-1 nil 3726334875 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (right_shift_toomuch_TCC2 0
  (right_shift_toomuch_TCC2-1 nil 3726334875 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (right_shift_toomuch 0
  (right_shift_toomuch-1 nil 3726334893
   ("" (grind) (("" (grind) (("" (decompose-equality) nil nil)) nil))
    nil)
   ((bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil nat_types nil)
    (bvec0 const-decl "bit" bv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (length_empty 0
  (length_empty-1 nil 3726335834 ("" (propax) nil nil) nil shostak))
 (extz_empty_TCC1 0
  (extz_empty_TCC1-1 nil 3726336680 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty_bv const-decl "[below[0] -> bool]" empty_bv nil))
   nil))
 (extz_empty_TCC2 0
  (extz_empty_TCC2-1 nil 3726336680 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (extz_empty_TCC3 0
  (extz_empty_TCC3-1 nil 3726453960 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil))
 (extz_empty 0
  (extz_empty-1 nil 3726336691
   ("" (skeep)
    (("" (grind)
      (("1" (expand "o") (("1" (decompose-equality) nil nil)) nil)
       ("2" (decompose-equality) nil nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bvec0 const-decl "bit" bv nil)
    (FALSE const-decl "bool" booleans nil)
    (fill const-decl "bit" bv nil)
    (below type-eq-decl nil nat_types nil)
    (bit type-eq-decl nil bit nil)
    (O const-decl "bvec[n + m]" bv_concat_def nil)
    (empty_bv const-decl "[below[0] -> bool]" empty_bv nil))
   shostak))
 (mask_empty_TCC1 0
  (mask_empty_TCC1-1 nil 3726337567 ("" (subtype-tcc) nil nil) nil
   nil))
 (mask_empty 0
  (mask_empty-1 nil 3726337497
   ("" (grind) (("" (bvec-strat) nil nil)) nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (TRUE const-decl "bool" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (empty_bv const-decl "[below[0] -> bool]" empty_bv nil))
   shostak))
 (mask_inv_TCC1 0
  (mask_inv_TCC1-1 nil 3726337567 ("" (subtype-tcc) nil nil) nil nil))
 (mask_inv 0
  (mask_inv-1 nil 3726337567 ("" (bvec-strat) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil))
   shostak))
 (mask_slice_eq_TCC1 0
  (mask_slice_eq_TCC1-1 nil 3726338158 ("" (subtype-tcc) nil nil) nil
   nil))
 (mask_slice_eq_TCC2 0
  (mask_slice_eq_TCC2-1 nil 3726338158 ("" (subtype-tcc) nil nil) nil
   nil))
 (mask_slice_eq_TCC3 0
  (mask_slice_eq_TCC3-1 nil 3726338158 ("" (subtype-tcc) nil nil) nil
   nil))
 (mask_slice_eq 0
  (mask_slice_eq-1 nil 3726338158 ("" (bvec-strat) nil nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (slice_raw const-decl "bvec[j - i + 1]" slice_raw nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil))
   shostak))
 (slice_to_empty_TCC1 0
  (slice_to_empty_TCC1-1 nil 3726338338 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (slice_to_empty_TCC2 0
  (slice_to_empty_TCC2-1 nil 3726338338 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (slice_to_empty 0
  (slice_to_empty-1 nil 3726338338 ("" (bvec-strat) nil nil)
   ((below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (empty_bv const-decl "[below[0] -> bool]" empty_bv nil)
    (extend const-decl "R" extend nil)
    (slice_raw const-decl "bvec[j - i + 1]" slice_raw nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (slice_singleton_TCC1 0
  (slice_singleton_TCC1-1 nil 3726338581 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (slice_singleton_TCC2 0
  (slice_singleton_TCC2-1 nil 3726338581 ("" (subtype-tcc) nil nil) nil
   nil))
 (slice_singleton_TCC3 0
  (slice_singleton_TCC3-1 nil 3726338581 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (slice_singleton 0
  (slice_singleton-1 nil 3726338582 ("" (bvec-strat) nil nil)
   ((below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (slice_raw const-decl "bvec[j - i + 1]" slice_raw nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (below type-eq-decl nil naturalnumbers nil))
   shostak))
 (slice_def_TCC1 0
  (slice_def_TCC1-1 nil 3726338644 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (slice_def_TCC2 0
  (slice_def_TCC2-1 nil 3726338644 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (slice_def 0
  (slice_def-1 nil 3726338646 ("" (bvec-strat) nil nil)
   ((below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (slice_raw const-decl "bvec[j - i + 1]" slice_raw nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil))
   shostak))
 (slice_inv_TCC1 0
  (slice_inv_TCC1-1 nil 3726338700 ("" (subtype-tcc) nil nil) nil nil))
 (slice_inv_TCC2 0
  (slice_inv_TCC2-1 nil 3726338700 ("" (subtype-tcc) nil nil) nil nil))
 (slice_inv 0
  (slice_inv-1 nil 3726338700 ("" (bvec-strat) nil nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil nat_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (slice_raw const-decl "bvec[j - i + 1]" slice_raw nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (reverse_empty 0
  (reverse_empty-1 nil 3726340196 ("" (bvec-strat) nil nil)
   ((empty_bv const-decl "[below[0] -> bool]" empty_bv nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (below type-eq-decl nil naturalnumbers nil))
   shostak))
 (unsigned_empty_zero 0
  (unsigned_empty_zero-1 nil 3726340226 ("" (grind) nil nil)
   ((empty_bv const-decl "[below[0] -> bool]" empty_bv nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (unsigned const-decl "nat" unsigned nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (unsigned_rec_TCC1 0
  (unsigned_rec_TCC1-1 nil 3726340195 ("" (subtype-tcc) nil nil) nil
   nil))
 (unsigned_rec_TCC2 0
  (unsigned_rec_TCC2-1 nil 3726340195 ("" (subtype-tcc) nil nil) nil
   nil))
 (unsigned_rec_TCC3 0
  (unsigned_rec_TCC3-1 nil 3726340195 ("" (subtype-tcc) nil nil) nil
   nil))
 (unsigned_rec 0
  (unsigned_rec-1 nil 3726340987
   ("" (induct "n")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skeep)
      (("3" (prop)
        (("1" (skeep)
          (("1" (inst -1 "bv^(j+1,1)")
            (("1" (grind)
              (("1"
                (use "bv2nat_rec_res_eq"
                     ("i" "1" "j" "j" "x" "reverse(bv)" "y"
                      "reverse(bv)^(j,0)"))
                (("1" (prop)
                  (("1"
                    (case "(LAMBDA (i: below(2 + j)): bv(2 + j - i - 1)) ^ (j, 0) = (LAMBDA (i: below(1 + j)): bv(1 - i + j))")
                    (("1" (replaces -1) (("1" (grind) nil nil)) nil)
                     ("2" (expand "^") (("2" (propax) nil nil)) nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil)
                 ("2" (case "j = 0")
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (case "j = 0")
          (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
        nil))
      nil)
     ("4" (grind) nil nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (bv2nat_rec def-decl "nat" bv_nat nil) (^ const-decl "bit" bv nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nil application-judgement "above(n)" exp2 nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (TRUE const-decl "bool" booleans nil)
    (bv2nat_rec_res_eq formula-decl nil general_lemmas nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (b2n const-decl "nbit" bit nil) (nbit type-eq-decl nil bit nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (unsigned const-decl "nat" unsigned nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (unsigned_not_sum 0
  (unsigned_not_sum-1 nil 3726341188
   ("" (induct "n")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst -1 "bv^(j,1)")
          (("1" (lemma "unsigned_rec" ("n" "j" "bv" "bv"))
            (("1" (replaces -1)
              (("1"
                (lemma "unsigned_rec"
                 ("n" "j" "bv"
                  "(LAMBDA (i: below(1 + j)): NOT bv(i))"))
                (("1" (replaces -1)
                  (("1" (case "bv(0)")
                    (("1" (assert) (("1" (grind) nil nil)) nil)
                     ("2" (replace 1) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "j = 0")
              (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (<= const-decl "bool" reals nil)
    (j skolem-const-decl "nat" general_lemmas nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "bit" bv nil)
    (nil application-judgement "above(n)" exp2 nil)
    (TRUE const-decl "bool" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (b2n const-decl "nbit" bit nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (unsigned_rec formula-decl nil general_lemmas nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (unsigned const-decl "nat" unsigned nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (unsigned_mib_one_TCC1 0
  (unsigned_mib_one_TCC1-1 nil 3726345121 ("" (subtype-tcc) nil nil)
   ((^ const-decl "bit" bv nil)) nil))
 (unsigned_mib_one 0
  (unsigned_mib_one-1 nil 3726345123
   ("" (induct "n")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skeep)
      (("3" (prop)
        (("1" (skeep)
          (("1" (inst -1 "bv^(j,1)")
            (("1" (assert)
              (("1" (prop)
                (("1" (use "unsigned_rec" ("n" "j" "bv" "bv"))
                  (("1" (replaces -1)
                    (("1" (assert)
                      (("1" (case "b2n(bv(0)) = 1")
                        (("1" (replaces -1) (("1" (grind) nil nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "j = 0")
                    (("1" (replace -1)
                      (("1" (expand "unsigned")
                        (("1" (expand "bv2nat")
                          (("1" (replace -1)
                            (("1" (hide -2) (("1" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (expand "unsigned")
                  (("2" (expand "bv2nat")
                    (("2" (case "j = 0")
                      (("1" (replace -1) (("1" (grind) nil nil)) nil)
                       ("2" (expand "bv2nat_rec")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "j = 0")
              (("1" (expand "unsigned")
                (("1" (expand "bv2nat")
                  (("1" (replace -1) (("1" (grind) nil nil)) nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil))
    nil)
   ((int_times_even_is_even application-judgement "even_int" integers
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (unsigned_rec formula-decl nil general_lemmas nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (b2n const-decl "nbit" bit nil) (nbit type-eq-decl nil bit nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TRUE const-decl "bool" booleans nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (j skolem-const-decl "nat" general_lemmas nil)
    (<= const-decl "bool" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (unsigned const-decl "nat" unsigned nil)
    (pred type-eq-decl nil defined_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil nat_types nil) (^ const-decl "bit" bv nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (unsigned_one_mib_TCC1 0
  (unsigned_one_mib_TCC1-1 nil 3726347096 ("" (subtype-tcc) nil nil)
   nil nil))
 (unsigned_one_mib 0
  (unsigned_one_mib-1 nil 3726347098
   ("" (skeep :preds? t)
    (("" (use "unsigned_rec" ("n" "n - 1" "bv" "bv"))
      (("1" (replaces -1)
        (("1" (use "unsigned_upperbound[n-1]" ("bv" "bv^(n-1,1)"))
          (("1" (sub-formulas -3 -1)
            (("1" (case "exp2(n - 1) * b2n(bv(0)) > 0")
              (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
            nil)
           ("2" (case "n = 1")
            (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (case "n = 1")
        (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (unsigned_rec formula-decl nil general_lemmas nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (unsigned_upperbound formula-decl nil unsigned nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (^ const-decl "bit" bv nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (n skolem-const-decl "posnat" general_lemmas nil)
    (unsigned const-decl "nat" unsigned nil)
    (exp2 def-decl "posnat" exp2 nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_neg_lt1 formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_neg formula-decl nil extra_tegies nil)
    (add_neg formula-decl nil extra_tegies nil)
    (b2n const-decl "nbit" bit nil) (nbit type-eq-decl nil bit nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (unsigned_ext_0_TCC1 0
  (unsigned_ext_0_TCC1-1 nil 3726347334 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (unsigned_ext_0 0
  (unsigned_ext_0-1 nil 3726347337
   ("" (induct "n")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst -1 "j" "bv^(j_1,1)")
          (("1" (prop)
            (("1" (use "unsigned_rec" ("n" "j_1+j" "bv" "bv"))
              (("1" (replaces -1)
                (("1" (replace -2)
                  (("1" (assert)
                    (("1" (use "unsigned_rec" ("n" "j_1" "bv" "bv"))
                      (("1" (replaces -1)
                        (("1" (assert) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (case "j_1=0")
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (case "j_1=0")
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil))
            nil)
           ("2" (case "j_1=0")
            (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("3" (grind) nil nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (j_1 skolem-const-decl "nat" general_lemmas nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (unsigned_rec formula-decl nil general_lemmas nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (exp2 def-decl "posnat" exp2 nil) (b2n const-decl "nbit" bit nil)
    (^ const-decl "bit" bv nil) (TRUE const-decl "bool" booleans nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (unsigned const-decl "nat" unsigned nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (unsigned_mibs_zero_TCC1 0
  (unsigned_mibs_zero_TCC1-1 nil 3726347508 ("" (subtype-tcc) nil nil)
   ((bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (unsigned const-decl "nat" unsigned nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (unsigned_mibs_zero 0
  (unsigned_mibs_zero-1 nil 3726347510
   ("" (induct "n")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skeep)
      (("3" (skeep :preds? t)
        (("3" (prop)
          (("1" (inst -1 "m" "bv^(j,1)")
            (("1" (assert)
              (("1" (induct "k")
                (("1" (prop)
                  (("1" (inst -1 "0")
                    (("1" (use "unsigned_mib_one")
                      (("1" (assert)
                        (("1" (case "m=j")
                          (("1" (replace -1) (("1" (assert) nil nil))
                            nil)
                           ("2" (case "m<j")
                            (("1" (use "exp2_lt")
                              (("1" (assert) nil nil)) nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("2" (case "m=j")
                    (("1" (replace -1)
                      (("1" (assert)
                        (("1" (use "unsigned_mib_one")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("3" (use "unsigned_mib_one")
                    (("3" (assert)
                      (("3" (case "m < j")
                        (("1" (use "exp2_lt") (("1" (assert) nil nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (assert)
                    (("2" (prop)
                      (("1" (inst -1 "jb")
                        (("1" (case "bv ^ (j, 1) ^ jb = bv ^ (1 + jb)")
                          (("1" (replaces 1) (("1" (assert) nil nil))
                            nil)
                           ("2" (expand "^") (("2" (propax) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (use "unsigned_rec" ("n" "j" "bv" "bv"))
                        (("2" (replaces -1) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (unsigned_rec formula-decl nil general_lemmas nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (b2n const-decl "nbit" bit nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (unsigned_mib_one formula-decl nil general_lemmas nil)
    (exp2_lt formula-decl nil exp2 nil)
    (m skolem-const-decl "posnat" general_lemmas nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (j skolem-const-decl "nat" general_lemmas nil)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil) (^ const-decl "bit" bv nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (exp2 def-decl "posnat" exp2 nil)
    (unsigned const-decl "nat" unsigned nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (extz_unsigned_TCC1 0
  (extz_unsigned_TCC1-1 nil 3726347766 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (extz_unsigned_TCC2 0
  (extz_unsigned_TCC2-1 nil 3726347766 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (extz_unsigned_TCC3 0
  (extz_unsigned_TCC3-1 nil 3726347766 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (extz_unsigned_TCC4 0
  (extz_unsigned_TCC4-1 nil 3726347766 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil))
 (extz_unsigned 0
  (extz_unsigned-1 nil 3726347768
   ("" (induct "m")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst -1 "n" "bv")
          (("2" (assert)
            (("2" (swap-rel -1)
              (("1" (replaces -1)
                (("1" (case "n < j + n")
                  (("1" (replace -1)
                    (("1"
                      (use "unsigned_rec"
                           ("n" "n+j" "bv"
                            "(bv o fill[1 + j](FALSE))"))
                      (("1" (replaces -1)
                        (("1"
                          (case "(bv o fill[1 + j](FALSE))(0) = FALSE")
                          (("1" (replaces -1)
                            (("1"
                              (case "(bv o fill[1 + j](FALSE)) ^ (n + j, 1) = (bv o fill[j](FALSE))")
                              (("1"
                                (replaces -1)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (expand "o")
                                (("2"
                                  (expand "^")
                                  (("2"
                                    (grind)
                                    (("2"
                                      (decompose-equality)
                                      (("1" (grind) nil nil)
                                       ("2" (grind) nil nil)
                                       ("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (expand "o") (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (case "j = 0")
                    (("1" (assert)
                      (("1" (replace -1)
                        (("1"
                          (use "unsigned_rec"
                               ("n"
                                "n + j"
                                "bv"
                                "(bv o fill[1 + j](FALSE))"))
                          (("1" (replaces -1)
                            (("1" (assert)
                              (("1"
                                (case
                                 "(bv o fill[1 + j](FALSE))(0) = FALSE")
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "(bv o fill[1 + j](FALSE)) ^ (n, 1) = bv")
                                          (("1"
                                            (replaces -1)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (expand "o")
                                            (("2"
                                              (decompose-equality)
                                              (("1" (grind) nil nil)
                                               ("2" (grind) nil nil)
                                               ("3" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "o")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil) ("3" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil)
     ("6" (grind) nil nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (unsigned_rec formula-decl nil general_lemmas nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (exp2 def-decl "posnat" exp2 nil) (b2n const-decl "nbit" bit nil)
    (^ const-decl "bit" bv nil) (bv2nat_rec def-decl "nat" bv_nat nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (j skolem-const-decl "nat" general_lemmas nil)
    (n skolem-const-decl "nat" general_lemmas nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (empty_bv const-decl "[below[0] -> bool]" empty_bv nil)
    (extend const-decl "R" extend nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (fill const-decl "bit" bv nil)
    (O const-decl "bvec[n + m]" bv_concat_def nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (unsigned const-decl "nat" unsigned nil)
    (pred type-eq-decl nil defined_types nil)
    (below type-eq-decl nil nat_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (exts_signed_TCC1 0
  (exts_signed_TCC1-1 nil 3726348121 ("" (subtype-tcc) nil nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (exts_signed 0
  (exts_signed-1 nil 3726348123
   ("" (induct "m")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep :preds? t)
        (("2" (inst -2 "n" "bv")
          (("2" (assert)
            (("2" (case "n < j + n")
              (("1" (replace -1)
                (("1" (case "unsigned(bv) < exp2(n - 1)")
                  (("1" (replace -1)
                    (("1" (use "unsigned_mib_one")
                      (("1" (assert)
                        (("1"
                          (use "unsigned_rec"
                               ("n"
                                "n + j"
                                "bv"
                                "bv o fill[1 + j](FALSE)"))
                          (("1" (replaces -1)
                            (("1"
                              (case "b2n((bv o fill[1 + j](FALSE))(0)) = 0")
                              (("1"
                                (replaces -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (case
                                     "(bv o fill[1 + j](FALSE)) ^ (j + n, 1) = bv o fill[j](FALSE)")
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (case
                                         "unsigned(bv o fill[j](FALSE)) < exp2(j - 1 + n)")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (case
                                             "unsigned[j + n](bv o fill[j](FALSE)) < exp2(j + n)")
                                            (("1"
                                              (replace -1)
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2"
                                              (hide 3)
                                              (("2"
                                                (use
                                                 "unsigned_upperbound"
                                                 ("bv"
                                                  "bv o fill[j](FALSE)"))
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace 1)
                                          (("2"
                                            (use
                                             "unsigned_upperbound"
                                             ("bv"
                                              "bv o fill[j](FALSE)"))
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 3)
                                      (("2"
                                        (expand "o")
                                        (("2"
                                          (expand "^")
                                          (("2"
                                            (decompose-equality)
                                            (("1" (grind) nil nil)
                                             ("2" (grind) nil nil)
                                             ("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 3)
                                (("2"
                                  (expand "o")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replace 1)
                    (("2" (use "unsigned_one_mib")
                      (("2" (assert)
                        (("2"
                          (case "unsigned(bv o fill[j](TRUE)) < exp2(j - 1 + n)")
                          (("1" (replace -1)
                            (("1"
                              (use "unsigned_upperbound" ("bv" "bv"))
                              (("1"
                                (both-sides "-" "exp2(n)" -1)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replace 1)
                            (("2"
                              (use "unsigned_rec"
                                   ("n"
                                    "n + j"
                                    "bv"
                                    "bv o fill[1 + j](TRUE)"))
                              (("2"
                                (replaces -1)
                                (("2"
                                  (case
                                   "b2n((bv o fill[1 + j](TRUE))(0)) = 1")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (case
                                       "(bv o fill[1 + j](TRUE)) ^ (n + j, 1) = bv o fill[j](TRUE)")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (use
                                             "exp2_n"
                                             ("n" "j + n"))
                                            (("1"
                                              (replaces -1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 4)
                                        (("2"
                                          (expand "o")
                                          (("2"
                                            (expand "^")
                                            (("2"
                                              (decompose-equality)
                                              (("1" (grind) nil nil)
                                               ("2" (grind) nil nil)
                                               ("3" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 4)
                                    (("2"
                                      (expand "o")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (case "j = 0")
                (("1" (replace -1)
                  (("1" (assert)
                    (("1" (case "unsigned(bv) < exp2(n-1)")
                      (("1" (replace -1)
                        (("1" (use "unsigned_mib_one")
                          (("1" (assert)
                            (("1"
                              (use "unsigned_rec"
                                   ("n"
                                    "n + j"
                                    "bv"
                                    "bv o fill[1 + j](FALSE)"))
                              (("1"
                                (replace -1)
                                (("1"
                                  (case
                                   "(bv o fill[1 + j](FALSE)) ^ (n + j, 1) = bv")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (case
                                       "b2n((bv o fill[1 + j](FALSE))(0)) = 0")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (use
                                             "exp2_n"
                                             ("n" "n - 1"))
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case
                                                   "unsigned[j + n](bv) = unsigned(bv)")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 4)
                                                    (("2"
                                                      (rewrite
                                                       "unsigned_ext_0")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "o")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "o")
                                    (("2"
                                      (expand "^")
                                      (("2"
                                        (decompose-equality)
                                        nil
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replace 1)
                        (("2" (use "unsigned_one_mib")
                          (("2" (assert)
                            (("2"
                              (use "unsigned_rec"
                                   ("n"
                                    "n + j"
                                    "bv"
                                    "bv o fill[1 + j](TRUE)"))
                              (("2"
                                (replace -1)
                                (("2"
                                  (case
                                   "(bv o fill[1 + j](TRUE)) ^ (n + j, 1) = bv")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (case
                                       "b2n((bv o fill[1 + j](TRUE))(0)) = 1")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             "unsigned[j + n](bv) = unsigned(bv)")
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -4)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (use "exp2_sum")
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite
                                               "unsigned_ext_0")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 4)
                                        (("2"
                                          (expand "o")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 4)
                                    (("2"
                                      (expand "o")
                                      (("2"
                                        (expand "^")
                                        (("2"
                                          (decompose-equality)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil)
     ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (unsigned_mib_one formula-decl nil general_lemmas nil)
    (unsigned_rec formula-decl nil general_lemmas nil)
    (nbit type-eq-decl nil bit nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (n skolem-const-decl "posnat" general_lemmas nil)
    (j skolem-const-decl "nat" general_lemmas nil)
    (unsigned_upperbound formula-decl nil unsigned nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (unsigned_one_mib formula-decl nil general_lemmas nil)
    (both_sides_minus_lt1 formula-decl nil real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (exp2_n formula-decl nil exp2 nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (unsigned_ext_0 formula-decl nil general_lemmas nil)
    (exp2_sum formula-decl nil exp2 nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (b2n const-decl "nbit" bit nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (empty_bv const-decl "[below[0] -> bool]" empty_bv nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (unsigned const-decl "nat" unsigned nil)
    (O const-decl "bvec[n + m]" bv_concat_def nil)
    (below type-eq-decl nil nat_types nil)
    (fill const-decl "bit" bv nil) (^ const-decl "bit" bv nil)
    (exp2 def-decl "posnat" exp2 nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (extz_fill_F_TCC1 0
  (extz_fill_F_TCC1-1 nil 3726437686 ("" (subtype-tcc) nil nil) nil
   nil))
 (extz_fill_F_TCC2 0
  (extz_fill_F_TCC2-1 nil 3726437686 ("" (subtype-tcc) nil nil)
   ((^ const-decl "bit" bv nil)) nil))
 (extz_fill_F_TCC3 0
  (extz_fill_F_TCC3-1 nil 3726437686 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (^ const-decl "bit" bv nil))
   nil))
 (extz_fill_F_TCC4 0
  (extz_fill_F_TCC4-1 nil 3726437686 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (^ const-decl "bit" bv nil))
   nil))
 (extz_fill_F 0
  (extz_fill_F-1 nil 3726437687
   ("" (skeep)
    (("" (expand "o")
      (("" (expand "^")
        (("" (decompose-equality) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (O const-decl "bvec[n + m]" bv_concat_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (m skolem-const-decl "posnat" general_lemmas nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (n skolem-const-decl "posnat" general_lemmas nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (below type-eq-decl nil nat_types nil)
    (fill const-decl "bit" bv nil)
    (FALSE const-decl "bool" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (^ const-decl "bit" bv nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (mib_one_signed 0
  (mib_one_signed-1 nil 3726507648
   ("" (skeep :preds? t)
    (("" (expand "most_significant")
      (("" (use "unsigned_mib_one")
        (("" (assert)
          (("" (case "bv^(0) = bv(0)")
            (("1" (replaces -1)
              (("1" (assert)
                (("1" (use "unsigned_upperbound[n]")
                  (("1" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (expand "^") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((most_significant const-decl "bit" most_significant nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (unsigned_upperbound formula-decl nil unsigned nil)
    (^ const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (unsigned_mib_one formula-decl nil general_lemmas nil))
   shostak))
 (unsigned_left_shift 0
  (unsigned_left_shift-1 nil 3726611864
   ("" (induct "n")
    (("1" (skeep)
      (("1" (use "bv_is_empty" ("n" "0" "bv" "bv"))
        (("1" (assert)
          (("1" (replaces -1)
            (("1" (use "unsigned_empty_zero")
              (("1" (grind)
                (("1" (use "bv2nat_rec_fill_F[i]" ("n" "i"))
                  (("1"
                    (case "(LAMBDA (i1: below(i)): FALSE) = fill[i](FALSE)")
                    (("1" (replaces -1) nil nil)
                     ("2" (decompose-equality) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst -1 "i" "bv^(j,1)")
          (("1" (use "unsigned_rec" ("n" "i + j" "bv" "bvec0[i] o bv"))
            (("1" (replaces -1)
              (("1" (use "unsigned_rec" ("n" "j" "bv" "bv"))
                (("1" (replaces -1)
                  (("1" (case "(bvec0[i] o bv)(0) = bv(0)")
                    (("1" (replaces -1)
                      (("1" (use "exp2_sum")
                        (("1" (replaces -1)
                          (("1" (assert)
                            (("1"
                              (case "(bvec0[i] o bv) ^ (i + j, 1) = bvec0[i] o (bv ^ (j, 1))")
                              (("1"
                                (replaces -1)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (expand "o")
                                (("2"
                                  (expand "^")
                                  (("2"
                                    (decompose-equality)
                                    (("1" (grind) nil nil)
                                     ("2" (grind) nil nil)
                                     ("3" (grind) nil nil)
                                     ("4" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (grind) nil nil)
                               ("4" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil)
           ("2" (case "j = 0")
            (("1"
              (use "unsigned_rec" ("n" "i + j" "bv" "bvec0[i] o bv"))
              (("1" (replaces -1)
                (("1" (case "(bvec0[i] o bv)(0) = bv(0)")
                  (("1" (replaces -1)
                    (("1"
                      (case "(bvec0[i] o bv) ^ (i + j, 1) = bvec0[i]")
                      (("1" (replaces -1)
                        (("1" (use "unsigned_fill_F[i + j]")
                          (("1" (grind)
                            (("1" (decompose-equality) nil nil)
                             ("2" (decompose-equality) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "o")
                        (("2" (expand "^")
                          (("2" (decompose-equality) nil nil)) nil))
                        nil)
                       ("3" (grind) nil nil) ("4" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (expand "o") (("2" (propax) nil nil)) nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (j skolem-const-decl "nat" general_lemmas nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (i skolem-const-decl "nat" general_lemmas nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (exp2_sum formula-decl nil exp2 nil)
    (unsigned_rec formula-decl nil general_lemmas nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (unsigned_fill_F formula-decl nil unsigned nil)
    (nil application-judgement "above(n)" exp2 nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (unsigned_empty_zero formula-decl nil general_lemmas nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (bv2nat_rec_fill_F formula-decl nil bv_nat nil)
    (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil)
    (fill const-decl "bit" bv nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (empty_bv const-decl "[below[0] -> bool]" empty_bv nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (extend const-decl "R" extend nil)
    (TRUE const-decl "bool" booleans nil)
    (bv_is_empty formula-decl nil general_lemmas nil)
    (FALSE const-decl "bool" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bvec0 const-decl "bit" bv nil)
    (below type-eq-decl nil nat_types nil)
    (O const-decl "bvec[n + m]" bv_concat_def nil)
    (unsigned const-decl "nat" unsigned nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (unsigned_right_shift_oneb_TCC1 0
  (unsigned_right_shift_oneb_TCC1-1 nil 3728426492
   ("" (subtype-tcc) nil nil) nil nil))
 (unsigned_right_shift_oneb_TCC2 0
  (unsigned_right_shift_oneb_TCC2-1 nil 3728426492
   ("" (subtype-tcc) nil nil) nil nil))
 (unsigned_right_shift_oneb 0
  (unsigned_right_shift_oneb-1 nil 3728427313
   ("" (skeep :preds? t) (("" (postpone) nil nil)) nil) nil shostak))
 (unsigned_right_shift_TCC1 0
  (unsigned_right_shift_TCC1-1 nil 3726620919
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (unsigned_right_shift_TCC2 0
  (unsigned_right_shift_TCC2-1 nil 3726620919
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (unsigned_right_shift_TCC3 0
  (unsigned_right_shift_TCC3-1 nil 3726620919
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (unsigned_right_shift 0
  (unsigned_right_shift-1 nil 3726620920
   ("" (induct "n")
    (("1" (skeep)
      (("1" (case "i = 0")
        (("1" (assert)
          (("1" (replaces -1)
            (("1" (grind) (("1" (rewrite "floor_int") nil nil)) nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (use "unsigned_fill_F[0]") (("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (assert)
          (("2" (inst -1 "i" "bv^(j - 1, 0)")
            (("1" (case "i = 0")
              (("1" (assert)
                (("1" (replaces -1) (("1" (grind) nil nil)) nil)) nil)
               ("2" (assert)
                (("2" (case "i < j")
                  (("1" (assert)
                    (("1" (use "unsigned_rec" ("n" "j" "bv" "bv"))
                      (("1" (replaces -1)
                        (("1"
                          (use "unsigned_rec"
                               ("n"
                                "j"
                                "bv"
                                "bv ^ (j - i, 0) o bvec0[i]"))
                          (("1" (replaces -1)
                            (("1"
                              (case "(bv ^ (j - i, 0) o bvec0[i])(0) = FALSE")
                              (("1"
                                (replaces -1)
                                (("1"
                                  (case
                                   "(exp2(j) * b2n(bv(0)) + unsigned[j](bv ^ (j, 1))) / exp2(i) = unsigned[j](bv ^ (j - 1, 0)) / exp2(i) + b2n(bv(0)) * exp2(j - i)")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (case
                                       "floor(unsigned[j](bv ^ (j - 1, 0)) / exp2(i) +
              b2n(bv(0)) * exp2(j - i)) = floor(unsigned[j](bv ^ (j - 1, 0)) / exp2(i)) + b2n(bv(0)) * exp2(j - i)")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (case
                                           "(bv ^ (j - i, 0) o bvec0[i]) ^ (j, 1) = (bv ^ (j - i, 0) o bvec0[i - 1])")
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (case
                                               "bv ^ (j - 1, 0) ^ (-1 - i + j, 0) = bv ^ (j - i - 1, 0)")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (postpone)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (postpone)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (postpone) nil nil))
                                          nil))
                                        nil)
                                       ("2" (postpone) nil nil))
                                      nil))
                                    nil)
                                   ("2" (postpone) nil nil))
                                  nil))
                                nil)
                               ("2" (postpone) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (postpone) nil nil))
                  nil))
                nil))
              nil)
             ("2" (postpone) nil nil) ("3" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil))
    nil)
   nil shostak))
 (to_vec_fill_F 0
  (to_vec_fill_F-1 nil 3726344929
   ("" (skeep)
    (("" (case-insert-fname "unsigned")
      (("1" (rewrite "unsigned_inj") nil nil)
       ("2" (rewrite "unsigned_inv")
        (("2" (replaces -1)
          (("2" (swap-rel 1)
            (("2" (rewrite "unsigned_fill_F") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((bvec0 const-decl "bit" bv nil)
    (below type-eq-decl nil nat_types nil)
    (to_vec_inc const-decl "bvec[len]" to_vec_inc nil)
    (unsigned const-decl "nat" unsigned nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (unsigned_inj formula-decl nil unsigned nil)
    (TRUE const-decl "bool" booleans nil)
    (unsigned_fill_F formula-decl nil unsigned nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nil application-judgement "below(m)" mod nil)
    (unsigned_inv formula-decl nil to_vec_inc nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (to_vec_fill_T 0
  (to_vec_fill_T-1 nil 3726345038
   ("" (skeep)
    (("" (case-insert-fname "unsigned")
      (("1" (rewrite "unsigned_inj") nil nil)
       ("2" (rewrite "unsigned_inv")
        (("2" (replaces -1)
          (("2" (swap-rel 1)
            (("2" (rewrite "unsigned_fill_T") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((bvec1 const-decl "bit" bv nil)
    (below type-eq-decl nil nat_types nil)
    (to_vec_inc const-decl "bvec[len]" to_vec_inc nil)
    (unsigned const-decl "nat" unsigned nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (unsigned_inj formula-decl nil unsigned nil)
    (TRUE const-decl "bool" booleans nil)
    (unsigned_fill_T formula-decl nil unsigned nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "below(m)" mod nil)
    (unsigned_inv formula-decl nil to_vec_inc nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (to_vec_inj_ext 0
  (to_vec_inj_ext-1 nil 3726350634
   ("" (skeep)
    (("" (case "x >= 0 AND x < exp2(len)")
      (("1" (case "y >= 0 AND y < exp2(len)")
        (("1" (use "to_vec_inj") (("1" (grind) nil nil)) nil)
         ("2" (expand "to_vec_inc")
          (("2" (replace -1)
            (("2" (replace 1)
              (("2"
                (case "nat2bv[len](x) =  nat2bv[len](mod(y, exp2(len)))")
                (("1" (use "nat2bv_inj")
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
                 ("2" (decompose-equality)
                  (("2" (decompose-equality)
                    (("2" (assert)
                      (("2" (typepred "x!1")
                        (("2" (inst -2 "len - 1 - x!1")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (case "y >= 0 AND y < exp2(len)")
        (("1" (expand "to_vec_inc")
          (("1" (replace -1)
            (("1" (replace 1)
              (("1"
                (case "nat2bv[len](mod(x, exp2(len))) = nat2bv[len](y)")
                (("1" (use "nat2bv_inj")
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
                 ("2" (decompose-equality)
                  (("2" (decompose-equality)
                    (("2" (inst -1 "len - 1 - x!1")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("3" (propax) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "to_vec_inc")
          (("2" (replace 1)
            (("2" (replace 2)
              (("2"
                (case " nat2bv[len](mod(x, exp2(len))) =  nat2bv[len](mod(y, exp2(len)))")
                (("1" (use "nat2bv_inj") (("1" (grind) nil nil)) nil)
                 ("2" (decompose-equality)
                  (("2" (decompose-equality)
                    (("2" (inst -1 "len - 1 - x!1")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat2bv_inj formula-decl nil general_lemmas nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (to_vec_inj formula-decl nil to_vec_inc nil)
    (below type-eq-decl nil naturalnumbers nil)
    (y skolem-const-decl "int" general_lemmas nil)
    (len skolem-const-decl "nat" general_lemmas nil)
    (x skolem-const-decl "int" general_lemmas nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (to_vec_inc const-decl "bvec[len]" to_vec_inc nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (nil application-judgement "below(m)" mod nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (to_vec_inv_signed 0
  (to_vec_inv_signed-1 nil 3726421744
   ("" (skeep :preds? t)
    (("" (case-insert-fname "unsigned")
      (("1" (rewrite "unsigned_inj") nil nil)
       ("2" (rewrite "unsigned_inv")
        (("2" (hide 2)
          (("2" (case "unsigned(bv) < exp2(len - 1)")
            (("1" (replaces -1)
              (("1" (rewrite "mod_lt_nat")
                (("1" (rewrite "unsigned_upperbound[len]") nil nil))
                nil))
              nil)
             ("2" (replace 1)
              (("2"
                (use "mod_sum"
                     ("i" "unsigned(bv)" "k" "-1" "j" "exp2(len)"))
                (("2" (replaces -1)
                  (("2" (rewrite "mod_lt_nat")
                    (("2" (rewrite "unsigned_upperbound[len]") nil
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (exp2 def-decl "posnat" exp2 nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (to_vec_inc const-decl "bvec[len]" to_vec_inc nil)
    (unsigned const-decl "nat" unsigned nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (unsigned_inj formula-decl nil unsigned nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (mod_sum formula-decl nil mod nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (unsigned_upperbound formula-decl nil unsigned nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mod_lt_nat formula-decl nil mod nil)
    (nil application-judgement "below(m)" mod nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (unsigned_inv formula-decl nil to_vec_inc nil))
   shostak))
 (to_vec_empty 0
  (to_vec_empty-1 nil 3726351415
   ("" (skeep)
    (("" (case-insert-fname "unsigned[0]")
      (("1" (rewrite "unsigned_inj") nil nil)
       ("2" (hide 2)
        (("2" (rewrite "unsigned_inv")
          (("2" (use "unsigned_empty_zero")
            (("2" (replaces -1) (("2" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((empty_bv const-decl "[below[0] -> bool]" empty_bv nil)
    (below type-eq-decl nil nat_types nil)
    (to_vec_inc const-decl "bvec[len]" to_vec_inc nil)
    (< const-decl "bool" reals nil)
    (unsigned const-decl "nat" unsigned nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (unsigned_inj formula-decl nil unsigned nil)
    (unsigned_inv formula-decl nil to_vec_inc nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (TRUE const-decl "bool" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (unsigned_empty_zero formula-decl nil general_lemmas nil))
   shostak))
 (mod_signed_to_vec_eq 0
  (mod_signed_to_vec_eq-1 nil 3726507958
   ("" (skeep)
    (("" (rewrite "unsigned_inv") (("" (grind) nil nil)) nil)) nil)
   ((unsigned_inv formula-decl nil to_vec_inc nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nil application-judgement "below(m)" mod nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (to_vec_eq 0
  (to_vec_eq-1 nil 3726351347 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (to_vec_inc const-decl "bvec[len]" to_vec_inc nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (eq_vec_empty_any 0
  (eq_vec_empty_any-1 nil 3726525511
   ("" (use "unsigned_empty_zero") nil nil)
   ((unsigned_empty_zero formula-decl nil general_lemmas nil))
   shostak))
 (gt_vec_lteq_rel 0
  (gt_vec_lteq_rel-1 nil 3726357477 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (unsigned const-decl "nat" unsigned nil)
    (exp2 def-decl "posnat" exp2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (gt_range_vec_lteq_rel 0
  (gt_range_vec_lteq_rel-1 nil 3726358110 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (unsigned const-decl "nat" unsigned nil)
    (exp2 def-decl "posnat" exp2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (gt_vec_range_lteq_rel 0
  (gt_vec_range_lteq_rel-1 nil 3726358116 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (unsigned const-decl "nat" unsigned nil)
    (exp2 def-decl "posnat" exp2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (gteq_vec_lt_rel 0
  (gteq_vec_lt_rel-1 nil 3726358121 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (unsigned const-decl "nat" unsigned nil)
    (exp2 def-decl "posnat" exp2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (gteq_range_vec_lt_rel 0
  (gteq_range_vec_lt_rel-1 nil 3726358128 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (unsigned const-decl "nat" unsigned nil)
    (exp2 def-decl "posnat" exp2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (gteq_vec_range_lt_rel 0
  (gteq_vec_range_lt_rel-1 nil 3726358133 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (unsigned const-decl "nat" unsigned nil)
    (exp2 def-decl "posnat" exp2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (lteq_vec_empty_any 0
  (lteq_vec_empty_any-1 nil 3726525585 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (empty_bv const-decl "[below[0] -> bool]" empty_bv nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (unsigned const-decl "nat" unsigned nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (gteq_vec_any_empty 0
  (gteq_vec_any_empty-1 nil 3726525624 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (unsigned const-decl "nat" unsigned nil)
    (empty_bv const-decl "[below[0] -> bool]" empty_bv nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (add_vec_commutativity_TCC1 0
  (add_vec_commutativity_TCC1-1 nil 3726418162
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (unsigned const-decl "nat" unsigned nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (add_vec_commutativity 0
  (add_vec_commutativity-1 nil 3726418172
   ("" (skeep)
    (("" (case-insert-fname "unsigned")
      (("1" (rewrite "unsigned_inj") nil nil)
       ("2" (hide 2)
        (("2" (rewrite "unsigned_inv")
          (("2" (rewrite "unsigned_inv")
            (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (to_vec_inc const-decl "bvec[len]" to_vec_inc nil)
    (unsigned const-decl "nat" unsigned nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (unsigned_inj formula-decl nil unsigned nil)
    (unsigned_inv formula-decl nil to_vec_inc nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil))
   shostak))
 (add_vec_associativity 0
  (add_vec_associativity-1 nil 3726418362
   ("" (skeep)
    (("" (case-insert-fname "unsigned")
      (("1" (rewrite "unsigned_inj") nil nil)
       ("2" (hide 2)
        (("2" (rewrite "unsigned_inv")
          (("2" (rewrite "unsigned_inv")
            (("2" (rewrite "unsigned_inv")
              (("2" (rewrite "unsigned_inv")
                (("2" (replace -1)
                  (("2"
                    (case "unsigned[m](bv2) + unsigned[k](bv3) < exp2(n)")
                    (("1" (rewrite "mod_lt_nat")
                      (("1"
                        (case "unsigned[m](bv2) + unsigned[n](bv1) < exp2(n)")
                        (("1"
                          (case "unsigned[n](bv1) + (unsigned[m](bv2) + unsigned[k](bv3)) < exp2(n)")
                          (("1" (rewrite "mod_lt_nat")
                            (("1" (rewrite "mod_lt_nat")
                              (("1" (rewrite "mod_lt_nat") nil nil))
                              nil))
                            nil)
                           ("2"
                            (use "mod_lt_nat"
                                 ("n"
                                  "unsigned[m](bv2) + unsigned[n](bv1)"
                                  "m"
                                  "exp2(n)"))
                            (("2" (assert) nil nil)) nil))
                          nil)
                         ("2"
                          (use "mod_gt"
                               ("m"
                                "exp2(n)"
                                "i"
                                "unsigned[m](bv2) + unsigned[n](bv1)"))
                          (("2" (assert)
                            (("2" (prop)
                              (("1"
                                (replaces -1)
                                (("1"
                                  (use
                                   "mod_sum"
                                   ("i"
                                    "unsigned[m](bv2) + unsigned[n](bv1) + unsigned[k](bv3)"
                                    "k"
                                    "-1"
                                    "j"
                                    "exp2(n)"))
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (use "unsigned_upperbound[m]")
                                (("2"
                                  (use "unsigned_upperbound[n]")
                                  (("2" (add-formulas -1 -2) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (use "mod_gt"
                           ("m" "exp2(n)" "i"
                            "unsigned[m](bv2) + unsigned[k](bv3)"))
                      (("2" (assert)
                        (("2" (prop)
                          (("1" (replaces -1)
                            (("1"
                              (case "unsigned[m](bv2) + unsigned[n](bv1) < exp2(n)")
                              (("1"
                                (use
                                 "mod_lt_nat"
                                 ("n"
                                  "unsigned[m](bv2) + unsigned[n](bv1)"
                                  "m"
                                  "exp2(n)"))
                                (("1"
                                  (assert)
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (use
                                       "mod_sum"
                                       ("i"
                                        "unsigned[m](bv2) + unsigned[n](bv1) + unsigned[k](bv3)"
                                        "k"
                                        "-1"
                                        "j"
                                        "exp2(n)"))
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (use
                                 "mod_gt"
                                 ("m"
                                  "exp2(n)"
                                  "i"
                                  "unsigned[m](bv2) + unsigned[n](bv1)"))
                                (("2"
                                  (assert)
                                  (("2"
                                    (use "unsigned_upperbound[m]")
                                    (("2"
                                      (use "unsigned_upperbound[n]")
                                      (("2"
                                        (add-formulas -1 -2)
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (use "unsigned_upperbound[m]")
                            (("2" (use "unsigned_upperbound[k]")
                              (("2" (add-formulas -1 -2) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (to_vec_inc const-decl "bvec[len]" to_vec_inc nil)
    (unsigned const-decl "nat" unsigned nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (unsigned_inj formula-decl nil unsigned nil)
    (unsigned_inv formula-decl nil to_vec_inc nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (mod_lt_nat formula-decl nil mod nil)
    (mod_gt formula-decl nil mod nil)
    (mod_sum formula-decl nil mod nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (unsigned_upperbound formula-decl nil unsigned nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil))
   shostak))
 (add_overflow_rel 0
  (add_overflow_rel-1 nil 3726419175
   ("" (skeep)
    (("" (case "unsigned[n](bv1) + unsigned[m](bv2) < exp2(n)")
      (("1" (replaces -1) (("1" (assert) nil nil)) nil)
       ("2" (replaces 1)
        (("2" (assert)
          (("2" (case-insert-fname "unsigned")
            (("1" (rewrite "unsigned_inj") nil nil)
             ("2" (rewrite "unsigned_inv")
              (("2" (rewrite "unsigned_inv")
                (("2"
                  (use "mod_sum"
                       ("i" "unsigned[m](bv2) + unsigned[n](bv1)" "k"
                        "-1" "j" "exp2(n)"))
                  (("2" (replaces -1)
                    (("2" (hide 2) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (add_vec_def 0
  (add_vec_def-1 nil 3726419326
   ("" (skeep) (("" (rewrite "unsigned_inv") nil nil)) nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (unsigned_inv formula-decl nil to_vec_inc nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (unsigned const-decl "nat" unsigned nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (add_empty_any 0
  (add_empty_any-1 nil 3726421586
   ("" (skeep)
    (("" (case-insert-fname "unsigned")
      (("1" (rewrite "unsigned_inj") nil nil)
       ("2" (rewrite "unsigned_inv")
        (("2" (hide 2)
          (("2" (use "unsigned_empty_zero")
            (("2" (replaces -1)
              (("2" (assert)
                (("2" (rewrite "mod_lt_nat")
                  (("2" (use "unsigned_upperbound[n]") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty_bv const-decl "[below[0] -> bool]" empty_bv nil)
    (below type-eq-decl nil nat_types nil)
    (FALSE const-decl "bool" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (to_vec_inc const-decl "bvec[len]" to_vec_inc nil)
    (unsigned const-decl "nat" unsigned nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (unsigned_inj formula-decl nil unsigned nil)
    (TRUE const-decl "bool" booleans nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mod_lt_nat formula-decl nil mod nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (unsigned_upperbound formula-decl nil unsigned nil)
    (unsigned_empty_zero formula-decl nil general_lemmas nil)
    (nil application-judgement "below(m)" mod nil)
    (nil application-judgement "above(n)" exp2 nil)
    (unsigned_inv formula-decl nil to_vec_inc nil))
   shostak))
 (add_any_empty 0
  (add_any_empty-1 nil 3726421977
   ("" (skeep)
    (("" (case-insert-fname "unsigned[0]")
      (("1" (rewrite "unsigned_inj") nil nil)
       ("2" (hide 2)
        (("2" (rewrite "unsigned_inv")
          (("2" (use "unsigned_empty_zero")
            (("2" (replaces -1)
              (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty_bv const-decl "[below[0] -> bool]" empty_bv nil)
    (below type-eq-decl nil nat_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (to_vec_inc const-decl "bvec[len]" to_vec_inc nil)
    (< const-decl "bool" reals nil)
    (unsigned const-decl "nat" unsigned nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (unsigned_inj formula-decl nil unsigned nil)
    (unsigned_inv formula-decl nil to_vec_inc nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (TRUE const-decl "bool" booleans nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (unsigned_empty_zero formula-decl nil general_lemmas nil))
   shostak))
 (add_vec_signed_unsigned_TCC1 0
  (add_vec_signed_unsigned_TCC1-1 nil 3726420605
   ("" (subtype-tcc) nil nil) nil nil))
 (add_vec_signed_unsigned 0
  (add_vec_signed_unsigned-1 nil 3726420441
   ("" (skeep :preds? t)
    (("" (case-insert-fname "unsigned")
      (("1" (rewrite "unsigned_inj") nil nil)
       ("2" (rewrite "unsigned_inv")
        (("2" (rewrite "unsigned_inv")
          (("2" (hide 2)
            (("2" (case "unsigned(bv1) < exp2(n - 1)")
              (("1" (replaces -1)
                (("1" (case "unsigned(bv2) < exp2(m - 1)")
                  (("1" (replaces -1) nil nil)
                   ("2" (replaces 1)
                    (("2"
                      (use "mod_sum"
                           ("i" "unsigned[n](bv1) + unsigned[m](bv2)"
                            "k" "-1" "j" "exp2(m)"))
                      (("2" (replaces -1) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (replaces 1)
                (("2" (case "unsigned(bv2) < exp2(m - 1)")
                  (("1" (replaces -1)
                    (("1"
                      (use "mod_sum"
                           ("i" "unsigned[n](bv1) + unsigned[m](bv2)"
                            "k" "-1" "j" "exp2(n)"))
                      (("1" (replaces -1) nil nil)) nil))
                    nil)
                   ("2" (replaces 1)
                    (("2"
                      (use "mod_sum"
                           ("i" "unsigned[n](bv1) + unsigned[m](bv2)"
                            "k" "-2" "j" "exp2(n)"))
                      (("2" (replaces -1)
                        (("2" (replaces -4)
                          (("2" (replaces -1) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (exp2 def-decl "posnat" exp2 nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (to_vec_inc const-decl "bvec[len]" to_vec_inc nil)
    (unsigned const-decl "nat" unsigned nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (unsigned_inj formula-decl nil unsigned nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (mod_sum formula-decl nil mod nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (TRUE const-decl "bool" booleans nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nil application-judgement "below(m)" mod nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (unsigned_inv formula-decl nil to_vec_inc nil))
   shostak))
 (add_vec_range_signed_unsigned 0
  (add_vec_range_signed_unsigned-1 nil 3726420806
   ("" (skeep :preds? t)
    (("" (case-insert-fname "unsigned")
      (("1" (rewrite "unsigned_inj") nil nil)
       ("2" (rewrite "unsigned_inv")
        (("2" (rewrite "unsigned_inv")
          (("2" (hide 2)
            (("2" (case "unsigned(bv) < exp2(n - 1)")
              (("1" (replaces -1) nil nil)
               ("2" (replaces 1)
                (("2"
                  (use "mod_sum"
                       ("i" "unsigned(bv) + m" "k" "-1" "j" "exp2(n)"))
                  (("2" (replaces -1) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (exp2 def-decl "posnat" exp2 nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (to_vec_inc const-decl "bvec[len]" to_vec_inc nil)
    (unsigned const-decl "nat" unsigned nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (unsigned_inj formula-decl nil unsigned nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (mod_sum formula-decl nil mod nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "below(m)" mod nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (unsigned_inv formula-decl nil to_vec_inc nil))
   shostak))
 (add_range_vec_signed_unsigned 0
  (add_range_vec_signed_unsigned-1 nil 3726420895
   ("" (skeep :preds? t)
    (("" (case-insert-fname "unsigned")
      (("1" (rewrite "unsigned_inj") nil nil)
       ("2" (rewrite "unsigned_inv")
        (("2" (rewrite "unsigned_inv")
          (("2" (hide 2)
            (("2" (case "unsigned(bv) < exp2(n - 1)")
              (("1" (replaces -1) nil nil)
               ("2" (replaces 1)
                (("2"
                  (use "mod_sum"
                       ("i" "unsigned(bv) + m" "k" "-1" "j" "exp2(n)"))
                  (("2" (replaces -1) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (exp2 def-decl "posnat" exp2 nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (to_vec_inc const-decl "bvec[len]" to_vec_inc nil)
    (unsigned const-decl "nat" unsigned nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (unsigned_inj formula-decl nil unsigned nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (mod_sum formula-decl nil mod nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "below(m)" mod nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (unsigned_inv formula-decl nil to_vec_inc nil))
   shostak))
 (add_vec_bit_signed_unsigned 0
  (add_vec_bit_signed_unsigned-1 nil 3726420967
   ("" (skeep)
    (("" (case "b")
      (("1" (replaces -1)
        (("1" (case-insert-fname "unsigned")
          (("1" (rewrite "unsigned_inj") nil nil)
           ("2" (rewrite "unsigned_inv")
            (("2" (rewrite "unsigned_inv")
              (("2" (hide 2)
                (("2" (case "unsigned(bv) < exp2(n - 1)")
                  (("1" (replaces -1) (("1" (assert) nil nil)) nil)
                   ("2" (replaces 1)
                    (("2"
                      (use "mod_sum"
                           ("i" "unsigned(bv) + 1" "k" "-1" "j"
                            "exp2(n)"))
                      (("2" (replaces -1) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (replace 1)
        (("2" (assert)
          (("2" (case "unsigned(bv) < exp2(n - 1)")
            (("1" (replace -1) (("1" (rewrite "to_vec_inv") nil nil))
              nil)
             ("2" (replace 1)
              (("2"
                (use "to_vec_inv_ext" ("len" "n" "i" "-1" "bv" "bv"))
                (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bit type-eq-decl nil bit nil)
    (boolean nonempty-type-decl nil booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (exp2 def-decl "posnat" exp2 nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (to_vec_inc const-decl "bvec[len]" to_vec_inc nil)
    (unsigned const-decl "nat" unsigned nil)
    (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (unsigned_inj formula-decl nil unsigned nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (mod_sum formula-decl nil mod nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (nil application-judgement "below(m)" mod nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (unsigned_inv formula-decl nil to_vec_inc nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (to_vec_inv_ext formula-decl nil to_vec_inc nil)
    (to_vec_inv formula-decl nil to_vec_inc nil))
   shostak))
 (minus_eq_plus_neg 0
  (minus_eq_plus_neg-1 nil 3726423304
   ("" (skeep)
    (("" (rewrite "unsigned_inv")
      (("" (rewrite "to_vec_inj_rev")
        (("" (hide 2)
          (("" (use "unsigned_not_sum" ("n" "m" "bv" "bv2"))
            (("" (both-sides "-" "unsigned(bv2)" -1)
              (("" (assert)
                (("" (replaces -1)
                  (("" (assert)
                    ((""
                      (use "mod_lt_nat"
                           ("n" "exp2(m)-unsigned(bv2)" "m" "exp2(m)"))
                      (("" (prop)
                        (("1" (replaces -1)
                          (("1"
                            (use "mod_sum"
                                 ("i"
                                  "unsigned[n](bv1) - unsigned[m](bv2)"
                                  "k"
                                  "1"
                                  "j"
                                  "exp2(n)"))
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (case "unsigned(bv2) = 0")
                          (("1" (replaces -1)
                            (("1" (assert)
                              (("1"
                                (use "mod_eq_arg")
                                (("1"
                                  (replaces -1)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (use "unsigned_lowerbound[m]")
                            (("2" (hide 3) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (unsigned_inv formula-decl nil to_vec_inc nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (unsigned const-decl "nat" unsigned nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nil application-judgement "below(m)" mod nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (mod_lt_nat formula-decl nil mod nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mod_eq_arg formula-decl nil mod nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (unsigned_lowerbound formula-decl nil unsigned nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mod_sum formula-decl nil mod nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (unsigned_not_sum formula-decl nil general_lemmas nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (to_vec_inj_rev formula-decl nil to_vec_inc nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (add_plus_neg 0
  (add_plus_neg-1 nil 3726424332
   ("" (skeep)
    (("" (rewrite "unsigned_inv")
      (("" (case-insert-fname "unsigned")
        (("1" (rewrite "unsigned_inj") nil nil)
         ("2" (hide 2)
          (("2" (rewrite "unsigned_inv")
            (("2" (use "unsigned_fill_F" ("bv" "bvec0[n]"))
              (("2" (assert)
                (("2" (replaces -1)
                  (("2" (use "unsigned_not_sum" ("n" "n" "bv" "bv"))
                    (("2" (both-sides "-" "unsigned(bv)" -1)
                      (("2" (assert)
                        (("2" (replaces -1)
                          (("2" (assert)
                            (("2" (rewrite "mod_lt_nat")
                              (("1"
                                (assert)
                                (("1" (rewrite "mod_eq_arg") nil nil))
                                nil)
                               ("2"
                                (case "unsigned(bv) = 0")
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (rewrite "mod_eq_arg")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (rewrite "mod_zero")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (use "unsigned_lowerbound[n]")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (unsigned_inv formula-decl nil to_vec_inc nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (unsigned const-decl "nat" unsigned nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nil application-judgement "below(m)" mod nil)
    (unsigned_fill_F formula-decl nil unsigned nil)
    (TRUE const-decl "bool" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mod_lt_nat formula-decl nil mod nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mod_eq_arg formula-decl nil mod nil)
    (unsigned_lowerbound formula-decl nil unsigned nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (mod_zero formula-decl nil mod nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (unsigned_not_sum formula-decl nil general_lemmas nil)
    (unsigned_inj formula-decl nil unsigned nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (to_vec_inc const-decl "bvec[len]" to_vec_inc nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (below type-eq-decl nil nat_types nil)
    (bvec0 const-decl "bit" bv nil))
   shostak))
 (minus_any_empty 0
  (minus_any_empty-1 nil 3726426016
   ("" (skeep)
    (("" (use "unsigned_empty_zero")
      (("" (replaces -1)
        (("" (assert) (("" (rewrite "to_vec_inv") nil nil)) nil)) nil))
      nil))
    nil)
   ((unsigned_empty_zero formula-decl nil general_lemmas nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (to_vec_inv formula-decl nil to_vec_inc nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (minus_empty_any 0
  (minus_empty_any-1 nil 3726426092
   ("" (skeep)
    (("" (use "unsigned_empty_zero")
      (("" (replaces -1)
        (("" (assert)
          (("" (case-insert-fname "unsigned[0]")
            (("1" (rewrite "unsigned_inj") nil nil)
             ("2" (hide 2)
              (("2" (rewrite "unsigned_inv")
                (("2" (use "unsigned_empty_zero")
                  (("2" (replaces -1)
                    (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unsigned_empty_zero formula-decl nil general_lemmas nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (nil application-judgement "below(m)" mod nil)
    (nil application-judgement "above(n)" exp2 nil)
    (unsigned_inv formula-decl nil to_vec_inc nil)
    (unsigned_inj formula-decl nil unsigned nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (unsigned const-decl "nat" unsigned nil)
    (< const-decl "bool" reals nil)
    (to_vec_inc const-decl "bvec[len]" to_vec_inc nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (empty_bv const-decl "[below[0] -> bool]" empty_bv nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (multiply_upperbound 0
  (multiply_upperbound-1 nil 3728427019
   ("" (skeep)
    (("" (use "unsigned_upperbound[n]")
      (("" (use "unsigned_upperbound[m]")
        (("" (mult-ineq -1 -2)
          (("" (hide -2 -3)
            (("" (use "exp2_sum") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((unsigned_upperbound formula-decl nil unsigned nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (unsigned const-decl "nat" unsigned nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (exp2_sum formula-decl nil exp2 nil))
   shostak))
 (mult_overflow_firstelem 0
  (mult_overflow_firstelem-1 nil 3728427153 ("" (skeep) nil nil) nil
   shostak))
 (multiply_vec_commutativity_TCC1 0
  (multiply_vec_commutativity_TCC1-1 nil 3726426324
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (unsigned const-decl "nat" unsigned nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (multiply_vec_commutativity 0
  (multiply_vec_commutativity-1 nil 3726426325
   ("" (skeep)
    (("" (replace -1)
      (("" (case-insert-fname "unsigned")
        (("1" (rewrite "unsigned_inj") nil nil)
         ("2" (hide 2) (("2" (rewrite "unsigned_inv") nil nil)) nil))
        nil))
      nil))
    nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (unsigned_inv formula-decl nil to_vec_inc nil)
    (nil application-judgement "below(m)" mod nil)
    (unsigned_inj formula-decl nil unsigned nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (unsigned const-decl "nat" unsigned nil)
    (to_vec_inc const-decl "bvec[len]" to_vec_inc nil))
   shostak))
 (multiply_def 0
  (multiply_def-1 nil 3726426472
   ("" (skeep)
    (("" (rewrite "unsigned_inv")
      (("" (rewrite "mod_lt_nat")
        (("" (hide 2)
          (("" (use "unsigned_upperbound[n]")
            (("" (use "unsigned_upperbound[m]")
              (("" (use "exp2_sum" ("n" "n" "m" "n"))
                (("" (assert)
                  (("" (replaces -1)
                    (("" (replaces -3)
                      (("" (mult-ineq -1 -2) (("" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nil application-judgement "above(n)" exp2 nil)
    (unsigned_inv formula-decl nil to_vec_inc nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (unsigned const-decl "nat" unsigned nil)
    (nil application-judgement "below(m)" mod nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (TRUE const-decl "bool" booleans nil)
    (exp2_sum formula-decl nil exp2 nil)
    (unsigned_upperbound formula-decl nil unsigned nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mod_lt_nat formula-decl nil mod nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil))
   shostak))
 (mult_vec_range_def 0
  (mult_vec_range_def-1 nil 3726426676
   ("" (skeep)
    (("" (case-insert-fname "unsigned")
      (("1" (rewrite "unsigned_inj") nil nil)
       ("2" (rewrite "unsigned_inv")
        (("2" (rewrite "unsigned_inv") nil nil)) nil))
      nil))
    nil)
   ((exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (to_vec_inc const-decl "bvec[len]" to_vec_inc nil)
    (unsigned const-decl "nat" unsigned nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (unsigned_inj formula-decl nil unsigned nil)
    (nil application-judgement "below(m)" mod nil)
    (unsigned_inv formula-decl nil to_vec_inc nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (mult_range_vec_def 0
  (mult_range_vec_def-1 nil 3726426702
   ("" (skeep)
    (("" (case-insert-fname "unsigned")
      (("1" (rewrite "unsigned_inj") nil nil)
       ("2" (rewrite "unsigned_inv")
        (("2" (rewrite "unsigned_inv")
          (("2" (hide 2)
            (("2" (rewrite "unsigned_inv") (("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (to_vec_inc const-decl "bvec[len]" to_vec_inc nil)
    (unsigned const-decl "nat" unsigned nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (unsigned_inj formula-decl nil unsigned nil)
    (nil application-judgement "below(m)" mod nil)
    (unsigned_inv formula-decl nil to_vec_inc nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (mult_any_empty 0
  (mult_any_empty-1 nil 3726427837
   ("" (skeep)
    (("" (case-insert-fname "unsigned[2*n]")
      (("1" (rewrite "unsigned_inj") nil nil)
       ("2" (hide 2)
        (("2" (rewrite "unsigned_inv")
          (("2" (use "unsigned_fill_F" ("bv" "bvec0[2*n]"))
            (("2" (assert)
              (("2" (replaces -1)
                (("2" (use "unsigned_empty_zero")
                  (("2" (replaces -1)
                    (("2" (assert) (("2" (rewrite "mod_zero") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bvec0 const-decl "bit" bv nil)
    (empty_bv const-decl "[below[0] -> bool]" empty_bv nil)
    (below type-eq-decl nil nat_types nil)
    (FALSE const-decl "bool" booleans nil)
    (to_vec_inc const-decl "bvec[len]" to_vec_inc nil)
    (unsigned const-decl "nat" unsigned nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (unsigned_inj formula-decl nil unsigned nil)
    (unsigned_inv formula-decl nil to_vec_inc nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (unsigned_empty_zero formula-decl nil general_lemmas nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (mod_zero formula-decl nil mod nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (TRUE const-decl "bool" booleans nil)
    (unsigned_fill_F formula-decl nil unsigned nil))
   shostak))
 (mult_empty_any 0
  (mult_empty_any-1 nil 3726427960
   ("" (skeep)
    (("" (case-insert-fname "unsigned[0]")
      (("1" (rewrite "unsigned_inj") nil nil)
       ("2" (hide 2)
        (("2" (rewrite "unsigned_inv")
          (("2" (use "unsigned_empty_zero")
            (("2" (replaces -1)
              (("2" (assert) (("2" (rewrite "mod_zero") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty_bv const-decl "[below[0] -> bool]" empty_bv nil)
    (below type-eq-decl nil nat_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (to_vec_inc const-decl "bvec[len]" to_vec_inc nil)
    (< const-decl "bool" reals nil)
    (unsigned const-decl "nat" unsigned nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (unsigned_inj formula-decl nil unsigned nil)
    (unsigned_inv formula-decl nil to_vec_inc nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (TRUE const-decl "bool" booleans nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (mod_zero formula-decl nil mod nil)
    (unsigned_empty_zero formula-decl nil general_lemmas nil))
   shostak))
 (subvec_mod_rel_TCC1 0
  (subvec_mod_rel_TCC1-1 nil 3726429365 ("" (subtype-tcc) nil nil) nil
   nil))
 (subvec_mod_rel_TCC2 0
  (subvec_mod_rel_TCC2-1 nil 3726429365 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (subvec_mod_rel 0
  (subvec_mod_rel-1 nil 3726429367
   ("" (induct "n")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skeep)
      (("3" (prop)
        (("1" (assert)
          (("1" (skeep)
            (("1" (inst -1 "m" "bv^(j,1)")
              (("1" (assert)
                (("1" (prop)
                  (("1"
                    (case "bv ^ (j, 1) ^ (j - 1, j - m) = bv ^ (j, 1 - m + j)")
                    (("1" (replaces -1)
                      (("1" (use "unsigned_rec" ("n" "j" "bv" "bv"))
                        (("1" (replaces -1)
                          (("1"
                            (case "mod(exp2(j) * b2n(bv(0)) + unsigned[j](bv ^ (j, 1)), exp2(m)) = mod(unsigned[j](bv ^ (j, 1)), exp2(m))")
                            (("1" (replace -1) (("1" (propax) nil nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (use "exp2_minus" ("n" "j" "k" "m"))
                                (("2"
                                  (mult-by -1 "exp2(m)")
                                  (("2"
                                    (swap-rel -1)
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (use
                                         "mod_sum"
                                         ("i"
                                          "unsigned[j](bv ^ (j, 1))"
                                          "k"
                                          "exp2(j - m) * b2n(bv(0))"
                                          "j"
                                          "exp2(m)"))
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "^") (("2" (propax) nil nil)) nil))
                    nil)
                   ("2" (case "m = j")
                    (("1" (replace -1)
                      (("1" (assert)
                        (("1" (use "unsigned_rec" ("n" "j" "bv" "bv"))
                          (("1" (replaces -1)
                            (("1"
                              (use "mod_sum"
                                   ("i"
                                    "unsigned[j](bv^(j,1))"
                                    "k"
                                    "b2n(bv(0))"
                                    "j"
                                    "exp2(j)"))
                              (("1"
                                (assert)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (rewrite "mod_lt_nat")
                                    (("1"
                                      (use
                                       "extz_unsigned"
                                       ("n"
                                        "m"
                                        "m"
                                        "j - m"
                                        "bv"
                                        "bv ^ (j, 1)"))
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (use
                                       "unsigned_upperbound[j]"
                                       ("bv" "bv ^ (j, 1)"))
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (case "j = 0")
                (("1" (replace -1)
                  (("1" (case "m = 0")
                    (("1" (replace -1) (("1" (assert) nil nil)) nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (case "j = 0")
          (("1" (skeep)
            (("1" (replace -1) (("1" (assert) nil nil)) nil)) nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil))
    nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (^ const-decl "bit" bv nil) (bv2nat_rec def-decl "nat" bv_nat nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (j skolem-const-decl "nat" general_lemmas nil)
    (TRUE const-decl "bool" booleans nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (mod_sum formula-decl nil mod nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (exp2_minus formula-decl nil exp2 nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (b2n const-decl "nbit" bit nil) (nbit type-eq-decl nil bit nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (unsigned_rec formula-decl nil general_lemmas nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (unsigned_upperbound formula-decl nil unsigned nil)
    (extz_unsigned formula-decl nil general_lemmas nil)
    (mod_lt_nat formula-decl nil mod nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "below(m)" mod nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (unsigned const-decl "nat" unsigned nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (extz_mod_rel_TCC1 0
  (extz_mod_rel_TCC1-1 nil 3726429982 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (extz_mod_rel_TCC2 0
  (extz_mod_rel_TCC2-1 nil 3726429982 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (extz_mod_rel_TCC3 0
  (extz_mod_rel_TCC3-1 nil 3726429982 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil))
   nil))
 (extz_mod_rel 0
  (extz_mod_rel-1 nil 3726429994
   ("" (skeep :preds? t)
    (("" (assert)
      (("" (use "exp2_lt")
        (("" (rewrite "mod_lt_nat")
          (("" (case "unsigned(bv) < exp2(len)")
            (("1" (rewrite "mod_lt_nat")
              (("1" (rewrite "to_vec_inv")
                (("1" (use "unsigned_mibs_zero")
                  (("1" (assert)
                    (("1"
                      (use "extz_unsigned"
                           ("n" "len" "m" "n - len" "bv"
                            "bv ^ (n - 1, n - len)"))
                      (("1" (assert)
                        (("1" (use "extz_fill_F")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (rewrite "unsigned_inv")
                (("2"
                  (case "mod(mod(unsigned[n](bv), exp2(len)), exp2(n)) = mod(unsigned[n](bv), exp2(len))")
                  (("1" (replaces -1)
                    (("1"
                      (use "subvec_mod_rel"
                           ("n" "n" "m" "len" "bv" "bv"))
                      (("1" (assert) nil nil)) nil))
                    nil)
                   ("2"
                    (use "mod_lt_nat"
                         ("n" "mod(unsigned[n](bv), exp2(len))" "m"
                          "exp2(n)"))
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (exp2 def-decl "posnat" exp2 nil)
    (mod_lt_nat formula-decl nil mod nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subvec_mod_rel formula-decl nil general_lemmas nil)
    (TRUE const-decl "bool" booleans nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (unsigned_inv formula-decl nil to_vec_inc nil)
    (unsigned_mibs_zero formula-decl nil general_lemmas nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (extz_unsigned formula-decl nil general_lemmas nil)
    (extz_fill_F formula-decl nil general_lemmas nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (to_vec_inv formula-decl nil to_vec_inc nil)
    (unsigned const-decl "nat" unsigned nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2_lt formula-decl nil exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "below(m)" mod nil))
   shostak))
 (exts_mod_rel_TCC1 0
  (exts_mod_rel_TCC1-1 nil 3726433781 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (exts_mod_rel_TCC2 0
  (exts_mod_rel_TCC2-1 nil 3726437334 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (exts_mod_rel_TCC3 0
  (exts_mod_rel_TCC3-1 nil 3726437334 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (exts_mod_rel_TCC4 0
  (exts_mod_rel_TCC4-1 nil 3726437334 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (exts_mod_rel_TCC5 0
  (exts_mod_rel_TCC5-1 nil 3726437334 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (exts_mod_rel_TCC6 0
  (exts_mod_rel_TCC6-1 nil 3726437334 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil))
   nil))
 (exts_mod_rel 0
  (exts_mod_rel-1 nil 3726433804
   ("" (skeep :preds? t)
    (("" (assert)
      (("" (use "extz_mod_rel") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (extz_mod_rel formula-decl nil general_lemmas nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "below(m)" mod nil))
   shostak))
 (mask_mod_rel_TCC1 0
  (mask_mod_rel_TCC1-1 nil 3726437334 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (mask_mod_rel 0
  (mask_mod_rel-1 nil 3726437335
   ("" (skeep :preds? t)
    (("" (case "m = n")
      (("1" (replace -1)
        (("1" (assert)
          (("1" (rewrite "mod_lt_nat")
            (("1" (use "extz_unsigned" ("n" "m" "m" "n-m" "bv" "bv"))
              (("1" (assert)
                (("1" (case "(LAMBDA (i: below[m]): bv(i)) = bv")
                  (("1" (replace -1) (("1" (assert) nil nil)) nil)
                   ("2" (decompose-equality) nil nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil)
             ("2" (use "unsigned_upperbound[n]") nil nil))
            nil))
          nil))
        nil)
       ("2" (case "m < n")
        (("1" (use "subvec_mod_rel" ("n" "n" "m" "m" "bv" "bv"))
          (("1" (assert)
            (("1"
              (case "(LAMBDA (i: below[m]): bv(i - m + n)) = bv ^ (n - 1, n - m)")
              (("1" (replaces -1) nil nil)
               ("2" (expand "^") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nil application-judgement "below(m)" mod nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (unsigned_upperbound formula-decl nil unsigned nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (extz_unsigned formula-decl nil general_lemmas nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (below type-eq-decl nil nat_types nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (unsigned const-decl "nat" unsigned nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (exp2 def-decl "posnat" exp2 nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (mod_lt_nat formula-decl nil mod nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (subvec_mod_rel formula-decl nil general_lemmas nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (mod_empty_any 0
  (mod_empty_any-1 nil 3726438164
   ("" (skeep)
    (("" (hide 1)
      (("" (case-insert-fname "unsigned[0]")
        (("1" (rewrite "unsigned_inj") nil nil)
         ("2" (hide 2)
          (("2" (use "unsigned_empty_zero")
            (("2" (replace -1)
              (("2" (rewrite "mod_zero")
                (("2" (rewrite "unsigned_inv")
                  (("2" (rewrite "mod_zero") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unsigned_inv formula-decl nil to_vec_inc nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nil application-judgement "below(m)" mod nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (mod_zero formula-decl nil mod nil)
    (unsigned_empty_zero formula-decl nil general_lemmas nil)
    (unsigned_inj formula-decl nil unsigned nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (unsigned const-decl "nat" unsigned nil)
    (< const-decl "bool" reals nil)
    (to_vec_inc const-decl "bvec[len]" to_vec_inc nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (below type-eq-decl nil nat_types nil)
    (empty_bv const-decl "[below[0] -> bool]" empty_bv nil))
   shostak))
 (quot_empty_any 0
  (quot_empty_any-1 nil 3726438376
   ("" (skeep)
    (("" (hide 1)
      (("" (case-insert-fname "unsigned[0]")
        (("1" (rewrite "unsigned_inj") nil nil)
         ("2" (hide 2)
          (("2" (use "unsigned_empty_zero")
            (("2" (replace -1)
              (("2" (rewrite "unsigned_inv")
                (("2" (case "floor(0 / unsigned[n](bv)) = 0")
                  (("1" (replaces -1)
                    (("1" (rewrite "mod_zero") nil nil)) nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (mod_zero formula-decl nil mod nil)
    (TRUE const-decl "bool" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (nil application-judgement "below(m)" mod nil)
    (nil application-judgement "above(n)" exp2 nil)
    (unsigned_inv formula-decl nil to_vec_inc nil)
    (unsigned_empty_zero formula-decl nil general_lemmas nil)
    (unsigned_inj formula-decl nil unsigned nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (unsigned const-decl "nat" unsigned nil)
    (< const-decl "bool" reals nil)
    (to_vec_inc const-decl "bvec[len]" to_vec_inc nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (empty_bv const-decl "[below[0] -> bool]" empty_bv nil))
   shostak)))

